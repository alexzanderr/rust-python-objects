{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"ap",
				"append"
			],
			[
				"python",
				"python_list"
			],
			[
				"print",
				"println!"
			],
			[
				"Hash",
				"HashMap"
			],
			[
				"write",
				"write!"
			],
			[
				"hash",
				"hash"
			],
			[
				"Val",
				"Values"
			],
			[
				"assert_",
				"assert_ne"
			],
			[
				"pus",
				"push_back"
			],
			[
				"Ve",
				"VecDeque"
			],
			[
				"Vec",
				"VecDeque"
			],
			[
				"type",
				"type_of"
			],
			[
				"_",
				"_list"
			],
			[
				"allo",
				"allow_everything"
			],
			[
				"Par",
				"PartialEq"
			],
			[
				"app",
				"append_back"
			],
			[
				"conta",
				"contains_char_or_string"
			],
			[
				"string",
				"string_representation"
			],
			[
				"__",
				"__str__"
			],
			[
				"push",
				"push_str"
			],
			[
				"useless",
				"useless_conversion"
			],
			[
				"ince",
				"module_inception"
			],
			[
				"has",
				"HashMap"
			],
			[
				"format",
				"formatter"
			],
			[
				"asse",
				"assert_eq!"
			],
			[
				"Typ",
				"type_of"
			],
			[
				"pr",
				"println!"
			],
			[
				"de",
				"debug_struct"
			],
			[
				"float",
				"float_64"
			],
			[
				"appe",
				"append_back"
			],
			[
				"floa",
				"FloatToInt"
			],
			[
				"derive",
				"derive_more"
			],
			[
				"PYTHON",
				"python_list"
			],
			[
				"aP",
				"AppendFront"
			],
			[
				"a",
				"Append"
			],
			[
				"Iter",
				"Iterator"
			],
			[
				"integer",
				"integer_list"
			],
			[
				"FromIter",
				"FromIterator"
			],
			[
				"From",
				"FromIter"
			],
			[
				"err",
				"Err"
			],
			[
				"from",
				"from_str"
			],
			[
				"pytno",
				"python_list"
			],
			[
				"vec",
				"vec_deque"
			],
			[
				"exce",
				"\"folder_exclude_patterns\""
			],
			[
				"String",
				"StringResult"
			],
			[
				"Font",
				"FontNotFoundError"
			],
			[
				"read",
				"read_to_string"
			],
			[
				"te",
				"templates"
			],
			[
				"ok",
				"ok"
			],
			[
				"sta",
				"starts_with"
			],
			[
				"d",
				"dbg!"
			],
			[
				"printl",
				"println!"
			],
			[
				"macro",
				"macro_rules"
			],
			[
				"tur",
				"turtle"
			],
			[
				"prinln",
				"println"
			],
			[
				"List",
				"ListIterator"
			],
			[
				"pthon",
				"python_list"
			],
			[
				"p",
				"pretty_assertions"
			],
			[
				"assert",
				"assert_eq"
			],
			[
				"include",
				"include_str!"
			],
			[
				"apppe",
				"append_pbool"
			],
			[
				"append",
				"append_pbool"
			],
			[
				"to",
				"to_digit"
			],
			[
				"to_",
				"to_string"
			],
			[
				"int",
				"_integer"
			],
			[
				"pointe",
				"pointer_to_one_elem"
			],
			[
				"le",
				"len"
			],
			[
				"allow",
				"allow_everything"
			],
			[
				"unwrap",
				"unwrap_or_else"
			],
			[
				"parse",
				"parse_arguments"
			],
			[
				"split",
				"split_off"
			],
			[
				"ex",
				"\"folder_exclude_patterns\""
			],
			[
				"private",
				"private_function"
			],
			[
				"pri",
				"private_function"
			],
			[
				"rust",
				"rust_core"
			],
			[
				"asert",
				"assert_eq!"
			],
			[
				"should",
				"should_panic"
			],
			[
				"sho",
				"should_panic"
			],
			[
				"add",
				"adder"
			],
			[
				"example",
				"example_code"
			],
			[
				"exmapl",
				"example_code"
			],
			[
				"or",
				"or_default"
			],
			[
				"enu",
				"enumerate"
			],
			[
				"init",
				"initial_scores"
			],
			[
				"into",
				"into_iter"
			],
			[
				"Inhe",
				"InheritFrom"
			],
			[
				"Obje",
				"Object"
			],
			[
				"rst",
				"rstest"
			],
			[
				"expec",
				"expect"
			],
			[
				"asser",
				"assert_eq"
			],
			[
				"algo",
				"algorithms"
			],
			[
				"target",
				"target_sum"
			],
			[
				"front",
				"front_of_house"
			],
			[
				"Ip",
				"IpAddrKind"
			],
			[
				"exitcode",
				"exit_code"
			],
			[
				"Exit",
				"ExitStatus"
			],
			[
				"exit",
				"ExitStatus"
			],
			[
				"exi",
				"exit_status"
			],
			[
				"insta",
				"install"
			],
			[
				"color",
				"color_backtrace"
			],
			[
				"std",
				"stderr_str"
			],
			[
				"out",
				"out_and_err"
			],
			[
				"print_python",
				"print_python_macro"
			],
			[
				"Dis",
				"Display"
			],
			[
				"sign",
				"sign_in_count"
			],
			[
				"em",
				"email"
			],
			[
				"Format",
				"Formatter"
			],
			[
				"al",
				"algorithms"
			],
			[
				"ten",
				"ten_to_minus_9"
			],
			[
				"minu",
				"minus_ten_to_minus_9"
			],
			[
				"panic",
				"panic!"
			],
			[
				"po",
				"pow"
			],
			[
				"unwra",
				"unwrap"
			],
			[
				"pos",
				"pos_table"
			],
			[
				"get",
				"get_key_value"
			],
			[
				"con",
				"contains_key"
			],
			[
				"inte",
				"integer"
			],
			[
				"appen",
				"append"
			],
			[
				"println",
				"println"
			],
			[
				"close",
				"closure"
			],
			[
				"Point2",
				"Point2D"
			],
			[
				"move",
				"move_right"
			],
			[
				"un",
				"unwrap_or"
			],
			[
				"load_the",
				"load_theme_from_file"
			],
			[
				"The",
				"ThemeSet"
			],
			[
				"pat",
				"path"
			],
			[
				"ar",
				"args"
			],
			[
				"unrea",
				"unreachable_code"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/float.rs",
			"settings":
			{
				"buffer_size": 2947,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					5,
					"delete_word",
					{
						"forward": false
					},
					"BQAAACIEAAAAAAAAIgQAAAAAAAAFAAAAdXNpemUfBAAAAAAAAB8EAAAAAAAAAwAAAGFzIBgEAAAAAAAAGAQAAAAAAAAHAAAAX2Zsb2F0IBcEAAAAAAAAFwQAAAAAAAABAAAALhMEAAAAAAAAEwQAAAAAAAAEAAAAc2VsZg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAnBAAAAAAAACcEAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "unimple"
					},
					"BwAAABMEAAAAAAAAFAQAAAAAAAAAAAAAFAQAAAAAAAAVBAAAAAAAAAAAAAAVBAAAAAAAABYEAAAAAAAAAAAAABYEAAAAAAAAFwQAAAAAAAAAAAAAFwQAAAAAAAAYBAAAAAAAAAAAAAAYBAAAAAAAABkEAAAAAAAAAAAAABkEAAAAAAAAGgQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATBAAAAAAAABMEAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"additionalTextEdits\":[],\"textEdit\":{\"range\":{\"end\":{\"character\":15,\"line\":71},\"start\":{\"character\":8,\"line\":71}},\"newText\":\"unimplemented!($0)\"},\"kind\":3,\"filterText\":\"unimplemented!\",\"label\":\"unimplemented!(â€¦)\",\"documentation\":{\"kind\":\"markdown\",\"value\":\"Indicates unimplemented code by panicking with a message of \\\"not implemented\\\".\\n\\nThis allows your code to type-check, which is useful if you are prototyping or\\nimplementing a trait that requires multiple methods which you don't plan to use all of.\\n\\nThe difference between `unimplemented!` and [`todo!`] is that while `todo!`\\nconveys an intent of implementing the functionality later and the message is \\\"not yet\\nimplemented\\\", `unimplemented!` makes no such claims. Its message is \\\"not implemented\\\".\\nAlso some IDEs will mark `todo!`s.\\n\\n# Panics\\n\\nThis will always [`panic!`] because `unimplemented!` is just a shorthand for `panic!` with a\\nfixed, specific message.\\n\\nLike `panic!`, this macro has a second form for displaying custom values.\\n\\n# Examples\\n\\nSay we have a trait `Foo`:\\n\\n```rust\\ntrait Foo {\\n    fn bar(&self) -> u8;\\n    fn baz(&self);\\n    fn qux(&self) -> Result<u64, ()>;\\n}\\n```\\n\\nWe want to implement `Foo` for 'MyStruct', but for some reason it only makes sense\\nto implement the `bar()` function. `baz()` and `qux()` will still need to be defined\\nin our implementation of `Foo`, but we can use `unimplemented!` in their definitions\\nto allow our code to compile.\\n\\nWe still want to have our program stop running if the unimplemented methods are\\nreached.\\n\\n```rust\\nstruct MyStruct;\\n\\nimpl Foo for MyStruct {\\n    fn bar(&self) -> u8 {\\n        1 + 1\\n    }\\n\\n    fn baz(&self) {\\n        // It makes no sense to `baz` a `MyStruct`, so we have no logic here\\n        // at all.\\n        // This will display \\\"thread 'main' panicked at 'not implemented'\\\".\\n        unimplemented!();\\n    }\\n\\n    fn qux(&self) -> Result<u64, ()> {\\n        // We have some logic here,\\n        // We can add a message to unimplemented! to display our omission.\\n        // This will display:\\n        // \\\"thread 'main' panicked at 'not implemented: MyStruct isn't quxable'\\\".\\n        unimplemented!(\\\"MyStruct isn't quxable\\\");\\n    }\\n}\\n\\nfn main() {\\n    let s = MyStruct;\\n    s.bar();\\n}\\n```\"},\"deprecated\":false,\"insertTextFormat\":2,\"sortText\":\"fffffffd\",\"detail\":\"#[macro_export] macro_rules! unimplemented\"},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							11,
							31,
							7
						],
						"trigger": "unimplemented!"
					},
					"AgAAABMEAAAAAAAAEwQAAAAAAAAHAAAAdW5pbXBsZRMEAAAAAAAAIwQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAaBAAAAAAAABoEAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					3,
					"right_delete",
					null,
					"AwAAAGwDAAAAAAAAbAMAAAAAAAABAAAAPGwDAAAAAAAAbAMAAAAAAAABAAAAVGwDAAAAAAAAbAMAAAAAAAABAAAAPg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsAwAAAAAAAGwDAAAAAAAAAAAAAAAA8L8"
				],
				[
					110,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAADACwAACiMhW2FsbG93KHVudXNlZF9pbXBvcnRzKV0KCnVzZSBzdGQ6OmZtdDsKCnVzZSB1bmluZGVudDo6ewogICAgdW5pbmRlbnQsCiAgICBVbmluZGVudCwKfTsKCnVzZSBjcmF0ZTo6X09iamVjdDsKdXNlIGNyYXRlOjp0eXBlX29mOwoKI1tkZXJpdmUoQ29weSldCiNbZGVyaXZlKENsb25lKV0KLy8vIEZsb2F0IHN0cnVjdCB0aGF0IGhhbmRsZXMgZjMyIGFuZCBmNjQKcHViIHN0cnVjdCBGbG9hdDxUOiBTaXplZD4gewogICAgLy8gdGhpcyBjYW4gYmUgZjMyIG9yIGY2NAogICAgX2Zsb2F0OiBULAp9CgoKaW1wbDxUPiBGbG9hdDxUPgp3aGVyZSBUOiBTaXplZAp7CiAgICAvLy8gY29uc3RydWN0b3IKICAgIC8vLyBjcmVhdGVzIGEgRmxvYXQgb2JqZWN0IGZyb20gYW55IGZsb2F0IChmMzIsIGY2NCkKICAgIHB1YiBmbiBuZXcoX2Zsb2F0OiBUKSAtPiBTZWxmIHsKICAgICAgICBGbG9hdCB7CiAgICAgICAgICAgIF9mbG9hdAogICAgICAgIH0KICAgIH0KfQoKaW1wbDxUPiBGcm9tPFQ+IGZvciBGbG9hdDxUPgp3aGVyZSBUOiBTaXplZAp7CiAgICBmbiBmcm9tKF9mbG9hdDogVCkgLT4gU2VsZiB7CiAgICAgICAgRmxvYXQgewogICAgICAgICAgICBfZmxvYXQsCiAgICAgICAgfQogICAgfQp9CgoKCmltcGwgRGVmYXVsdCBmb3IgRmxvYXQ8ZjMyPiB7CiAgICBmbiBkZWZhdWx0KCkgLT4gU2VsZiB7CiAgICAgICAgRmxvYXQgewogICAgICAgICAgICBfZmxvYXQ6IDAuMGYzMgogICAgICAgIH0KICAgIH0KfQoKaW1wbCBEZWZhdWx0IGZvciBGbG9hdDxmNjQ+IHsKICAgIGZuIGRlZmF1bHQoKSAtPiBTZWxmIHsKICAgICAgICBGbG9hdCB7CiAgICAgICAgICAgIF9mbG9hdDogMC4wZjY0CiAgICAgICAgfQogICAgfQp9CgoKaW1wbDxUPiBfT2JqZWN0IGZvciBGbG9hdDxUPgp3aGVyZSBUOiBTaXplZCArIGZtdDo6RGlzcGxheQp7CiAgICBmbiBfX3JlcHJfXygmc2VsZikgLT4gU3RyaW5nIHsKICAgICAgICBmb3JtYXQhKCJ7fSIsIHNlbGYuX2Zsb2F0KQogICAgfQoKICAgIGZuIF9fbGVuX18oJnNlbGYpIC0+IHVzaXplIHsKICAgICAgICB1bmltcGxlbWVudGVkISgpCiAgICB9CgogICAgZm4gX19zdHJfXygmc2VsZikgLT4gU3RyaW5nIHsKICAgICAgICBmb3JtYXQhKCJ7fSIsIHNlbGYuX2Zsb2F0KQogICAgfQp9CgoKCi8vLyBUIGNhbm5vdCBiZSBmb3JtYXR0ZWQgd2l0aCB0aGUgZGVmYXVsdCBmb3JtYXR0ZXIKLy8vIHRoYXRzIHdoeSB0aGVyZSBhcmUgaW1wbGVtZW50YXRpb25zIGZvciBldmVyeSBmbG9hdCBwb3NzaWJsZQppbXBsPFQ+IGZtdDo6RGlzcGxheSBmb3IgRmxvYXQ8VD4Kd2hlcmUgVDogU2l6ZWQgKyBmbXQ6OkRpc3BsYXkKewogICAgZm4gZm10KCZzZWxmLCBmb3JtYXR0ZXI6ICZtdXQgZm10OjpGb3JtYXR0ZXI8J18+KSAtPiBmbXQ6OlJlc3VsdCB7CiAgICAgICAgbGV0IF90eXBlID0gdHlwZV9vZigmc2VsZi5fZmxvYXQpOwogICAgICAgIGlmIGZvcm1hdHRlci5hbHRlcm5hdGUoKSB7CiAgICAgICAgICAgIHdyaXRlIShmb3JtYXR0ZXIsICJ7fSAtPiA8e30+Iiwgc2VsZi5fZmxvYXQsIF90eXBlKQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHdyaXRlIShmb3JtYXR0ZXIsICJ7fSIsIHNlbGYuX2Zsb2F0KQogICAgICAgIH0KICAgIH0KfQoKCi8vIGh0dHBzOi8vZG9jLnJ1c3QtbGFuZy5vcmcvc3RkL2ZtdC9zdHJ1Y3QuRm9ybWF0dGVyLmh0bWwKLy8gVE9ETyBtYWtlIHNvbWV0aGluZyBsaWtlIHJpY2ggaW5zcGVjdCB3aXRoIGNvbG9ycyBhbmQgc3R1ZmYKaW1wbDxUPiBmbXQ6OkRlYnVnIGZvciBGbG9hdDxUPgp3aGVyZQogICAgVDogU2l6ZWQgKyBmbXQ6OkRpc3BsYXksCnsKICAgIGZuIGZtdCgmc2VsZiwgZjogJm11dCBmbXQ6OkZvcm1hdHRlcjwnXz4pIC0+IGZtdDo6UmVzdWx0IHsKICAgICAgICAvLyBodHRwczovL2RvYy5ydXN0LWxhbmcub3JnL3N0ZC9mbXQvc3RydWN0LkZvcm1hdHRlci5odG1sI21ldGhvZC5hbHRlcm5hdGUKICAgICAgICBsZXQgX3R5cGUgPSB0eXBlX29mKCZzZWxmLl9mbG9hdCk7CgogICAgICAgIGlmIGYuYWx0ZXJuYXRlKCkgewogICAgICAgICAgICBsZXQgX2ZtdCA9IGZvcm1hdCEoCiAgICAgICAgICAgICAgICAiRmxvYXQ8e30+IHt7CiAgICAgICAgICAgICAgICBfZmxvYXQ6IHt9CiAgICAgICAgICAgIH19IiwKICAgICAgICAgICAgICAgIF90eXBlLCBzZWxmLl9mbG9hdAogICAgICAgICAgICApOwogICAgICAgICAgICBsZXQgX2ZtdCA9IF9mbXQudW5pbmRlbnQoKTsKICAgICAgICAgICAgd3JpdGUhKGYsICJ7fSIsIF9mbXQpCiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgd3JpdGUhKAogICAgICAgICAgICAgICAgZiwKICAgICAgICAgICAgICAgICJGbG9hdDx7fT4ge3sgX2Zsb2F0OiB7fSB9fSIsCiAgICAgICAgICAgICAgICBfdHlwZSwgc2VsZi5fZmxvYXQKICAgICAgICAgICAgKQogICAgICAgIH0KICAgIH0KfQoKLy8gaW1wbCBmbXQ6OkRlYnVnIGZvciBGbG9hdDxmNjQ+IHsKLy8gICAgIGZuIGZtdCgmc2VsZiwgZjogJm11dCBmbXQ6OkZvcm1hdHRlcjwnXz4pIC0+IGZtdDo6UmVzdWx0IHsKLy8gICAgICAgICAvLyBodHRwczovL2RvYy5ydXN0LWxhbmcub3JnL3N0ZC9mbXQvc3RydWN0LkZvcm1hdHRlci5odG1sI21ldGhvZC5hbHRlcm5hdGUKLy8gICAgICAgICBsZXQgX3R5cGUgPSAiZjY0IjsKCi8vICAgICAgICAgaWYgZi5hbHRlcm5hdGUoKSB7Ci8vICAgICAgICAgICAgIGxldCBfZm10ID0gZm9ybWF0ISgiRmxvYXQ8e30+IHt7Ci8vICAgICAgICAgICAgICAgICBfZmxvYXQ6IHt9Ci8vICAgICAgICAgICAgIH19IiwgX3R5cGUsIHNlbGYuX2Zsb2F0KTsKLy8gICAgICAgICAgICAgbGV0IF9mbXQgPSBfZm10LnVuaW5kZW50KCk7Ci8vICAgICAgICAgICAgIHdyaXRlIShmLCAgInt9IiwgX2ZtdCkKLy8gICAgICAgICB9IGVsc2UgewovLyAgICAgICAgICAgICB3cml0ZSEoZiwgIkZsb2F0PHt9PiB7eyBfZmxvYXQ6IHt9IH19IiwgX3R5cGUsIHNlbGYuX2Zsb2F0KQovLyAgICAgICAgIH0KLy8gICAgIH0KLy8gfQoAAAAAAAAAAMALAAAAAAAAAAAAAAAAAAAAAAAAwAsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB1BAAAAAAAAHUEAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					2,
					"left_delete",
					null,
					"AgAAAOYDAAAAAAAA5gMAAAAAAABBAAAACiAgICBmbiBfX2xlbl9fKCZzZWxmKSAtPiB1c2l6ZSB7CiAgICAgICAgdW5pbXBsZW1lbnRlZCEoKQogICAgfQrlAwAAAAAAAOUDAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAA5gMAAAAAAAAnBAAAAAAAAP///////+9/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAOUDAAAAAAAA5gMAAAAAAAAAAAAA5gMAAAAAAADqAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5QMAAAAAAADlAwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/string.rs",
			"redo_stack":
			[
				[
					13,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAPgEAAAAAAAA+AQAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAA+QQAAAAAAAD5BAAAAAAAAAAAAAAAAPC/"
				]
			],
			"settings":
			{
				"buffer_size": 1765,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					4,
					"cut",
					null,
					"BAAAABMFAAAAAAAAEwUAAAAAAAAhAAAAICAgIGZuIF9fbGVuX18oJnNlbGYpIC0+IHVzaXplIHsKEwUAAAAAAAATBQAAAAAAABsAAAAgICAgICAgIHNlbGYuX3N0cmluZy5sZW4oKQoTBQAAAAAAABMFAAAAAAAABgAAACAgICB9ChMFAAAAAAAAEwUAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAFwUAAAAAAAAXBQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/character.rs",
			"settings":
			{
				"buffer_size": 1491,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"cut",
					null,
					"AQAAAJgCAAAAAAAAmAIAAAAAAAAWAAAAd2hlcmUgVDogZm10OjpEaXNwbGF5Cg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtAgAAAAAAAK0CAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAAByBAAACnVzZSBzdGQ6OmZtdDsKCgp1c2UgY3JhdGU6Ol9PYmplY3Q7CgoKI1tkZXJpdmUoQ29weSwgQ2xvbmUpXQovLy8gQ2hhciBzdHJ1Y3QgdGhhdCBoYW5kbGVzIHJ1c3QgY2hhcgpwdWIgc3RydWN0IENoYXIgewogICAgX2NoYXI6IGNoYXIsCn0KCmltcGwgQ2hhciB7CiAgICAvLy8gY29uc3RydWN0b3IgY3JlYXRlcyBhIG5ldyBDaGFyIGZyb20gcnVzdCBjaGFyCiAgICAvLy8gbm90ZTogaXRzIG5vdCBsaWtlIGZyb20sIGJlY2F1c2UgZnJvbSBmdW5jdGlvbgogICAgLy8vIGNyZWF0ZXMgc29tZXRoaW5nIGZyb20gc29tZXRoaW5nIGRpZmZlcmVudCB0aGFuIHdoYXQgd2UgZ2V0CiAgICBwdWIgZm4gbmV3KF9jaGFyOiBjaGFyKSAtPiBTZWxmIHsKICAgICAgICBDaGFyIHsKICAgICAgICAgICAgX2NoYXIsCiAgICAgICAgfQogICAgfQp9CgppbXBsIEZyb208Y2hhcj4gZm9yIENoYXIgewogICAgZm4gZnJvbShfY2hhcjogY2hhcikgLT4gU2VsZiB7CiAgICAgICAgQ2hhciB7CiAgICAgICAgICAgIF9jaGFyLAogICAgICAgIH0KICAgIH0KfQoKaW1wbCBEZWZhdWx0IGZvciBDaGFyIHsKICAgIGZuIGRlZmF1bHQoKSAtPiBTZWxmIHsKICAgICAgICBDaGFyIHsKICAgICAgICAgICAgX2NoYXI6ICcwJwogICAgICAgIH0KICAgIH0KfQoKaW1wbCBfT2JqZWN0IGZvciBDaGFyCnsKICAgIGZuIF9fc3RyX18oJnNlbGYpIC0+IFN0cmluZyB7CiAgICAgICAgU3RyaW5nOjpmcm9tKHNlbGYuX2NoYXIpCiAgICB9CgogICAgZm4gX19yZXByX18oJnNlbGYpIC0+IFN0cmluZyB7CiAgICAgICAgZm9ybWF0ISgiJ3t9JyIsIHNlbGYuX2NoYXIpCiAgICB9CgogICAgZm4gX19sZW5fXygmc2VsZikgLT4gdXNpemUgewogICAgICAgIDgKICAgIH0KfQoKaW1wbCBmbXQ6OkRpc3BsYXkgZm9yIENoYXIgewogICAgZm4gZm10KCZzZWxmLCBmb3JtYXR0ZXI6ICZtdXQgZm10OjpGb3JtYXR0ZXI8J18+KSAtPiBmbXQ6OlJlc3VsdCB7CiAgICAgICAgaWYgZm9ybWF0dGVyLmFsdGVybmF0ZSgpIHsKICAgICAgICAgICAgd3JpdGUhKGZvcm1hdHRlciwgIid7fSciLCBzZWxmLl9jaGFyKQogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHdyaXRlIShmb3JtYXR0ZXIsICJ7fSIsIHNlbGYuX2NoYXIpCiAgICAgICAgfQogICAgfQp9CgAAAAAAAAAAcgQAAAAAAAAAAAAAAAAAAAAAAAByBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADjAgAAAAAAAOMCAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					2,
					"cut",
					null,
					"AgAAADIDAAAAAAAAMgMAAAAAAAAhAAAAICAgIGZuIF9fbGVuX18oJnNlbGYpIC0+IHVzaXplIHsKMgMAAAAAAAAyAwAAAAAAAAoAAAAgICAgICAgIDgK",
					"AQAAAAAAAAABAAAANgMAAAAAAAA2AwAAAAAAAAAAAAAAAEpA"
				],
				[
					13,
					2,
					"cut",
					null,
					"AgAAADEDAAAAAAAAMQMAAAAAAAABAAAACjEDAAAAAAAAMQMAAAAAAAAGAAAAICAgIH0K",
					"AQAAAAAAAAABAAAAMQMAAAAAAAAxAwAAAAAAAAAAAAAAAAAA"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "\n\nimpl"
					},
					"BgAAABQCAAAAAAAAFQIAAAAAAAAAAAAAFQIAAAAAAAAWAgAAAAAAAAAAAAAWAgAAAAAAABcCAAAAAAAAAAAAABcCAAAAAAAAGAIAAAAAAAAAAAAAGAIAAAAAAAAZAgAAAAAAAAAAAAAZAgAAAAAAABoCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAIAAAAAAAAUAgAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " from"
					},
					"BQAAABoCAAAAAAAAGwIAAAAAAAAAAAAAGwIAAAAAAAAcAgAAAAAAAAAAAAAcAgAAAAAAAB0CAAAAAAAAAAAAAB0CAAAAAAAAHgIAAAAAAAAAAAAAHgIAAAAAAAAfAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgIAAAAAAAAaAgAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAABsCAAAAAAAAGwIAAAAAAAAEAAAAZnJvbQ",
					"AQAAAAAAAAABAAAAHwIAAAAAAAAfAgAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "From<u8"
					},
					"BwAAABsCAAAAAAAAHAIAAAAAAAAAAAAAHAIAAAAAAAAdAgAAAAAAAAAAAAAdAgAAAAAAAB4CAAAAAAAAAAAAAB4CAAAAAAAAHwIAAAAAAAAAAAAAHwIAAAAAAAAgAgAAAAAAAAAAAAAgAgAAAAAAACECAAAAAAAAAAAAACECAAAAAAAAIgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGwIAAAAAAAAbAgAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAACICAAAAAAAAIwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIgIAAAAAAAAiAgAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAACMCAAAAAAAAJAIAAAAAAAAAAAAAJAIAAAAAAAAlAgAAAAAAAAAAAAAlAgAAAAAAACYCAAAAAAAAAAAAACYCAAAAAAAAJwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIwIAAAAAAAAjAgAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " Char"
					},
					"BQAAACcCAAAAAAAAKAIAAAAAAAAAAAAAKAIAAAAAAAApAgAAAAAAAAAAAAApAgAAAAAAACoCAAAAAAAAAAAAACoCAAAAAAAAKwIAAAAAAAAAAAAAKwIAAAAAAAAsAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwIAAAAAAAAnAgAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " P"
					},
					"AgAAACwCAAAAAAAALQIAAAAAAAAAAAAALQIAAAAAAAAuAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAIAAAAAAAAsAgAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAC4CAAAAAAAAMAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALgIAAAAAAAAuAgAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAC4CAAAAAAAALgIAAAAAAAABAAAAey4CAAAAAAAALgIAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAALwIAAAAAAAAvAgAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"left_delete",
					null,
					"AQAAAC0CAAAAAAAALQIAAAAAAAABAAAAUA",
					"AQAAAAAAAAABAAAALgIAAAAAAAAuAgAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAC0CAAAAAAAALwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQIAAAAAAAAtAgAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAC4CAAAAAAAALwIAAAAAAAAAAAAALwIAAAAAAAAwAgAAAAAAAAAAAAAvAgAAAAAAADMCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALgIAAAAAAAAuAgAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "fn"
					},
					"AgAAADMCAAAAAAAANAIAAAAAAAAAAAAANAIAAAAAAAA1AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwIAAAAAAAAzAgAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAADUCAAAAAAAANgIAAAAAAAAAAAAANgIAAAAAAAA3AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQIAAAAAAAA1AgAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"insertTextFormat\":2,\"filterText\":\"from\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"fn from(..)\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"fn from(_: u8) -> Self {\\n    $0\\n}\",\"range\":{\"end\":{\"character\":8,\"line\":33},\"start\":{\"character\":4,\"line\":33}}},\"documentation\":{\"value\":\"Performs the conversion.\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							26,
							39,
							2
						],
						"trigger": "from"
					},
					"AgAAADMCAAAAAAAAMwIAAAAAAAAEAAAAZm4gZjMCAAAAAAAAWgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwIAAAAAAAA3AgAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "c"
					},
					"AQAAADwCAAAAAAAAPQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAIAAAAAAAA8AgAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"left_delete",
					null,
					"AQAAADwCAAAAAAAAPAIAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAPQIAAAAAAAA9AgAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": "int"
					},
					"AwAAADwCAAAAAAAAPQIAAAAAAAAAAAAAPQIAAAAAAAA+AgAAAAAAAAAAAAA+AgAAAAAAAD8CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAIAAAAAAAA8AgAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "Char"
					},
					"BAAAAFcCAAAAAAAAWAIAAAAAAAAAAAAAWAIAAAAAAABZAgAAAAAAAAAAAABZAgAAAAAAAFoCAAAAAAAAAAAAAFoCAAAAAAAAWwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwIAAAAAAABXAgAAAAAAAAAAAAAAAGpA"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": " P"
					},
					"AgAAAFsCAAAAAAAAXAIAAAAAAAAAAAAAXAIAAAAAAABdAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWwIAAAAAAABbAgAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"left_delete",
					null,
					"AQAAAFwCAAAAAAAAXAIAAAAAAAABAAAAUA",
					"AQAAAAAAAAABAAAAXQIAAAAAAABdAgAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAFwCAAAAAAAAXgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAIAAAAAAABcAgAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAF0CAAAAAAAAXgIAAAAAAAAAAAAAXgIAAAAAAABmAgAAAAAAAAAAAABmAgAAAAAAAGcCAAAAAAAAAAAAAGcCAAAAAAAAbwIAAAAAAAAAAAAAXgIAAAAAAABeAgAAAAAAAAgAAAAgICAgICAgIF4CAAAAAAAAagIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQIAAAAAAABdAgAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "_char:"
					},
					"BgAAAGoCAAAAAAAAawIAAAAAAAAAAAAAawIAAAAAAABsAgAAAAAAAAAAAABsAgAAAAAAAG0CAAAAAAAAAAAAAG0CAAAAAAAAbgIAAAAAAAAAAAAAbgIAAAAAAABvAgAAAAAAAAAAAABvAgAAAAAAAHACAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagIAAAAAAABqAgAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": " _int"
					},
					"BQAAAHACAAAAAAAAcQIAAAAAAAAAAAAAcQIAAAAAAAByAgAAAAAAAAAAAAByAgAAAAAAAHMCAAAAAAAAAAAAAHMCAAAAAAAAdAIAAAAAAAAAAAAAdAIAAAAAAAB1AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAIAAAAAAABwAgAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": " as"
					},
					"AwAAAHUCAAAAAAAAdgIAAAAAAAAAAAAAdgIAAAAAAAB3AgAAAAAAAAAAAAB3AgAAAAAAAHgCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQIAAAAAAAB1AgAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": " char;"
					},
					"BgAAAHgCAAAAAAAAeQIAAAAAAAAAAAAAeQIAAAAAAAB6AgAAAAAAAAAAAAB6AgAAAAAAAHsCAAAAAAAAAAAAAHsCAAAAAAAAfAIAAAAAAAAAAAAAfAIAAAAAAAB9AgAAAAAAAAAAAAB9AgAAAAAAAH4CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAIAAAAAAAB4AgAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"left_delete",
					null,
					"AQAAAH0CAAAAAAAAfQIAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAfgIAAAAAAAB+AgAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAH0CAAAAAAAAfgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQIAAAAAAAB9AgAAAAAAAAAAAAAAMHlA"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAALsEAAAAAAAAvAQAAAAAAAAAAAAAvAQAAAAAAAC9BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuwQAAAAAAAC7BAAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"paste",
					null,
					"AQAAAL0EAAAAAAAAyAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvQQAAAAAAAC9BAAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "De"
					},
					"AwAAAMcEAAAAAAAAyAQAAAAAAAAAAAAAyAQAAAAAAADIBAAAAAAAAAcAAABEaXNwbGF5yAQAAAAAAADJBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwQAAAAAAADOBAAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"Debug\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"Debug\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"Debug\",\"range\":{\"end\":{\"character\":12,\"line\":69},\"start\":{\"character\":10,\"line\":69}}},\"documentation\":{\"value\":\"`?` formatting.\\n\\n`Debug` should format the output in a programmer-facing, debugging context.\\n\\nGenerally speaking, you should just `derive` a `Debug` implementation.\\n\\nWhen used with the alternate format specifier `#?`, the output is pretty-printed.\\n\\nFor more information on formatters, see [the module-level documentation][module].\\n\\n[module]: ../../std/fmt/index.html\\n\\nThis trait can be used with `#[derive]` if all fields implement `Debug`. When\\n`derive`d for structs, it will use the name of the `struct`, then `{`, then a\\ncomma-separated list of each field's name and `Debug` value, then `}`. For\\n`enum`s, it will use the name of the variant and, if applicable, `(`, then the\\n`Debug` values of the fields, then `)`.\\n\\n# Stability\\n\\nDerived `Debug` formats are not stable, and so may change with future Rust\\nversions. Additionally, `Debug` implementations of types provided by the\\nstandard library (`libstd`, `libcore`, `liballoc`, etc.) are not stable, and\\nmay also change with future Rust versions.\\n\\n# Examples\\n\\nDeriving an implementation:\\n\\n```rust\\n#[derive(Debug)]\\nstruct Point {\\n    x: i32,\\n    y: i32,\\n}\\n\\nlet origin = Point { x: 0, y: 0 };\\n\\nassert_eq!(format!(\\\"The origin is: {:?}\\\", origin), \\\"The origin is: Point { x: 0, y: 0 }\\\");\\n```\\n\\nManually implementing:\\n\\n```rust\\nuse std::fmt;\\n\\nstruct Point {\\n    x: i32,\\n    y: i32,\\n}\\n\\nimpl fmt::Debug for Point {\\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\\n        f.debug_struct(\\\"Point\\\")\\n         .field(\\\"x\\\", &self.x)\\n         .field(\\\"y\\\", &self.y)\\n         .finish()\\n    }\\n}\\n\\nlet origin = Point { x: 0, y: 0 };\\n\\nassert_eq!(format!(\\\"The origin is: {:?}\\\", origin), \\\"The origin is: Point { x: 0, y: 0 }\\\");\\n```\\n\\nThere are a number of helper methods on the [`Formatter`] struct to help you with manual\\nimplementations, such as [`debug_struct`].\\n\\n[`debug_struct`]: Formatter::debug_struct\\n\\nTypes that do not wish to use the standard suite of debug representations\\nprovided by the `Formatter` trait (`debug_struct`, `debug_tuple`,\\n`debut_list`, `debug_set`, `debug_map`) can do something totally custom by\\nmanually writing an arbitrary representation to the `Formatter`.\\n\\n```rust\\nimpl fmt::Debug for Point {\\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\\n        write!(f, \\\"Point [{} {}]\\\", self.x, self.y)\\n    }\\n}\\n```\\n\\n`Debug` implementations using either `derive` or the debug builder API\\non [`Formatter`] support pretty-printing using the alternate flag: `{:#?}`.\\n\\nPretty-printing with `#?`:\\n\\n```rust\\n#[derive(Debug)]\\nstruct Point {\\n    x: i32,\\n    y: i32,\\n}\\n\\nlet origin = Point { x: 0, y: 0 };\\n\\nassert_eq!(format!(\\\"The origin is: {:#?}\\\", origin),\\n\\\"The origin is: Point {\\n    x: 0,\\n    y: 0,\\n}\\\");\\n```\",\"kind\":\"markdown\"},\"kind\":8},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							61,
							95,
							3
						],
						"trigger": "Debug"
					},
					"AgAAAMcEAAAAAAAAxwQAAAAAAAACAAAARGXHBAAAAAAAAMwEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQQAAAAAAADJBAAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": "Char<"
					},
					"BQAAAGEFAAAAAAAAYgUAAAAAAAAAAAAAYgUAAAAAAABjBQAAAAAAAAAAAABjBQAAAAAAAGQFAAAAAAAAAAAAAGQFAAAAAAAAZQUAAAAAAAAAAAAAZQUAAAAAAABmBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQUAAAAAAABhBQAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAGoFAAAAAAAAawUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagUAAAAAAABqBQAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": "Char<"
					},
					"BQAAAKoFAAAAAAAAqwUAAAAAAAAAAAAAqwUAAAAAAACsBQAAAAAAAAAAAACsBQAAAAAAAK0FAAAAAAAAAAAAAK0FAAAAAAAArgUAAAAAAAAAAAAArgUAAAAAAACvBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqgUAAAAAAACqBQAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAALEFAAAAAAAAsgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQUAAAAAAACxBQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "examples/hashable.rs",
			"settings":
			{
				"buffer_size": 653,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\nmin"
					},
					"BQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAAIAAAAAAAAAAgAAAAAAAAADAAAAbWlu",
					"AQAAAAAAAAABAAAABQAAAAAAAAAFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": "main"
					},
					"BAAAAAIAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAAABgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert_completion",
					{
						"completion": "fn main() {\n\t${0:unimplemented!();}\n}",
						"format": "snippet",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "main"
					},
					"AgAAAAIAAAAAAAAAAgAAAAAAAAAEAAAAbWFpbgIAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgAAAAAAAAAGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "\nstruct"
					},
					"BwAAAAEAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAACAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAP///////+9/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " Valuie"
					},
					"BwAAAAgAAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAAsAAAAAAAAAAAAAAAsAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA4AAAAAAAAAAAAAAA4AAAAAAAAADwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACAAAAAAAAAAIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"left_delete",
					null,
					"AQAAAA4AAAAAAAAADgAAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAADwAAAAAAAAAPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAA4AAAAAAAAADwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADgAAAAAAAAAOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					2,
					"left_delete",
					null,
					"AgAAAA4AAAAAAAAADgAAAAAAAAABAAAAZQ0AAAAAAAAADQAAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAADwAAAAAAAAAPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAA0AAAAAAAAADgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQAAAAAAAAANAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA4AAAAAAAAADwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADgAAAAAAAAAOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAA8AAAAAAAAAEQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADwAAAAAAAAAPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAABAAAAAAAAAAEQAAAAAAAAAAAAAAEQAAAAAAAAASAAAAAAAAAAAAAAARAAAAAAAAABUAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "_value:"
					},
					"BwAAABUAAAAAAAAAFgAAAAAAAAAAAAAAFgAAAAAAAAAXAAAAAAAAAAAAAAAXAAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAGQAAAAAAAAAAAAAAGQAAAAAAAAAaAAAAAAAAAAAAAAAaAAAAAAAAABsAAAAAAAAAAAAAABsAAAAAAAAAHAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQAAAAAAAAAVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " i32"
					},
					"BAAAABwAAAAAAAAAHQAAAAAAAAAAAAAAHQAAAAAAAAAeAAAAAAAAAAAAAAAeAAAAAAAAAB8AAAAAAAAAAAAAAB8AAAAAAAAAIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHAAAAAAAAAAcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAACIAAAAAAAAAIwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIgAAAAAAAAAiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					3,
					"delete_word",
					{
						"forward": false
					},
					"AwAAAEEAAAAAAAAAQQAAAAAAAAAEAAAAISgpOzQAAAAAAAAANAAAAAAAAAANAAAAdW5pbXBsZW1lbnRlZDAAAAAAAAAAMAAAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAARQAAAAAAAABFAAAAAAAAAP///////+9/"
				],
				[
					43,
					1,
					"reindent",
					null,
					"AQAAADAAAAAAAAAANAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAAAAAAAAAAwAAAAAAAAAAAAAAAAAAAA"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAADQAAAAAAAAANQAAAAAAAAAAAAAANQAAAAAAAAA2AAAAAAAAAAAAAAA2AAAAAAAAADcAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAAAAAAAAAA0AAAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"insert",
					{
						"characters": " val"
					},
					"BAAAADcAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA5AAAAAAAAAAAAAAA5AAAAAAAAADoAAAAAAAAAAAAAADoAAAAAAAAAOwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwAAAAAAAAA3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAADsAAAAAAAAAPAAAAAAAAAAAAAAAPAAAAAAAAAA9AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwAAAAAAAAA7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " Val"
					},
					"BAAAAD0AAAAAAAAAPgAAAAAAAAAAAAAAPgAAAAAAAAA/AAAAAAAAAAAAAAA/AAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAQQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQAAAAAAAAA9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"VaListImpl\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"VaListImpl (use std::ffi::VaListImpl)\",\"data\":{\"imports\":[{\"full_import_path\":\"std::ffi::VaListImpl\",\"imported_name\":\"VaListImpl\"}],\"position\":{\"position\":{\"character\":17,\"line\":7},\"textDocument\":{\"uri\":\"file:///home/alexzander/Alexzander__/programming/rust/python/examples/hashable.rs\"}}},\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"VaListImpl\",\"range\":{\"end\":{\"character\":17,\"line\":7},\"start\":{\"character\":14,\"line\":7}}},\"documentation\":{\"value\":\"x86_64 ABI implementation of a `va_list`.\",\"kind\":\"markdown\"},\"kind\":22},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							36,
							47,
							4
						],
						"trigger": "VaListImpl"
					},
					"AgAAAD4AAAAAAAAAPgAAAAAAAAADAAAAVmFsPgAAAAAAAABIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQAAAAAAAABBAAAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAD4AAAAAAAAAPgAAAAAAAAAKAAAAVmFMaXN0SW1wbA",
					"AQAAAAAAAAABAAAASAAAAAAAAABIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "Val"
					},
					"AwAAAD4AAAAAAAAAPwAAAAAAAAAAAAAAPwAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAEEAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPgAAAAAAAAA+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"Values\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"Values (use std::collections::btree_map::Values)\",\"data\":{\"imports\":[{\"full_import_path\":\"std::collections::btree_map::Values\",\"imported_name\":\"Values\"}],\"position\":{\"position\":{\"character\":17,\"line\":7},\"textDocument\":{\"uri\":\"file:///home/alexzander/Alexzander__/programming/rust/python/examples/hashable.rs\"}}},\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"Values\",\"range\":{\"end\":{\"character\":17,\"line\":7},\"start\":{\"character\":14,\"line\":7}}},\"documentation\":{\"value\":\"An iterator over the values of a `BTreeMap`.\\n\\nThis `struct` is created by the [`values`] method on [`BTreeMap`]. See its\\ndocumentation for more.\\n\\n[`values`]: BTreeMap::values\",\"kind\":\"markdown\"},\"kind\":22},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							39,
							51,
							3
						],
						"trigger": "Values"
					},
					"AgAAAD4AAAAAAAAAPgAAAAAAAAADAAAAVmFsPgAAAAAAAABEAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQAAAAAAAABBAAAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAD4AAAAAAAAAPgAAAAAAAAAGAAAAVmFsdWVz",
					"AQAAAAAAAAABAAAARAAAAAAAAABEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "Value"
					},
					"BQAAAD4AAAAAAAAAPwAAAAAAAAAAAAAAPwAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAEEAAAAAAAAAAAAAAEEAAAAAAAAAQgAAAAAAAAAAAAAAQgAAAAAAAABDAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPgAAAAAAAAA+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEMAAAAAAAAARAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwAAAAAAAABDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAEQAAAAAAAAARgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAAAAAAAAABEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": " _va"
					},
					"BAAAAEUAAAAAAAAARgAAAAAAAAAAAAAARgAAAAAAAABHAAAAAAAAAAAAAABHAAAAAAAAAEgAAAAAAAAAAAAAAEgAAAAAAAAASQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQAAAAAAAABFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_value\",\"preselect\":true,\"detail\":\"i32\",\"sortText\":\"fffffffa\",\"label\":\"_value\",\"additionalTextEdits\":[],\"deprecated\":false,\"textEdit\":{\"newText\":\"_value\",\"range\":{\"end\":{\"character\":25,\"line\":7},\"start\":{\"character\":22,\"line\":7}}},\"kind\":5},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							45,
							59,
							4
						],
						"trigger": "_value"
					},
					"AgAAAEYAAAAAAAAARgAAAAAAAAADAAAAX3ZhRgAAAAAAAABMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASQAAAAAAAABJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAEwAAAAAAAAATQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAAAAAAAAABMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": " 123"
					},
					"BAAAAE0AAAAAAAAATgAAAAAAAAAAAAAATgAAAAAAAABPAAAAAAAAAAAAAABPAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAUQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQAAAAAAAABNAAAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFEAAAAAAAAAUgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQAAAAAAAABRAAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFMAAAAAAAAAVAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwAAAAAAAABTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFQAAAAAAAAAVQAAAAAAAAAAAAAAVQAAAAAAAABZAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVAAAAAAAAABUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "Hash"
					},
					"BAAAAFkAAAAAAAAAWgAAAAAAAAAAAAAAWgAAAAAAAABbAAAAAAAAAAAAAABbAAAAAAAAAFwAAAAAAAAAAAAAAFwAAAAAAAAAXQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQAAAAAAAABZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "#"
					},
					"AQAAAAEAAAAAAAAAAgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAFpA"
				],
				[
					74,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAAIAAAAAAAAABAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "de"
					},
					"AgAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"derive\",\"additionalTextEdits\":[],\"detail\":\"pub macro derive\",\"sortText\":\"fffffffd\",\"label\":\"derive\",\"deprecated\":false,\"textEdit\":{\"newText\":\"derive\",\"range\":{\"end\":{\"character\":4,\"line\":1},\"start\":{\"character\":2,\"line\":1}}},\"documentation\":{\"value\":\"Attribute macro used to apply derive macros.\\n\\nSee [the reference] for more info.\\n\\n[the reference]: ../../../reference/attributes/derive.html\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							57,
							75,
							2
						],
						"trigger": "derive"
					},
					"AgAAAAMAAAAAAAAAAwAAAAAAAAACAAAAZGUDAAAAAAAAAAkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQAAAAAAAAAFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAkAAAAAAAAACwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQAAAAAAAAAJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": "H"
					},
					"AQAAAAoAAAAAAAAACwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACgAAAAAAAAAKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"Hash\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"Hash\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"Hash\",\"range\":{\"end\":{\"character\":10,\"line\":1},\"start\":{\"character\":9,\"line\":1}}},\"documentation\":{\"value\":\"Derive macro generating an impl of the trait `Hash`.\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							60,
							78,
							1
						],
						"trigger": "Hash"
					},
					"AgAAAAoAAAAAAAAACgAAAAAAAAABAAAASAoAAAAAAAAADgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACwAAAAAAAAALAAAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIGVA"
				],
				[
					93,
					1,
					"cut",
					null,
					"AQAAAGYAAAAAAAAAZgAAAAAAAAAJAAAAICAgIEhhc2gK",
					"AQAAAAAAAAABAAAAbgAAAAAAAABuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "\njas"
					},
					"BQAAAGUAAAAAAAAAZgAAAAAAAAAAAAAAZgAAAAAAAABqAAAAAAAAAAAAAABqAAAAAAAAAGsAAAAAAAAAAAAAAGsAAAAAAAAAbAAAAAAAAAAAAAAAbAAAAAAAAABtAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQAAAAAAAABlAAAAAAAAAP///////+9/"
				],
				[
					99,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAGoAAAAAAAAAagAAAAAAAAADAAAAamFz",
					"AQAAAAAAAAABAAAAbQAAAAAAAABtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "hash"
					},
					"BAAAAGoAAAAAAAAAawAAAAAAAAAAAAAAawAAAAAAAABsAAAAAAAAAAAAAABsAAAAAAAAAG0AAAAAAAAAAAAAAG0AAAAAAAAAbgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagAAAAAAAABqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"command\":{\"command\":\"editor.action.triggerParameterHints\",\"title\":\"triggerParameterHints\"},\"filterText\":\"hash\",\"deprecated\":false,\"data\":{\"imports\":[{\"full_import_path\":\"std::ptr::hash\",\"imported_name\":\"hash\"}],\"position\":{\"position\":{\"character\":8,\"line\":10},\"textDocument\":{\"uri\":\"file:///home/alexzander/Alexzander__/programming/rust/python/examples/hashable.rs\"}}},\"documentation\":{\"value\":\"Hash a raw pointer.\\n\\nThis can be used to hash a `&T` reference (which coerces to `*const T` implicitly)\\nby its address rather than the value it points to\\n(which is what the `Hash for &T` implementation does).\\n\\n# Examples\\n\\n```rust\\nuse std::collections::hash_map::DefaultHasher;\\nuse std::hash::{Hash, Hasher};\\nuse std::ptr;\\n\\nlet five = 5;\\nlet five_ref = &five;\\n\\nlet mut hasher = DefaultHasher::new();\\nptr::hash(five_ref, &mut hasher);\\nlet actual = hasher.finish();\\n\\nlet mut hasher = DefaultHasher::new();\\n(five_ref as *const i32).hash(&mut hasher);\\nlet expected = hasher.finish();\\n\\nassert_eq!(actual, expected);\\n```\",\"kind\":\"markdown\"},\"kind\":3,\"insertTextFormat\":2,\"additionalTextEdits\":[],\"detail\":\"fn(*const T, &mut S)\",\"textEdit\":{\"newText\":\"hash(${1:hashee}, ${2:into})$0\",\"range\":{\"end\":{\"character\":8,\"line\":10},\"start\":{\"character\":4,\"line\":10}}},\"label\":\"hash(â€¦) (use std::ptr::hash)\",\"sortText\":\"fffffffd\"},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							71,
							100,
							4
						],
						"trigger": "hash"
					},
					"AgAAAGoAAAAAAAAAagAAAAAAAAAEAAAAaGFzaGoAAAAAAAAAfAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgAAAAAAAABuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							[
								[
									0,
									0
								],
								[
									0,
									0
								],
								"use std::ptr::hash;",
								null
							],
							[
								[
									0,
									0
								],
								[
									0,
									0
								],
								"\n\n",
								null
							]
						]
					},
					"AgAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAATAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwAAAAAAAAB1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"cut",
					null,
					"AQAAAIQAAAAAAAAAhAAAAAAAAAAGAAAAaGFzaGVl",
					"AQAAAAAAAAABAAAAhAAAAAAAAACKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"cut",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAUAAAAdXNlIHN0ZDo6cHRyOjpoYXNoOwo",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQF1A"
				],
				[
					110,
					1,
					"cut",
					null,
					"AQAAAGcAAAAAAAAAZwAAAAAAAAARAAAAICAgIGhhc2goLCBpbnRvKQo",
					"AQAAAAAAAAABAAAAZwAAAAAAAABnAAAAAAAAAAAAAAAAAAAA"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGYAAAAAAAAAZwAAAAAAAAAAAAAAZwAAAAAAAABrAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgAAAAAAAABmAAAAAAAAAP///////+9/"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "Hashj"
					},
					"BQAAAGsAAAAAAAAAbAAAAAAAAAAAAAAAbAAAAAAAAABtAAAAAAAAAAAAAABtAAAAAAAAAG4AAAAAAAAAAAAAAG4AAAAAAAAAbwAAAAAAAAAAAAAAbwAAAAAAAABwAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawAAAAAAAABrAAAAAAAAAAAAAAAAAEpA"
				],
				[
					125,
					1,
					"left_delete",
					null,
					"AQAAAG8AAAAAAAAAbwAAAAAAAAABAAAAag",
					"AQAAAAAAAAABAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "Map"
					},
					"AwAAAG8AAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAABxAAAAAAAAAAAAAABxAAAAAAAAAHIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwAAAAAAAABvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"HashMap\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"HashMap (use std::collections::HashMap)\",\"data\":{\"imports\":[{\"full_import_path\":\"std::collections::HashMap\",\"imported_name\":\"HashMap\"}],\"position\":{\"position\":{\"character\":11,\"line\":11},\"textDocument\":{\"uri\":\"file:///home/alexzander/Alexzander__/programming/rust/python/examples/hashable.rs\"}}},\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"HashMap\",\"range\":{\"end\":{\"character\":11,\"line\":11},\"start\":{\"character\":4,\"line\":11}}},\"documentation\":{\"value\":\"A [hash map] implemented with quadratic probing and SIMD lookup.\\n\\nBy default, `HashMap` uses a hashing algorithm selected to provide\\nresistance against HashDoS attacks. The algorithm is randomly seeded, and a\\nreasonable best-effort is made to generate this seed from a high quality,\\nsecure source of randomness provided by the host without blocking the\\nprogram. Because of this, the randomness of the seed depends on the output\\nquality of the system's random number generator when the seed is created.\\nIn particular, seeds generated when the system's entropy pool is abnormally\\nlow such as during system boot may be of a lower quality.\\n\\nThe default hashing algorithm is currently SipHash 1-3, though this is\\nsubject to change at any point in the future. While its performance is very\\ncompetitive for medium sized keys, other hashing algorithms will outperform\\nit for small keys such as integers as well as large keys such as long\\nstrings, though those algorithms will typically *not* protect against\\nattacks such as HashDoS.\\n\\nThe hashing algorithm can be replaced on a per-`HashMap` basis using the\\n[`default`], [`with_hasher`], and [`with_capacity_and_hasher`] methods.\\nThere are many alternative [hashing algorithms available on crates.io].\\n\\nIt is required that the keys implement the [`Eq`] and [`Hash`] traits, although\\nthis can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`.\\nIf you implement these yourself, it is important that the following\\nproperty holds:\\n\\n```text\\nk1 == k2 -> hash(k1) == hash(k2)\\n```\\n\\nIn other words, if two keys are equal, their hashes must be equal.\\n\\nIt is a logic error for a key to be modified in such a way that the key's\\nhash, as determined by the [`Hash`] trait, or its equality, as determined by\\nthe [`Eq`] trait, changes while it is in the map. This is normally only\\npossible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\\nThe behavior resulting from such a logic error is not specified, but will\\nnot result in undefined behavior. This could include panics, incorrect results,\\naborts, memory leaks, and non-termination.\\n\\nThe hash table implementation is a Rust port of Google's [SwissTable].\\nThe original C++ version of SwissTable can be found [here], and this\\n[CppCon talk] gives an overview of how the algorithm works.\\n\\n[hash map]: crate::collections#use-a-hashmap-when\\n[hashing algorithms available on crates.io]: https://crates.io/keywords/hasher\\n[SwissTable]: https://abseil.io/blog/20180927-swisstables\\n[here]: https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h\\n[CppCon talk]: https://www.youtube.com/watch?v=ncHmEUmJZf4\\n\\n# Examples\\n\\n```rust\\nuse std::collections::HashMap;\\n\\n// Type inference lets us omit an explicit type signature (which\\n// would be `HashMap<String, String>` in this example).\\nlet mut book_reviews = HashMap::new();\\n\\n// Review some books.\\nbook_reviews.insert(\\n    \\\"Adventures of Huckleberry Finn\\\".to_string(),\\n    \\\"My favorite book.\\\".to_string(),\\n);\\nbook_reviews.insert(\\n    \\\"Grimms' Fairy Tales\\\".to_string(),\\n    \\\"Masterpiece.\\\".to_string(),\\n);\\nbook_reviews.insert(\\n    \\\"Pride and Prejudice\\\".to_string(),\\n    \\\"Very enjoyable.\\\".to_string(),\\n);\\nbook_reviews.insert(\\n    \\\"The Adventures of Sherlock Holmes\\\".to_string(),\\n    \\\"Eye lyked it alot.\\\".to_string(),\\n);\\n\\n// Check for a specific one.\\n// When collections store owned values (String), they can still be\\n// queried using references (&str).\\nif !book_reviews.contains_key(\\\"Les MisÃ©rables\\\") {\\n    println!(\\\"We've got {} reviews, but Les MisÃ©rables ain't one.\\\",\\n             book_reviews.len());\\n}\\n\\n// oops, this review has a lot of spelling mistakes, let's delete it.\\nbook_reviews.remove(\\\"The Adventures of Sherlock Holmes\\\");\\n\\n// Look up the values associated with some keys.\\nlet to_find = [\\\"Pride and Prejudice\\\", \\\"Alice's Adventure in Wonderland\\\"];\\nfor &book in &to_find {\\n    match book_reviews.get(book) {\\n        Some(review) => println!(\\\"{}: {}\\\", book, review),\\n        None => println!(\\\"{} is unreviewed.\\\", book)\\n    }\\n}\\n\\n// Look up the value for a key (will panic if the key is not found).\\nprintln!(\\\"Review for Jane: {}\\\", book_reviews[\\\"Pride and Prejudice\\\"]);\\n\\n// Iterate over everything.\\nfor (book, review) in &book_reviews {\\n    println!(\\\"{}: \\\\\\\"{}\\\\\\\"\\\", book, review);\\n}\\n```\\n\\nA `HashMap` with a known list of items can be initialized from an array:\\n\\n```rust\\nuse std::collections::HashMap;\\n\\nlet solar_distance = HashMap::from([\\n    (\\\"Mercury\\\", 0.4),\\n    (\\\"Venus\\\", 0.7),\\n    (\\\"Earth\\\", 1.0),\\n    (\\\"Mars\\\", 1.5),\\n]);\\n```\\n\\n`HashMap` implements an [`Entry API`](#method.entry), which allows\\nfor complex methods of getting, setting, updating and removing keys and\\ntheir values:\\n\\n```rust\\nuse std::collections::HashMap;\\n\\n// type inference lets us omit an explicit type signature (which\\n// would be `HashMap<&str, u8>` in this example).\\nlet mut player_stats = HashMap::new();\\n\\nfn random_stat_buff() -> u8 {\\n    // could actually return some random value here - let's just return\\n    // some fixed value for now\\n    42\\n}\\n\\n// insert a key only if it doesn't already exist\\nplayer_stats.entry(\\\"health\\\").or_insert(100);\\n\\n// insert a key using a function that provides a new value only if it\\n// doesn't already exist\\nplayer_stats.entry(\\\"defence\\\").or_insert_with(random_stat_buff);\\n\\n// update a key, guarding against the key possibly not being set\\nlet stat = player_stats.entry(\\\"attack\\\").or_insert(100);\\n*stat += random_stat_buff();\\n```\\n\\nThe easiest way to use `HashMap` with a custom key type is to derive [`Eq`] and [`Hash`].\\nWe must also derive [`PartialEq`].\\n\\n[`RefCell`]: crate::cell::RefCell\\n[`Cell`]: crate::cell::Cell\\n[`default`]: Default::default\\n[`with_hasher`]: Self::with_hasher\\n[`with_capacity_and_hasher`]: Self::with_capacity_and_hasher\\n\\n```rust\\nuse std::collections::HashMap;\\n\\n#[derive(Hash, Eq, PartialEq, Debug)]\\nstruct Viking {\\n    name: String,\\n    country: String,\\n}\\n\\nimpl Viking {\\n    /// Creates a new Viking.\\n    fn new(name: &str, country: &str) -> Viking {\\n        Viking { name: name.to_string(), country: country.to_string() }\\n    }\\n}\\n\\n// Use a HashMap to store the vikings' health points.\\nlet vikings = HashMap::from([\\n    (Viking::new(\\\"Einar\\\", \\\"Norway\\\"), 25),\\n    (Viking::new(\\\"Olaf\\\", \\\"Denmark\\\"), 24),\\n    (Viking::new(\\\"Harald\\\", \\\"Iceland\\\"), 12),\\n]);\\n\\n// Use derived implementation to print the status of the vikings.\\nfor (viking, health) in &vikings {\\n    println!(\\\"{:?} has {} hp\\\", viking, health);\\n}\\n```\",\"kind\":\"markdown\"},\"kind\":22},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							91,
							126,
							3
						],
						"trigger": "HashMap"
					},
					"AgAAAGsAAAAAAAAAawAAAAAAAAAHAAAASGFzaE1hcGsAAAAAAAAAcgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgAAAAAAAAByAAAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							[
								[
									0,
									0
								],
								[
									0,
									0
								],
								"use std::collections::HashMap;",
								null
							],
							[
								[
									0,
									0
								],
								[
									0,
									0
								],
								"\n\n",
								null
							]
						]
					},
					"AgAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAeAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgAAAAAAAAByAAAAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					4,
					"swap_line_down",
					null,
					"CAAAACAAAAAAAAAAPwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8AAAB1c2Ugc3RkOjpjb2xsZWN0aW9uczo6SGFzaE1hcDsKIQAAAAAAAABAAAAAAAAAAAAAAAABAAAAAAAAAAEAAAAAAAAAHwAAAHVzZSBzdGQ6OmNvbGxlY3Rpb25zOjpIYXNoTWFwOwoiAAAAAAAAAEEAAAAAAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAAfAAAAdXNlIHN0ZDo6Y29sbGVjdGlvbnM6Okhhc2hNYXA7CiMAAAAAAAAAQgAAAAAAAAAAAAAAAwAAAAAAAAADAAAAAAAAAB8AAAB1c2Ugc3RkOjpjb2xsZWN0aW9uczo6SGFzaE1hcDsK",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4GFA"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": "::new"
					},
					"BQAAAJIAAAAAAAAAkwAAAAAAAAAAAAAAkwAAAAAAAACUAAAAAAAAAAAAAACUAAAAAAAAAJUAAAAAAAAAAAAAAJUAAAAAAAAAlgAAAAAAAAAAAAAAlgAAAAAAAACXAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgAAAAAAAACSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJcAAAAAAAAAmQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwAAAAAAAACXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAIsAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACNAAAAAAAAAAAAAACNAAAAAAAAAI4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwAAAAAAAACLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					1,
					"insert",
					{
						"characters": " _dict"
					},
					"BgAAAI4AAAAAAAAAjwAAAAAAAAAAAAAAjwAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAJEAAAAAAAAAAAAAAJEAAAAAAAAAkgAAAAAAAAAAAAAAkgAAAAAAAACTAAAAAAAAAAAAAACTAAAAAAAAAJQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgAAAAAAAACOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAJQAAAAAAAAAlQAAAAAAAAAAAAAAlQAAAAAAAACWAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAAAAAAAAACUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"left_delete",
					null,
					"AQAAAJUAAAAAAAAAlQAAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAlgAAAAAAAACWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJUAAAAAAAAAlgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQAAAAAAAACVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					1,
					"left_delete",
					null,
					"AQAAAJUAAAAAAAAAlQAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAlgAAAAAAAACWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAJUAAAAAAAAAlgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQAAAAAAAACVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"left_delete",
					null,
					"AQAAAJUAAAAAAAAAlQAAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAlgAAAAAAAACWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJUAAAAAAAAAlgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQAAAAAAAACVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					155,
					2,
					"left_delete",
					null,
					"AgAAAJUAAAAAAAAAlQAAAAAAAAABAAAAIJQAAAAAAAAAlAAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAlgAAAAAAAACWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAJQAAAAAAAAAlQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAAAAAAAAACUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": " HashMAp"
					},
					"CAAAAJUAAAAAAAAAlgAAAAAAAAAAAAAAlgAAAAAAAACXAAAAAAAAAAAAAACXAAAAAAAAAJgAAAAAAAAAAAAAAJgAAAAAAAAAmQAAAAAAAAAAAAAAmQAAAAAAAACaAAAAAAAAAAAAAACaAAAAAAAAAJsAAAAAAAAAAAAAAJsAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACdAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQAAAAAAAACVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					3,
					"left_delete",
					null,
					"AwAAAJwAAAAAAAAAnAAAAAAAAAABAAAAcJsAAAAAAAAAmwAAAAAAAAABAAAAQZoAAAAAAAAAmgAAAAAAAAABAAAATQ",
					"AQAAAAAAAAABAAAAnQAAAAAAAACdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "Map<"
					},
					"BAAAAJoAAAAAAAAAmwAAAAAAAAAAAAAAmwAAAAAAAACcAAAAAAAAAAAAAACcAAAAAAAAAJ0AAAAAAAAAAAAAAJ0AAAAAAAAAngAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgAAAAAAAACaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": " Val"
					},
					"BAAAAJ4AAAAAAAAAnwAAAAAAAAAAAAAAnwAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAAKEAAAAAAAAAAAAAAKEAAAAAAAAAogAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAngAAAAAAAACeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					4,
					"left_delete",
					null,
					"BAAAAKEAAAAAAAAAoQAAAAAAAAABAAAAbKAAAAAAAAAAoAAAAAAAAAABAAAAYZ8AAAAAAAAAnwAAAAAAAAABAAAAVp4AAAAAAAAAngAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAogAAAAAAAACiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": "Value,"
					},
					"BgAAAJ4AAAAAAAAAnwAAAAAAAAAAAAAAnwAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAAKEAAAAAAAAAAAAAAKEAAAAAAAAAogAAAAAAAAAAAAAAogAAAAAAAACjAAAAAAAAAAAAAACjAAAAAAAAAKQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAngAAAAAAAACeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					163,
					1,
					"insert",
					{
						"characters": " Value<"
					},
					"BwAAAKQAAAAAAAAApQAAAAAAAAAAAAAApQAAAAAAAACmAAAAAAAAAAAAAACmAAAAAAAAAKcAAAAAAAAAAAAAAKcAAAAAAAAAqAAAAAAAAAAAAAAAqAAAAAAAAACpAAAAAAAAAAAAAACpAAAAAAAAAKoAAAAAAAAAAAAAAKoAAAAAAAAAqwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAAAAAAAAACkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKsAAAAAAAAArAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqwAAAAAAAACrAAAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					2,
					"left_delete",
					null,
					"AgAAAKsAAAAAAAAAqwAAAAAAAAABAAAAIKoAAAAAAAAAqgAAAAAAAAABAAAAPA",
					"AQAAAAAAAAABAAAArAAAAAAAAACsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAKoAAAAAAAAAqwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqgAAAAAAAACqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAKsAAAAAAAAArAAAAAAAAAAAAAAArAAAAAAAAACtAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqwAAAAAAAACrAAAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK0AAAAAAAAArgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQAAAAAAAACtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALwAAAAAAAAAvQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvAAAAAAAAAC8AAAAAAAAAP///////+9/"
				],
				[
					186,
					1,
					"insert",
					{
						"characters": "\n_dic"
					},
					"BgAAAL0AAAAAAAAAvgAAAAAAAAAAAAAAvgAAAAAAAADCAAAAAAAAAAAAAADCAAAAAAAAAMMAAAAAAAAAAAAAAMMAAAAAAAAAxAAAAAAAAAAAAAAAxAAAAAAAAADFAAAAAAAAAAAAAADFAAAAAAAAAMYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvQAAAAAAAAC9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					187,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_dict\",\"preselect\":true,\"detail\":\"HashMap<Value, Value, RandomState>\",\"sortText\":\"fffffffc\",\"label\":\"_dict\",\"additionalTextEdits\":[],\"deprecated\":false,\"textEdit\":{\"newText\":\"_dict\",\"range\":{\"end\":{\"character\":8,\"line\":14},\"start\":{\"character\":4,\"line\":14}}},\"kind\":6},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							137,
							186,
							6
						],
						"trigger": "_dict"
					},
					"AgAAAMIAAAAAAAAAwgAAAAAAAAAEAAAAX2RpY8IAAAAAAAAAxwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgAAAAAAAADGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"insert",
					{
						"characters": ".inser"
					},
					"BgAAAMcAAAAAAAAAyAAAAAAAAAAAAAAAyAAAAAAAAADJAAAAAAAAAAAAAADJAAAAAAAAAMoAAAAAAAAAAAAAAMoAAAAAAAAAywAAAAAAAAAAAAAAywAAAAAAAADMAAAAAAAAAAAAAADMAAAAAAAAAM0AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwAAAAAAAADHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					189,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"command\":{\"command\":\"editor.action.triggerParameterHints\",\"title\":\"triggerParameterHints\"},\"insertTextFormat\":2,\"filterText\":\"insert\",\"additionalTextEdits\":[],\"detail\":\"fn(&mut self, K, V) -> Option<V>\",\"sortText\":\"fffffffd\",\"label\":\"insert(â€¦)\",\"deprecated\":false,\"textEdit\":{\"newText\":\"insert(${1:k}, ${2:v})$0\",\"range\":{\"end\":{\"character\":15,\"line\":14},\"start\":{\"character\":10,\"line\":14}}},\"documentation\":{\"value\":\"Inserts a key-value pair into the map.\\n\\nIf the map did not have this key present, [`None`] is returned.\\n\\nIf the map did have this key present, the value is updated, and the old\\nvalue is returned. The key is not updated, though; this matters for\\ntypes that can be `==` without being identical. See the [module-level\\ndocumentation] for more.\\n\\n[module-level documentation]: crate::collections#insert-and-complex-keys\\n\\n# Examples\\n\\n```rust\\nuse std::collections::HashMap;\\n\\nlet mut map = HashMap::new();\\nassert_eq!(map.insert(37, \\\"a\\\"), None);\\nassert_eq!(map.is_empty(), false);\\n\\nmap.insert(37, \\\"b\\\");\\nassert_eq!(map.insert(37, \\\"c\\\"), Some(\\\"b\\\"));\\nassert_eq!(map[&37], \\\"c\\\");\\n```\",\"kind\":\"markdown\"},\"kind\":2},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							139,
							188,
							6
						],
						"trigger": "insert"
					},
					"AgAAAMgAAAAAAAAAyAAAAAAAAAAFAAAAaW5zZXLIAAAAAAAAANQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQAAAAAAAADNAAAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"left_delete",
					null,
					"AQAAAM8AAAAAAAAAzwAAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAA0AAAAAAAAADQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					193,
					1,
					"insert",
					{
						"characters": "val"
					},
					"AwAAAM8AAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADRAAAAAAAAAAAAAADRAAAAAAAAANIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzwAAAAAAAADPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					195,
					1,
					"left_delete",
					null,
					"AQAAANQAAAAAAAAA1AAAAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAA1QAAAAAAAADVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					196,
					1,
					"insert",
					{
						"characters": "val"
					},
					"AwAAANQAAAAAAAAA1QAAAAAAAAAAAAAA1QAAAAAAAADWAAAAAAAAAAAAAADWAAAAAAAAANcAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1AAAAAAAAADUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					198,
					1,
					"duplicate_line",
					null,
					"AQAAAIcAAAAAAAAArAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewAAAAAAAAB7AAAAAAAAAAAAAAAAUHRA"
				],
				[
					201,
					3,
					"right_delete",
					null,
					"AwAAAKUAAAAAAAAApQAAAAAAAAABAAAAMaUAAAAAAAAApQAAAAAAAAABAAAAMqUAAAAAAAAApQAAAAAAAAABAAAAMw",
					"AQAAAAAAAAABAAAApQAAAAAAAAClAAAAAAAAAAAAAAAAAPC/"
				],
				[
					202,
					1,
					"insert",
					{
						"characters": "5990"
					},
					"BAAAAKUAAAAAAAAApgAAAAAAAAAAAAAApgAAAAAAAACnAAAAAAAAAAAAAACnAAAAAAAAAKgAAAAAAAAAAAAAAKgAAAAAAAAAqQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQAAAAAAAAClAAAAAAAAAAAAAAAAAPC/"
				],
				[
					206,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAG0AAAAAAAAAbgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQAAAAAAAABtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					209,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAJMAAAAAAAAAlAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwAAAAAAAACTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					215,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAAPoAAAAAAAAA+wAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+gAAAAAAAAD6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAAABAAAAAAAAAQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAPC/"
				],
				[
					222,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAIBAAAAAAAAAwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgEAAAAAAAACAQAAAAAAAP///////+9/"
				],
				[
					229,
					1,
					"insert",
					{
						"characters": "\nprint"
					},
					"BwAAAAMBAAAAAAAABAEAAAAAAAAAAAAABAEAAAAAAAAIAQAAAAAAAAAAAAAIAQAAAAAAAAkBAAAAAAAAAAAAAAkBAAAAAAAACgEAAAAAAAAAAAAACgEAAAAAAAALAQAAAAAAAAAAAAALAQAAAAAAAAwBAAAAAAAAAAAAAAwBAAAAAAAADQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwEAAAAAAAADAQAAAAAAAAAAAAAAkHdA"
				],
				[
					233,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"insertTextFormat\":2,\"filterText\":\"println!\",\"additionalTextEdits\":[],\"detail\":\"#[macro_export] macro_rules! println\",\"sortText\":\"fffffffd\",\"label\":\"println!(â€¦)\",\"deprecated\":false,\"textEdit\":{\"newText\":\"println!($0)\",\"range\":{\"end\":{\"character\":9,\"line\":16},\"start\":{\"character\":4,\"line\":16}}},\"documentation\":{\"value\":\"Prints to the standard output, with a newline.\\n\\nOn all platforms, the newline is the LINE FEED character (`\\\\n`/`U+000A`) alone\\n(no additional CARRIAGE RETURN (`\\\\r`/`U+000D`)).\\n\\nUse the [`format!`] syntax to write data to the standard output.\\nSee [`std::fmt`] for more information.\\n\\nUse `println!` only for the primary output of your program. Use\\n[`eprintln!`] instead to print error and progress messages.\\n\\n[`std::fmt`]: crate::fmt\\n\\n# Panics\\n\\nPanics if writing to [`io::stdout`] fails.\\n\\n[`io::stdout`]: crate::io::stdout\\n\\n# Examples\\n\\n```rust\\nprintln!(); // prints just a newline\\nprintln!(\\\"hello there!\\\");\\nprintln!(\\\"format {} arguments\\\", \\\"some\\\");\\n```\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							175,
							229,
							7
						],
						"trigger": "println!"
					},
					"AgAAAAgBAAAAAAAACAEAAAAAAAAFAAAAcHJpbnQIAQAAAAAAABIBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQEAAAAAAAANAQAAAAAAAAAAAAAAAPC/"
				],
				[
					234,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAABEBAAAAAAAAEwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQEAAAAAAAARAQAAAAAAAAAAAAAAAPC/"
				],
				[
					235,
					1,
					"insert",
					{
						"characters": "{}"
					},
					"AgAAABIBAAAAAAAAEwEAAAAAAAAAAAAAEwEAAAAAAAAUAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEgEAAAAAAAASAQAAAAAAAAAAAAAAAPC/"
				],
				[
					238,
					1,
					"insert",
					{
						"characters": ":?"
					},
					"AgAAABMBAAAAAAAAFAEAAAAAAAAAAAAAFAEAAAAAAAAVAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwEAAAAAAAATAQAAAAAAAAAAAAAAAPC/"
				],
				[
					240,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAABcBAAAAAAAAGAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFwEAAAAAAAAXAQAAAAAAAAAAAAAAAPC/"
				],
				[
					241,
					1,
					"insert",
					{
						"characters": " _dict"
					},
					"BgAAABgBAAAAAAAAGQEAAAAAAAAAAAAAGQEAAAAAAAAaAQAAAAAAAAAAAAAaAQAAAAAAABsBAAAAAAAAAAAAABsBAAAAAAAAHAEAAAAAAAAAAAAAHAEAAAAAAAAdAQAAAAAAAAAAAAAdAQAAAAAAAB4BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGAEAAAAAAAAYAQAAAAAAAAAAAAAAAPC/"
				],
				[
					243,
					1,
					"insert",
					{
						"characters": "l;"
					},
					"AgAAAB8BAAAAAAAAIAEAAAAAAAAAAAAAIAEAAAAAAAAhAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwEAAAAAAAAfAQAAAAAAAAAAAAAAAPC/"
				],
				[
					248,
					2,
					"left_delete",
					null,
					"AgAAACABAAAAAAAAIAEAAAAAAAABAAAAOx8BAAAAAAAAHwEAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAAIQEAAAAAAAAhAQAAAAAAAAAAAAAAAPC/"
				],
				[
					249,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAB8BAAAAAAAAIAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwEAAAAAAAAfAQAAAAAAAAAAAAAAAPC/"
				],
				[
					258,
					1,
					"insert",
					{
						"characters": "\n#p"
					},
					"AwAAADMAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA1AAAAAAAAAAAAAAA1AAAAAAAAADYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwAAAAAAAAAzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					259,
					1,
					"left_delete",
					null,
					"AQAAADUAAAAAAAAANQAAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAANgAAAAAAAAA2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					260,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAADUAAAAAAAAANwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQAAAAAAAAA1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					261,
					1,
					"insert",
					{
						"characters": "der"
					},
					"AwAAADYAAAAAAAAANwAAAAAAAAAAAAAANwAAAAAAAAA4AAAAAAAAAAAAAAA4AAAAAAAAADkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANgAAAAAAAAA2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					262,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"derive\",\"additionalTextEdits\":[],\"detail\":\"pub macro derive\",\"sortText\":\"fffffffd\",\"label\":\"derive\",\"deprecated\":false,\"textEdit\":{\"newText\":\"derive\",\"range\":{\"end\":{\"character\":5,\"line\":7},\"start\":{\"character\":2,\"line\":7}}},\"documentation\":{\"value\":\"Attribute macro used to apply derive macros.\\n\\nSee [the reference] for more info.\\n\\n[the reference]: ../../../reference/attributes/derive.html\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							194,
							261,
							3
						],
						"trigger": "derive"
					},
					"AgAAADYAAAAAAAAANgAAAAAAAAADAAAAZGVyNgAAAAAAAAA8AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQAAAAAAAAA5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					263,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADwAAAAAAAAAPgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAAAAAAAAAA8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					264,
					1,
					"insert",
					{
						"characters": "Eq"
					},
					"AgAAAD0AAAAAAAAAPgAAAAAAAAAAAAAAPgAAAAAAAAA/AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQAAAAAAAAA9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					279,
					1,
					"duplicate_line",
					null,
					"AQAAAEIAAAAAAAAAUAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQAAAAAAAABBAAAAAAAAAAAAAAAAAPC/"
				],
				[
					281,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAEsAAAAAAAAASwAAAAAAAAACAAAARXE",
					"AQAAAAAAAAABAAAATQAAAAAAAABNAAAAAAAAAAAAAAAAAPC/"
				],
				[
					282,
					1,
					"insert",
					{
						"characters": "Par"
					},
					"AwAAAEsAAAAAAAAATAAAAAAAAAAAAAAATAAAAAAAAABNAAAAAAAAAAAAAABNAAAAAAAAAE4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwAAAAAAAABLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					283,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"PartialEq\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"PartialEq\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"PartialEq\",\"range\":{\"end\":{\"character\":12,\"line\":8},\"start\":{\"character\":9,\"line\":8}}},\"documentation\":{\"value\":\"Derive macro generating an impl of the trait `PartialEq`.\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							207,
							282,
							3
						],
						"trigger": "PartialEq"
					},
					"AgAAAEsAAAAAAAAASwAAAAAAAAADAAAAUGFySwAAAAAAAABUAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATgAAAAAAAABOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					296,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAHcAAAAAAAAAeAAAAAAAAAAAAAAAeAAAAAAAAAB5AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwAAAAAAAAB3AAAAAAAAAAAAAAAAQG1A"
				],
				[
					297,
					1,
					"insert",
					{
						"characters": "impl"
					},
					"BAAAAHkAAAAAAAAAegAAAAAAAAAAAAAAegAAAAAAAAB7AAAAAAAAAAAAAAB7AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAfQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQAAAAAAAAB5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					298,
					1,
					"insert",
					{
						"characters": " std::ftm::"
					},
					"CwAAAH0AAAAAAAAAfgAAAAAAAAAAAAAAfgAAAAAAAAB/AAAAAAAAAAAAAAB/AAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAgQAAAAAAAAAAAAAAgQAAAAAAAACCAAAAAAAAAAAAAACCAAAAAAAAAIMAAAAAAAAAAAAAAIMAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACFAAAAAAAAAAAAAACFAAAAAAAAAIYAAAAAAAAAAAAAAIYAAAAAAAAAhwAAAAAAAAAAAAAAhwAAAAAAAACIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQAAAAAAAAB9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					299,
					4,
					"left_delete",
					null,
					"BAAAAIcAAAAAAAAAhwAAAAAAAAABAAAAOoYAAAAAAAAAhgAAAAAAAAABAAAAOoUAAAAAAAAAhQAAAAAAAAABAAAAbYQAAAAAAAAAhAAAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAiAAAAAAAAACIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					300,
					1,
					"insert",
					{
						"characters": "mt::de"
					},
					"BgAAAIQAAAAAAAAAhQAAAAAAAAAAAAAAhQAAAAAAAACGAAAAAAAAAAAAAACGAAAAAAAAAIcAAAAAAAAAAAAAAIcAAAAAAAAAiAAAAAAAAAAAAAAAiAAAAAAAAACJAAAAAAAAAAAAAACJAAAAAAAAAIoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAAAAAAAAACEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					301,
					2,
					"left_delete",
					null,
					"AgAAAIkAAAAAAAAAiQAAAAAAAAABAAAAZYgAAAAAAAAAiAAAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAAigAAAAAAAACKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					302,
					1,
					"insert",
					{
						"characters": "Debyu"
					},
					"BQAAAIgAAAAAAAAAiQAAAAAAAAAAAAAAiQAAAAAAAACKAAAAAAAAAAAAAACKAAAAAAAAAIsAAAAAAAAAAAAAAIsAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACNAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAAAAAAAAACIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					303,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAAI0AAAAAAAAAkQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQAAAAAAAACNAAAAAAAAAAAAAAAAAPC/"
				],
				[
					304,
					6,
					"left_delete",
					null,
					"BgAAAJAAAAAAAAAAkAAAAAAAAAABAAAAII8AAAAAAAAAjwAAAAAAAAABAAAAII4AAAAAAAAAjgAAAAAAAAABAAAAII0AAAAAAAAAjQAAAAAAAAABAAAAIIwAAAAAAAAAjAAAAAAAAAABAAAAdYsAAAAAAAAAiwAAAAAAAAABAAAAeQ",
					"AQAAAAAAAAABAAAAkQAAAAAAAACRAAAAAAAAAAAAAAAAAPC/"
				],
				[
					305,
					1,
					"insert",
					{
						"characters": "ug"
					},
					"AgAAAIsAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACNAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwAAAAAAAACLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					306,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAI0AAAAAAAAAjgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQAAAAAAAACNAAAAAAAAAAAAAAAAAPC/"
				],
				[
					509,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"insertTextFormat\":2,\"filterText\":\"where\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"where\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"where\",\"range\":{\"end\":{\"character\":21,\"line\":13},\"start\":{\"character\":21,\"line\":13}}},\"kind\":14},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": true,
						"query_change_id":
						[
							225,
							306,
							1
						],
						"trigger": "where"
					},
					"AQAAAI4AAAAAAAAAkwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgAAAAAAAACOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					510,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAI4AAAAAAAAAjgAAAAAAAAAFAAAAd2hlcmU",
					"AQAAAAAAAAABAAAAkwAAAAAAAACTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					511,
					1,
					"insert",
					{
						"characters": "for"
					},
					"AwAAAI4AAAAAAAAAjwAAAAAAAAAAAAAAjwAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAJEAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgAAAAAAAACOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					512,
					1,
					"insert",
					{
						"characters": " Value"
					},
					"BgAAAJEAAAAAAAAAkgAAAAAAAAAAAAAAkgAAAAAAAACTAAAAAAAAAAAAAACTAAAAAAAAAJQAAAAAAAAAAAAAAJQAAAAAAAAAlQAAAAAAAAAAAAAAlQAAAAAAAACWAAAAAAAAAAAAAACWAAAAAAAAAJcAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkQAAAAAAAACRAAAAAAAAAAAAAAAAAPC/"
				],
				[
					513,
					1,
					"insert",
					{
						"characters": " P"
					},
					"AgAAAJcAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACZAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwAAAAAAAACXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					514,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJkAAAAAAAAAmwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQAAAAAAAACZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					515,
					2,
					"left_delete",
					null,
					"AgAAAJkAAAAAAAAAmQAAAAAAAAABAAAAe5gAAAAAAAAAmAAAAAAAAAABAAAAUA",
					"AQAAAAAAAAABAAAAmgAAAAAAAACaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					516,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJgAAAAAAAAAmgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAAAAAAAAACYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					517,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAJkAAAAAAAAAmgAAAAAAAAAAAAAAmgAAAAAAAACbAAAAAAAAAAAAAACaAAAAAAAAAJ4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQAAAAAAAACZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					519,
					1,
					"left_delete",
					null,
					"AgAAAKAAAAAAAAAAoAAAAAAAAAABAAAAfZoAAAAAAAAAmgAAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAoQAAAAAAAAChAAAAAAAAAAAAAAAAAEpA"
				],
				[
					521,
					1,
					"reindent",
					null,
					"AQAAAJoAAAAAAAAAngAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgAAAAAAAACaAAAAAAAAAAAAAAAAACpA"
				],
				[
					522,
					1,
					"insert",
					{
						"characters": "fn"
					},
					"AgAAAJ4AAAAAAAAAnwAAAAAAAAAAAAAAnwAAAAAAAACgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAngAAAAAAAACeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					523,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKAAAAAAAAAAoQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAAAAAAAAACgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					524,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"insertTextFormat\":2,\"filterText\":\"fmt\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"fn fmt(..)\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\\n    $0\\n}\",\"range\":{\"end\":{\"character\":7,\"line\":14},\"start\":{\"character\":4,\"line\":14}}},\"documentation\":{\"value\":\"Formats the value using the given formatter.\\n\\n# Examples\\n\\n```rust\\nuse std::fmt;\\n\\nstruct Position {\\n    longitude: f32,\\n    latitude: f32,\\n}\\n\\nimpl fmt::Debug for Position {\\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\\n        f.debug_tuple(\\\"\\\")\\n         .field(&self.longitude)\\n         .field(&self.latitude)\\n         .finish()\\n    }\\n}\\n\\nlet position = Position { longitude: 1.987, latitude: 2.983 };\\nassert_eq!(format!(\\\"{:?}\\\", position), \\\"(1.987, 2.983)\\\");\\n\\nassert_eq!(format!(\\\"{:#?}\\\", position), \\\"(\\n    1.987,\\n    2.983,\\n)\\\");\\n```\",\"kind\":\"markdown\"},\"kind\":2},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": true,
						"query_change_id":
						[
							240,
							523,
							1
						],
						"trigger": "fmt"
					},
					"AgAAAJ4AAAAAAAAAngAAAAAAAAADAAAAZm4gngAAAAAAAADxAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoQAAAAAAAAChAAAAAAAAAAAAAAAAAPC/"
				],
				[
					536,
					1,
					"insert",
					{
						"characters": "write"
					},
					"BQAAAOsAAAAAAAAA7AAAAAAAAAAAAAAA7AAAAAAAAADtAAAAAAAAAAAAAADtAAAAAAAAAO4AAAAAAAAAAAAAAO4AAAAAAAAA7wAAAAAAAAAAAAAA7wAAAAAAAADwAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6wAAAAAAAADrAAAAAAAAAAAAAAAAAPC/"
				],
				[
					540,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"insertTextFormat\":2,\"filterText\":\"write!\",\"additionalTextEdits\":[],\"detail\":\"#[macro_export] macro_rules! write\",\"sortText\":\"fffffffd\",\"label\":\"write!(â€¦)\",\"deprecated\":false,\"textEdit\":{\"newText\":\"write!($0)\",\"range\":{\"end\":{\"character\":13,\"line\":15},\"start\":{\"character\":8,\"line\":15}}},\"documentation\":{\"value\":\"Writes formatted data into a buffer.\\n\\nThis macro accepts a 'writer', a format string, and a list of arguments. Arguments will be\\nformatted according to the specified format string and the result will be passed to the writer.\\nThe writer may be any value with a `write_fmt` method; generally this comes from an\\nimplementation of either the [`fmt::Write`] or the [`io::Write`] trait. The macro\\nreturns whatever the `write_fmt` method returns; commonly a [`fmt::Result`], or an\\n[`io::Result`].\\n\\nSee [`std::fmt`] for more information on the format string syntax.\\n\\n[`std::fmt`]: ../std/fmt/index.html\\n[`fmt::Write`]: crate::fmt::Write\\n[`io::Write`]: ../std/io/trait.Write.html\\n[`fmt::Result`]: crate::fmt::Result\\n[`io::Result`]: ../std/io/type.Result.html\\n\\n# Examples\\n\\n```rust\\nuse std::io::Write;\\n\\nfn main() -> std::io::Result<()> {\\n    let mut w = Vec::new();\\n    write!(&mut w, \\\"test\\\")?;\\n    write!(&mut w, \\\"formatted {}\\\", \\\"arguments\\\")?;\\n\\n    assert_eq!(w, b\\\"testformatted arguments\\\");\\n    Ok(())\\n}\\n```\\n\\nA module can import both `std::fmt::Write` and `std::io::Write` and call `write!` on objects\\nimplementing either, as objects do not typically implement both. However, the module must\\nimport the traits qualified so their names do not conflict:\\n\\n```rust\\nuse std::fmt::Write as FmtWrite;\\nuse std::io::Write as IoWrite;\\n\\nfn main() -> Result<(), Box<dyn std::error::Error>> {\\n    let mut s = String::new();\\n    let mut v = Vec::new();\\n\\n    write!(&mut s, \\\"{} {}\\\", \\\"abc\\\", 123)?; // uses fmt::Write::write_fmt\\n    write!(&mut v, \\\"s = {:?}\\\", s)?; // uses io::Write::write_fmt\\n    assert_eq!(v, b\\\"s = \\\\\\\"abc 123\\\\\\\"\\\");\\n    Ok(())\\n}\\n```\\n\\nNote: This macro can be used in `no_std` setups as well.\\nIn a `no_std` setup you are responsible for the implementation details of the components.\\n\\n```rust\\nuse core::fmt::Write;\\n\\nstruct Example;\\n\\nimpl Write for Example {\\n    fn write_str(&mut self, _s: &str) -> core::fmt::Result {\\n         unimplemented!();\\n    }\\n}\\n\\nlet mut m = Example{};\\nwrite!(&mut m, \\\"Hello World\\\").expect(\\\"Not written\\\");\\n```\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							246,
							536,
							5
						],
						"trigger": "write!"
					},
					"AgAAAOsAAAAAAAAA6wAAAAAAAAAFAAAAd3JpdGXrAAAAAAAAAPMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8AAAAAAAAADwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					541,
					1,
					"insert",
					{
						"characters": "f,"
					},
					"AgAAAPIAAAAAAAAA8wAAAAAAAAAAAAAA8wAAAAAAAAD0AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8gAAAAAAAADyAAAAAAAAAAAAAAAAAPC/"
				],
				[
					542,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPQAAAAAAAAA9QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9AAAAAAAAAD0AAAAAAAAAAAAAAAAAPC/"
				],
				[
					543,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAPUAAAAAAAAA9wAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9QAAAAAAAAD1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					544,
					1,
					"insert",
					{
						"characters": "{}"
					},
					"AgAAAPYAAAAAAAAA9wAAAAAAAAAAAAAA9wAAAAAAAAD4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9gAAAAAAAAD2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					546,
					1,
					"insert",
					{
						"characters": ":?"
					},
					"AgAAAPcAAAAAAAAA+AAAAAAAAAAAAAAA+AAAAAAAAAD5AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9wAAAAAAAAD3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					548,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPsAAAAAAAAA/AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+wAAAAAAAAD7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					549,
					1,
					"insert",
					{
						"characters": " self._va"
					},
					"CQAAAPwAAAAAAAAA/QAAAAAAAAAAAAAA/QAAAAAAAAD+AAAAAAAAAAAAAAD+AAAAAAAAAP8AAAAAAAAAAAAAAP8AAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAABAQAAAAAAAAAAAAABAQAAAAAAAAIBAAAAAAAAAAAAAAIBAAAAAAAAAwEAAAAAAAAAAAAAAwEAAAAAAAAEAQAAAAAAAAAAAAAEAQAAAAAAAAUBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/AAAAAAAAAD8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					550,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_value\",\"additionalTextEdits\":[],\"detail\":\"i32\",\"deprecated\":false,\"label\":\"_value\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"_value\",\"range\":{\"end\":{\"character\":34,\"line\":15},\"start\":{\"character\":31,\"line\":15}}},\"kind\":5},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							256,
							549,
							9
						],
						"trigger": "_value"
					},
					"AgAAAAIBAAAAAAAAAgEAAAAAAAADAAAAX3ZhAgEAAAAAAAAIAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQEAAAAAAAAFAQAAAAAAAAAAAAAAAPC/"
				],
				[
					567,
					1,
					"insert",
					{
						"characters": "mut"
					},
					"AwAAAHQBAAAAAAAAdQEAAAAAAAAAAAAAdQEAAAAAAAB2AQAAAAAAAAAAAAB2AQAAAAAAAHcBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAEAAAAAAAB0AQAAAAAAAAAAAAAAAPC/"
				],
				[
					568,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHcBAAAAAAAAeAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwEAAAAAAAB3AQAAAAAAAAAAAAAAAPC/"
				],
				[
					623,
					1,
					"insert",
					{
						"characters": "i32"
					},
					"BAAAAI4BAAAAAAAAjwEAAAAAAAAAAAAAjwEAAAAAAACPAQAAAAAAAAUAAABWYWx1ZY8BAAAAAAAAkAEAAAAAAAAAAAAAkAEAAAAAAACRAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgEAAAAAAACTAQAAAAAAAAAAAAAAAPC/"
				],
				[
					627,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAALwBAAAAAAAAvAEAAAAAAAAEAAAAdmFsMg",
					"AQAAAAAAAAABAAAAwAEAAAAAAADAAQAAAAAAAAAAAAAAAPC/"
				],
				[
					628,
					1,
					"insert",
					{
						"characters": "123123"
					},
					"BgAAALwBAAAAAAAAvQEAAAAAAAAAAAAAvQEAAAAAAAC+AQAAAAAAAAAAAAC+AQAAAAAAAL8BAAAAAAAAAAAAAL8BAAAAAAAAwAEAAAAAAAAAAAAAwAEAAAAAAADBAQAAAAAAAAAAAADBAQAAAAAAAMIBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvAEAAAAAAAC8AQAAAAAAAAAAAAAAAPC/"
				],
				[
					647,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							[
								[
									9,
									7
								],
								[
									9,
									12
								],
								"Key",
								430
							],
							[
								[
									13,
									25
								],
								[
									13,
									30
								],
								"Key",
								430
							],
							[
								[
									20,
									15
								],
								[
									20,
									20
								],
								"Key",
								430
							],
							[
								[
									21,
									15
								],
								[
									21,
									20
								],
								"Key",
								430
							],
							[
								[
									22,
									27
								],
								[
									22,
									32
								],
								"Key",
								430
							]
						]
					},
					"BQAAAIcBAAAAAAAAigEAAAAAAAAFAAAAVmFsdWVUAQAAAAAAAFcBAAAAAAAABQAAAFZhbHVlLgEAAAAAAAAxAQAAAAAAAAUAAABWYWx1ZZIAAAAAAAAAlQAAAAAAAAAFAAAAVmFsdWVeAAAAAAAAAGEAAAAAAAAABQAAAFZhbHVl",
					"AQAAAAAAAAABAAAAYAAAAAAAAABgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					654,
					1,
					"insert",
					{
						"characters": "\n\nstruct"
					},
					"CAAAAA0BAAAAAAAADgEAAAAAAAAAAAAADgEAAAAAAAAPAQAAAAAAAAAAAAAPAQAAAAAAABABAAAAAAAAAAAAABABAAAAAAAAEQEAAAAAAAAAAAAAEQEAAAAAAAASAQAAAAAAAAAAAAASAQAAAAAAABMBAAAAAAAAAAAAABMBAAAAAAAAFAEAAAAAAAAAAAAAFAEAAAAAAAAVAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQEAAAAAAAANAQAAAAAAAAAAAAAAAPC/"
				],
				[
					655,
					1,
					"insert",
					{
						"characters": " Value"
					},
					"BgAAABUBAAAAAAAAFgEAAAAAAAAAAAAAFgEAAAAAAAAXAQAAAAAAAAAAAAAXAQAAAAAAABgBAAAAAAAAAAAAABgBAAAAAAAAGQEAAAAAAAAAAAAAGQEAAAAAAAAaAQAAAAAAAAAAAAAaAQAAAAAAABsBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQEAAAAAAAAVAQAAAAAAAAAAAAAAAPC/"
				],
				[
					656,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABsBAAAAAAAAHAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGwEAAAAAAAAbAQAAAAAAAAAAAAAAAPC/"
				],
				[
					657,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAABwBAAAAAAAAHgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHAEAAAAAAAAcAQAAAAAAAAAAAAAAAPC/"
				],
				[
					658,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAB0BAAAAAAAAHgEAAAAAAAAAAAAAHgEAAAAAAAAfAQAAAAAAAAAAAAAeAQAAAAAAACIBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHQEAAAAAAAAdAQAAAAAAAAAAAAAAAPC/"
				],
				[
					663,
					1,
					"trim_trailing_white_space",
					null,
					"AQAAAB4BAAAAAAAAHgEAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAagAAAAAAAABqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					668,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							[
								[
									10,
									4
								],
								[
									10,
									10
								],
								"_key",
								455
							],
							[
								[
									15,
									31
								],
								[
									15,
									37
								],
								"_key",
								455
							],
							[
								[
									24,
									21
								],
								[
									24,
									27
								],
								"_key",
								455
							],
							[
								[
									25,
									21
								],
								[
									25,
									27
								],
								"_key",
								455
							]
						]
					},
					"BAAAAGcBAAAAAAAAawEAAAAAAAAGAAAAX3ZhbHVlQwEAAAAAAABHAQAAAAAAAAYAAABfdmFsdWX+AAAAAAAAAAIBAAAAAAAABgAAAF92YWx1ZWgAAAAAAAAAbAAAAAAAAAAGAAAAX3ZhbHVl",
					"AQAAAAAAAAABAAAAagAAAAAAAABqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					671,
					1,
					"reindent",
					null,
					"AQAAABoBAAAAAAAAHgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgEAAAAAAAAaAQAAAAAAAAAAAAAAAPC/"
				],
				[
					672,
					1,
					"insert",
					{
						"characters": "_valeu:"
					},
					"BwAAAB4BAAAAAAAAHwEAAAAAAAAAAAAAHwEAAAAAAAAgAQAAAAAAAAAAAAAgAQAAAAAAACEBAAAAAAAAAAAAACEBAAAAAAAAIgEAAAAAAAAAAAAAIgEAAAAAAAAjAQAAAAAAAAAAAAAjAQAAAAAAACQBAAAAAAAAAAAAACQBAAAAAAAAJQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgEAAAAAAAAeAQAAAAAAAAAAAAAAAPC/"
				],
				[
					673,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACUBAAAAAAAAJgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQEAAAAAAAAlAQAAAAAAAAAAAAAAAPC/"
				],
				[
					674,
					4,
					"left_delete",
					null,
					"BAAAACUBAAAAAAAAJQEAAAAAAAABAAAAICQBAAAAAAAAJAEAAAAAAAABAAAAOiMBAAAAAAAAIwEAAAAAAAABAAAAdSIBAAAAAAAAIgEAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAJgEAAAAAAAAmAQAAAAAAAAAAAAAAAPC/"
				],
				[
					675,
					1,
					"insert",
					{
						"characters": "ue:"
					},
					"AwAAACIBAAAAAAAAIwEAAAAAAAAAAAAAIwEAAAAAAAAkAQAAAAAAAAAAAAAkAQAAAAAAACUBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIgEAAAAAAAAiAQAAAAAAAAAAAAAAAPC/"
				],
				[
					676,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACUBAAAAAAAAJgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQEAAAAAAAAlAQAAAAAAAAAAAAAAAPC/"
				],
				[
					677,
					2,
					"left_delete",
					null,
					"AgAAACUBAAAAAAAAJQEAAAAAAAABAAAAICQBAAAAAAAAJAEAAAAAAAABAAAAOg",
					"AQAAAAAAAAABAAAAJgEAAAAAAAAmAQAAAAAAAAAAAAAAAPC/"
				],
				[
					678,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAACQBAAAAAAAAJQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAEAAAAAAAAkAQAAAAAAAAAAAAAAAPC/"
				],
				[
					679,
					1,
					"insert",
					{
						"characters": " i323"
					},
					"BQAAACUBAAAAAAAAJgEAAAAAAAAAAAAAJgEAAAAAAAAnAQAAAAAAAAAAAAAnAQAAAAAAACgBAAAAAAAAAAAAACgBAAAAAAAAKQEAAAAAAAAAAAAAKQEAAAAAAAAqAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQEAAAAAAAAlAQAAAAAAAAAAAAAAAPC/"
				],
				[
					683,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAACYBAAAAAAAAJgEAAAAAAAAEAAAAaTMyMw",
					"AQAAAAAAAAABAAAAKgEAAAAAAAAqAQAAAAAAAAAAAAAAAGpA"
				],
				[
					684,
					1,
					"insert",
					{
						"characters": "i32"
					},
					"AwAAACYBAAAAAAAAJwEAAAAAAAAAAAAAJwEAAAAAAAAoAQAAAAAAAAAAAAAoAQAAAAAAACkBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJgEAAAAAAAAmAQAAAAAAAAAAAAAAAPC/"
				],
				[
					691,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAACsBAAAAAAAALAEAAAAAAAAAAAAALAEAAAAAAAAtAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwEAAAAAAAArAQAAAAAAAAAAAAAAAPC/"
				],
				[
					692,
					1,
					"paste",
					null,
					"AQAAAC0BAAAAAAAAwQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQEAAAAAAAAtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					697,
					1,
					"insert",
					{
						"characters": "Value"
					},
					"BgAAAEYBAAAAAAAARwEAAAAAAAAAAAAARwEAAAAAAABHAQAAAAAAAAMAAABLZXlHAQAAAAAAAEgBAAAAAAAAAAAAAEgBAAAAAAAASQEAAAAAAAAAAAAASQEAAAAAAABKAQAAAAAAAAAAAABKAQAAAAAAAEsBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARgEAAAAAAABJAQAAAAAAAAAAAAAAAPC/"
				],
				[
					700,
					1,
					"delete_word",
					{
						"forward": true
					},
					"AQAAALYBAAAAAAAAtgEAAAAAAAAEAAAAX2tleQ",
					"AQAAAAAAAAABAAAAtgEAAAAAAAC2AQAAAAAAAAAAAAAAAPC/"
				],
				[
					701,
					1,
					"insert",
					{
						"characters": "_value"
					},
					"BgAAALYBAAAAAAAAtwEAAAAAAAAAAAAAtwEAAAAAAAC4AQAAAAAAAAAAAAC4AQAAAAAAALkBAAAAAAAAAAAAALkBAAAAAAAAugEAAAAAAAAAAAAAugEAAAAAAAC7AQAAAAAAAAAAAAC7AQAAAAAAALwBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtgEAAAAAAAC2AQAAAAAAAAAAAAAAAPC/"
				],
				[
					716,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAADgCAAAAAAAAOAIAAAAAAAADAAAAaTMy",
					"AQAAAAAAAAABAAAAOwIAAAAAAAA7AgAAAAAAAAAAAAAAAPC/"
				],
				[
					717,
					1,
					"insert",
					{
						"characters": "Valyue"
					},
					"BgAAADgCAAAAAAAAOQIAAAAAAAAAAAAAOQIAAAAAAAA6AgAAAAAAAAAAAAA6AgAAAAAAADsCAAAAAAAAAAAAADsCAAAAAAAAPAIAAAAAAAAAAAAAPAIAAAAAAAA9AgAAAAAAAAAAAAA9AgAAAAAAAD4CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAIAAAAAAAA4AgAAAAAAAAAAAAAAAPC/"
				],
				[
					718,
					2,
					"left_delete",
					null,
					"AgAAAD0CAAAAAAAAPQIAAAAAAAABAAAAZTwCAAAAAAAAPAIAAAAAAAABAAAAdQ",
					"AQAAAAAAAAABAAAAPgIAAAAAAAA+AgAAAAAAAAAAAAAAAPC/"
				],
				[
					719,
					1,
					"insert",
					{
						"characters": "ue"
					},
					"AgAAADwCAAAAAAAAPQIAAAAAAAAAAAAAPQIAAAAAAAA+AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAIAAAAAAAA8AgAAAAAAAAAAAAAAAPC/"
				],
				[
					720,
					3,
					"left_delete",
					null,
					"AwAAAD0CAAAAAAAAPQIAAAAAAAABAAAAZTwCAAAAAAAAPAIAAAAAAAABAAAAdTsCAAAAAAAAOwIAAAAAAAABAAAAeQ",
					"AQAAAAAAAAABAAAAPgIAAAAAAAA+AgAAAAAAAAAAAAAAAPC/"
				],
				[
					721,
					1,
					"insert",
					{
						"characters": "ue"
					},
					"AgAAADsCAAAAAAAAPAIAAAAAAAAAAAAAPAIAAAAAAAA9AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwIAAAAAAAA7AgAAAAAAAAAAAAAAAPC/"
				],
				[
					734,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAAQCAAAAAAAABAIAAAAAAAADAAAAS2V5",
					"AQAAAAAAAAABAAAABwIAAAAAAAAHAgAAAAAAAAAAAAAAAPC/"
				],
				[
					735,
					1,
					"insert",
					{
						"characters": "V"
					},
					"AQAAAAQCAAAAAAAABQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAIAAAAAAAAEAgAAAAAAAAAAAAAAAPC/"
				],
				[
					736,
					1,
					"left_delete",
					null,
					"AQAAAAQCAAAAAAAABAIAAAAAAAABAAAAVg",
					"AQAAAAAAAAABAAAABQIAAAAAAAAFAgAAAAAAAAAAAAAAAPC/"
				],
				[
					737,
					1,
					"insert",
					{
						"characters": "Value"
					},
					"BQAAAAQCAAAAAAAABQIAAAAAAAAAAAAABQIAAAAAAAAGAgAAAAAAAAAAAAAGAgAAAAAAAAcCAAAAAAAAAAAAAAcCAAAAAAAACAIAAAAAAAAAAAAACAIAAAAAAAAJAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAIAAAAAAAAEAgAAAAAAAAAAAAAAAPC/"
				],
				[
					739,
					2,
					"delete_word",
					{
						"forward": true
					},
					"AgAAAAwCAAAAAAAADAIAAAAAAAAEAAAAX2tleQwCAAAAAAAADAIAAAAAAAABAAAAOg",
					"AQAAAAAAAAABAAAADAIAAAAAAAAMAgAAAAAAAAAAAAAAAPC/"
				],
				[
					740,
					1,
					"insert",
					{
						"characters": "_value:"
					},
					"BwAAAAwCAAAAAAAADQIAAAAAAAAAAAAADQIAAAAAAAAOAgAAAAAAAAAAAAAOAgAAAAAAAA8CAAAAAAAAAAAAAA8CAAAAAAAAEAIAAAAAAAAAAAAAEAIAAAAAAAARAgAAAAAAAAAAAAARAgAAAAAAABICAAAAAAAAAAAAABICAAAAAAAAEwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADAIAAAAAAAAMAgAAAAAAAAAAAAAAAPC/"
				],
				[
					753,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							[
								[
									30,
									8
								],
								[
									30,
									12
								],
								"key1",
								539
							],
							[
								[
									33,
									17
								],
								[
									33,
									21
								],
								"key1",
								539
							]
						]
					},
					"AgAAAGYCAAAAAAAAagIAAAAAAAAEAAAAdmFsMdsBAAAAAAAA3wEAAAAAAAAEAAAAdmFsMQ",
					"AQAAAAAAAAABAAAA3gEAAAAAAADeAQAAAAAAAAAAAAAAAPC/"
				],
				[
					761,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							[
								[
									31,
									8
								],
								[
									31,
									12
								],
								"val",
								541
							]
						]
					},
					"AQAAAP0BAAAAAAAAAAIAAAAAAAAEAAAAdmFsMg",
					"AQAAAAAAAAABAAAAAAIAAAAAAAAAAgAAAAAAAAAAAAAA4GFA"
				],
				[
					773,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							[
								[
									30,
									8
								],
								[
									30,
									12
								],
								"key",
								544
							],
							[
								[
									33,
									17
								],
								[
									33,
									21
								],
								"key",
								544
							]
						]
					},
					"AgAAAGUCAAAAAAAAaAIAAAAAAAAEAAAAa2V5MdsBAAAAAAAA3gEAAAAAAAAEAAAAa2V5MQ",
					"AQAAAAAAAAABAAAA3QEAAAAAAADdAQAAAAAAAAAAAAAAQGBA"
				],
				[
					791,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAGkCAAAAAAAAaQIAAAAAAAAGAAAAMTIzMTIz",
					"AQAAAAAAAAABAAAAbwIAAAAAAABvAgAAAAAAAAAAAAAAAPC/"
				],
				[
					792,
					1,
					"insert",
					{
						"characters": "va"
					},
					"AgAAAGkCAAAAAAAAagIAAAAAAAAAAAAAagIAAAAAAABrAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQIAAAAAAABpAgAAAAAAAAAAAAAAAPC/"
				],
				[
					793,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"val\",\"preselect\":true,\"detail\":\"Value\",\"sortText\":\"fffffff8\",\"label\":\"val\",\"additionalTextEdits\":[],\"deprecated\":false,\"textEdit\":{\"newText\":\"val\",\"range\":{\"end\":{\"character\":24,\"line\":33},\"start\":{\"character\":22,\"line\":33}}},\"kind\":6},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							388,
							792,
							2
						],
						"trigger": "val"
					},
					"AgAAAGkCAAAAAAAAaQIAAAAAAAACAAAAdmFpAgAAAAAAAGwCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawIAAAAAAABrAgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/boolean.rs",
			"settings":
			{
				"buffer_size": 1461,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8,
					5,
					"cut",
					null,
					"BQAAAGcCAAAAAAAAZwIAAAAAAAABAAAACmcCAAAAAAAAZwIAAAAAAAAhAAAAICAgIGZuIF9fbGVuX18oJnNlbGYpIC0+IHVzaXplIHsKZwIAAAAAAABnAgAAAAAAAAoAAAAgICAgICAgIDgKZwIAAAAAAABnAgAAAAAAAAYAAAAgICAgfQpnAgAAAAAAAGcCAAAAAAAAAQAAAAo",
					"AQAAAAAAAAABAAAAZwIAAAAAAABnAgAAAAAAAAAAAAAAAEpA"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAGYCAAAAAAAAZwIAAAAAAAAAAAAAZwIAAAAAAABrAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgIAAAAAAABmAgAAAAAAAP///////+9/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "\n\nimpl<T>"
					},
					"CgAAALkBAAAAAAAAugEAAAAAAAAAAAAAaAIAAAAAAABoAgAAAAAAAAQAAAAgICAgugEAAAAAAAC7AQAAAAAAAAAAAAC7AQAAAAAAALwBAAAAAAAAAAAAALwBAAAAAAAAvQEAAAAAAAAAAAAAvQEAAAAAAAC+AQAAAAAAAAAAAAC+AQAAAAAAAL8BAAAAAAAAAAAAAL8BAAAAAAAAwAEAAAAAAAAAAAAAwAEAAAAAAADBAQAAAAAAAAAAAADBAQAAAAAAAMIBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQEAAAAAAAC5AQAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " From<>"
					},
					"BwAAAMIBAAAAAAAAwwEAAAAAAAAAAAAAwwEAAAAAAADEAQAAAAAAAAAAAADEAQAAAAAAAMUBAAAAAAAAAAAAAMUBAAAAAAAAxgEAAAAAAAAAAAAAxgEAAAAAAADHAQAAAAAAAAAAAADHAQAAAAAAAMgBAAAAAAAAAAAAAMgBAAAAAAAAyQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwgEAAAAAAADCAQAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "T"
					},
					"AQAAAMgBAAAAAAAAyQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyAEAAAAAAADIAQAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAAMoBAAAAAAAAywEAAAAAAAAAAAAAywEAAAAAAADMAQAAAAAAAAAAAADMAQAAAAAAAM0BAAAAAAAAAAAAAM0BAAAAAAAAzgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAygEAAAAAAADKAQAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": " Bool"
					},
					"BQAAAM4BAAAAAAAAzwEAAAAAAAAAAAAAzwEAAAAAAADQAQAAAAAAAAAAAADQAQAAAAAAANEBAAAAAAAAAAAAANEBAAAAAAAA0gEAAAAAAAAAAAAA0gEAAAAAAADTAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzgEAAAAAAADOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANMBAAAAAAAA1AEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wEAAAAAAADTAQAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAANQBAAAAAAAA1gEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1AEAAAAAAADUAQAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAANUBAAAAAAAA1gEAAAAAAAAAAAAA1gEAAAAAAADXAQAAAAAAAAAAAADWAQAAAAAAANoBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QEAAAAAAADVAQAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "fn"
					},
					"AgAAANoBAAAAAAAA2wEAAAAAAAAAAAAA2wEAAAAAAADcAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2gEAAAAAAADaAQAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": " from"
					},
					"BQAAANwBAAAAAAAA3QEAAAAAAAAAAAAA3QEAAAAAAADeAQAAAAAAAAAAAADeAQAAAAAAAN8BAAAAAAAAAAAAAN8BAAAAAAAA4AEAAAAAAAAAAAAA4AEAAAAAAADhAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AEAAAAAAADcAQAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert_completion",
					{
						"completion": "formatter",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "formatter"
					},
					"AgAAAN0BAAAAAAAA3QEAAAAAAAAEAAAAZnJvbd0BAAAAAAAA5gEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QEAAAAAAADhAQAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAN0BAAAAAAAA3QEAAAAAAAAJAAAAZm9ybWF0dGVy",
					"AQAAAAAAAAABAAAA5gEAAAAAAADmAQAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN0BAAAAAAAA3gEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QEAAAAAAADdAQAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"insertTextFormat\":2,\"filterText\":\"from\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"fn from(..)\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"fn from(_: T) -> Self {\\n    $0\\n}\",\"range\":{\"end\":{\"character\":8,\"line\":28},\"start\":{\"character\":4,\"line\":28}}},\"documentation\":{\"value\":\"Performs the conversion.\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": true,
						"query_change_id":
						[
							32,
							57,
							1
						],
						"trigger": "from"
					},
					"AgAAANoBAAAAAAAA2gEAAAAAAAAEAAAAZm4gINoBAAAAAAAAAAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3gEAAAAAAADeAQAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"left_delete",
					null,
					"AQAAANMBAAAAAAAA0wEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA1AEAAAAAAADUAQAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": "\nwhere"
					},
					"BgAAANMBAAAAAAAA1AEAAAAAAAAAAAAA1AEAAAAAAADVAQAAAAAAAAAAAADVAQAAAAAAANYBAAAAAAAAAAAAANYBAAAAAAAA1wEAAAAAAAAAAAAA1wEAAAAAAADYAQAAAAAAAAAAAADYAQAAAAAAANkBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wEAAAAAAADTAQAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"insert",
					{
						"characters": " TL:"
					},
					"BAAAANkBAAAAAAAA2gEAAAAAAAAAAAAA2gEAAAAAAADbAQAAAAAAAAAAAADbAQAAAAAAANwBAAAAAAAAAAAAANwBAAAAAAAA3QEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QEAAAAAAADZAQAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAN0BAAAAAAAA3gEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QEAAAAAAADdAQAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					3,
					"left_delete",
					null,
					"AwAAAN0BAAAAAAAA3QEAAAAAAAABAAAAINwBAAAAAAAA3AEAAAAAAAABAAAAOtsBAAAAAAAA2wEAAAAAAAABAAAATA",
					"AQAAAAAAAAABAAAA3gEAAAAAAADeAQAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAANsBAAAAAAAA3AEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2wEAAAAAAADbAQAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": " Szi"
					},
					"BAAAANwBAAAAAAAA3QEAAAAAAAAAAAAA3QEAAAAAAADeAQAAAAAAAAAAAADeAQAAAAAAAN8BAAAAAAAAAAAAAN8BAAAAAAAA4AEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AEAAAAAAADcAQAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"Sized\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"Sized\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"Sized\",\"range\":{\"end\":{\"character\":12,\"line\":28},\"start\":{\"character\":9,\"line\":28}}},\"documentation\":{\"value\":\"Types with a constant size known at compile time.\\n\\nAll type parameters have an implicit bound of `Sized`. The special syntax\\n`?Sized` can be used to remove this bound if it's not appropriate.\\n\\n```rust\\nstruct Foo<T>(T);\\nstruct Bar<T: ?Sized>(T);\\n\\n// struct FooUse(Foo<[i32]>); // error: Sized is not implemented for [i32]\\nstruct BarUse(Bar<[i32]>); // OK\\n```\\n\\nThe one exception is the implicit `Self` type of a trait. A trait does not\\nhave an implicit `Sized` bound as this is incompatible with [trait object]s\\nwhere, by definition, the trait needs to work with all possible implementors,\\nand thus could be any size.\\n\\nAlthough Rust will let you bind `Sized` to a trait, you won't\\nbe able to use it to form a trait object later:\\n\\n```rust\\ntrait Foo { }\\ntrait Bar: Sized { }\\n\\nstruct Impl;\\nimpl Foo for Impl { }\\nimpl Bar for Impl { }\\n\\nlet x: &dyn Foo = &Impl;    // OK\\n// let y: &dyn Bar = &Impl; // error: the trait `Bar` cannot\\n                            // be made into an object\\n```\\n\\n[trait object]: ../../book/ch17-02-trait-objects.html\",\"kind\":\"markdown\"},\"kind\":8},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							52,
							82,
							4
						],
						"trigger": "Sized"
					},
					"AgAAAN0BAAAAAAAA3QEAAAAAAAADAAAAU3pp3QEAAAAAAADiAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4AEAAAAAAADgAQAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAOIBAAAAAAAA4wEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4gEAAAAAAADiAQAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"trim_trailing_white_space",
					null,
					"AQAAAAECAAAAAAAAAQIAAAAAAAAIAAAAICAgICAgICA",
					"AQAAAAAAAAABAAAA4wEAAAAAAADjAQAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"reindent",
					null,
					"AQAAAAECAAAAAAAACQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQIAAAAAAAABAgAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "Bool"
					},
					"BAAAAAkCAAAAAAAACgIAAAAAAAAAAAAACgIAAAAAAAALAgAAAAAAAAAAAAALAgAAAAAAAAwCAAAAAAAAAAAAAAwCAAAAAAAADQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQIAAAAAAAAJAgAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA0CAAAAAAAADgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQIAAAAAAAANAgAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAA4CAAAAAAAAEAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADgIAAAAAAAAOAgAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAA8CAAAAAAAAEAIAAAAAAAAAAAAAEAIAAAAAAAAYAgAAAAAAAAAAAAAYAgAAAAAAABkCAAAAAAAAAAAAABkCAAAAAAAAIQIAAAAAAAAAAAAAEAIAAAAAAAAQAgAAAAAAAAgAAAAgICAgICAgIBACAAAAAAAAHAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADwIAAAAAAAAPAgAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "_bool:"
					},
					"BgAAABwCAAAAAAAAHQIAAAAAAAAAAAAAHQIAAAAAAAAeAgAAAAAAAAAAAAAeAgAAAAAAAB8CAAAAAAAAAAAAAB8CAAAAAAAAIAIAAAAAAAAAAAAAIAIAAAAAAAAhAgAAAAAAAAAAAAAhAgAAAAAAACICAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHAIAAAAAAAAcAgAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAPIBAAAAAAAA8wEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8gEAAAAAAADyAQAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"left_delete",
					null,
					"AQAAAPIBAAAAAAAA8gEAAAAAAAABAAAAYg",
					"AQAAAAAAAAABAAAA8wEAAAAAAADzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "bool"
					},
					"BAAAAPIBAAAAAAAA8wEAAAAAAAAAAAAA8wEAAAAAAAD0AQAAAAAAAAAAAAD0AQAAAAAAAPUBAAAAAAAAAAAAAPUBAAAAAAAA9gEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8gEAAAAAAADyAQAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAACUCAAAAAAAAJQIAAAAAAAABAAAAOg",
					"AQAAAAAAAAABAAAAJgIAAAAAAAAmAgAAAAAAAAAAAAAAAPC/"
				],
				[
					122,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACUCAAAAAAAAJgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQIAAAAAAAAlAgAAAAAAAAAAAAAAAPC/"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": "\nfn"
					},
					"BQAAAAQCAAAAAAAABQIAAAAAAAAAAAAABQIAAAAAAAAJAgAAAAAAAAAAAAAJAgAAAAAAAA0CAAAAAAAAAAAAAA0CAAAAAAAADgIAAAAAAAAAAAAADgIAAAAAAAAPAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAIAAAAAAAAEAgAAAAAAAAAAAAAAMHlA"
				],
				[
					138,
					2,
					"left_delete",
					null,
					"AgAAAA4CAAAAAAAADgIAAAAAAAABAAAAbg0CAAAAAAAADQIAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAADwIAAAAAAAAPAgAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "bool"
					},
					"BAAAAA0CAAAAAAAADgIAAAAAAAAAAAAADgIAAAAAAAAPAgAAAAAAAAAAAAAPAgAAAAAAABACAAAAAAAAAAAAABACAAAAAAAAEQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQIAAAAAAAANAgAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABECAAAAAAAAEwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQIAAAAAAAARAgAAAAAAAAAAAAAAAPC/"
				],
				[
					142,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAABECAAAAAAAAEQIAAAAAAAACAAAAKCkNAgAAAAAAAA0CAAAAAAAABAAAAGJvb2w",
					"AQAAAAAAAAABAAAAEwIAAAAAAAATAgAAAAAAAAAAAAAAAPC/"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": "Bool:"
					},
					"BQAAAA0CAAAAAAAADgIAAAAAAAAAAAAADgIAAAAAAAAPAgAAAAAAAAAAAAAPAgAAAAAAABACAAAAAAAAAAAAABACAAAAAAAAEQIAAAAAAAAAAAAAEQIAAAAAAAASAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQIAAAAAAAANAgAAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAABECAAAAAAAAEQIAAAAAAAABAAAAOg0CAAAAAAAADQIAAAAAAAAEAAAAQm9vbA",
					"AQAAAAAAAAABAAAAEgIAAAAAAAASAgAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": "bool:"
					},
					"BQAAAA0CAAAAAAAADgIAAAAAAAAAAAAADgIAAAAAAAAPAgAAAAAAAAAAAAAPAgAAAAAAABACAAAAAAAAAAAAABACAAAAAAAAEQIAAAAAAAAAAAAAEQIAAAAAAAASAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQIAAAAAAAANAgAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					2,
					"left_delete",
					null,
					"AgAAABECAAAAAAAAEQIAAAAAAAABAAAAOhACAAAAAAAAEAIAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAAEgIAAAAAAAASAgAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAA0CAAAAAAAADQIAAAAAAAADAAAAYm9v",
					"AQAAAAAAAAABAAAAEAIAAAAAAAAQAgAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "_bool"
					},
					"BQAAAA0CAAAAAAAADgIAAAAAAAAAAAAADgIAAAAAAAAPAgAAAAAAAAAAAAAPAgAAAAAAABACAAAAAAAAAAAAABACAAAAAAAAEQIAAAAAAAAAAAAAEQIAAAAAAAASAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQIAAAAAAAANAgAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": " as"
					},
					"AwAAABICAAAAAAAAEwIAAAAAAAAAAAAAEwIAAAAAAAAUAgAAAAAAAAAAAAAUAgAAAAAAABUCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEgIAAAAAAAASAgAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"insert",
					{
						"characters": " bool;"
					},
					"BgAAABUCAAAAAAAAFgIAAAAAAAAAAAAAFgIAAAAAAAAXAgAAAAAAAAAAAAAXAgAAAAAAABgCAAAAAAAAAAAAABgCAAAAAAAAGQIAAAAAAAAAAAAAGQIAAAAAAAAaAgAAAAAAAAAAAAAaAgAAAAAAABsCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQIAAAAAAAAVAgAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					4,
					"right_delete",
					null,
					"BAAAAPIBAAAAAAAA8gEAAAAAAAABAAAAYvIBAAAAAAAA8gEAAAAAAAABAAAAb/IBAAAAAAAA8gEAAAAAAAABAAAAb/IBAAAAAAAA8gEAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAA8gEAAAAAAADyAQAAAAAAAAAAAAAAAPC/"
				],
				[
					160,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAAAkCAAAAAAAACgIAAAAAAAAAAAAACgIAAAAAAAALAgAAAAAAAAAAAAALAgAAAAAAAAwCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQIAAAAAAAAJAgAAAAAAAAAAAAAAAPC/"
				],
				[
					161,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAwCAAAAAAAADQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADAIAAAAAAAAMAgAAAAAAAAAAAAAAAPC/"
				],
				[
					164,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAABMCAAAAAAAAFAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwIAAAAAAAATAgAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": " _"
					},
					"AgAAABQCAAAAAAAAFQIAAAAAAAAAAAAAFQIAAAAAAAAWAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAIAAAAAAAAUAgAAAAAAAAAAAAAAAPC/"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABYCAAAAAAAAFwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgIAAAAAAAAWAgAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					2,
					"left_delete",
					null,
					"AgAAALwBAAAAAAAAvAEAAAAAAACXAAAAbXBsPFQ+IEZyb208VD4gZm9yIEJvb2wKd2hlcmUgVDogU2l6ZWQKewogICAgZm4gZnJvbShfOiBUKSAtPiBTZWxmIHsKICAgICAgICBsZXQgX2Jvb2wgPSBfIGFzIGJvb2w7CiAgICAgICAgQm9vbCB7CiAgICAgICAgICAgIF9ib29sLAogICAgICAgIH0KICAgIH0KfbsBAAAAAAAAuwEAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAUwIAAAAAAAC8AQAAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": "impl"
					},
					"BAAAALsBAAAAAAAAvAEAAAAAAAAAAAAAvAEAAAAAAAC9AQAAAAAAAAAAAAC9AQAAAAAAAL4BAAAAAAAAAAAAAL4BAAAAAAAAvwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuwEAAAAAAAC7AQAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					1,
					"insert",
					{
						"characters": " From<>"
					},
					"BwAAAL8BAAAAAAAAwAEAAAAAAAAAAAAAwAEAAAAAAADBAQAAAAAAAAAAAADBAQAAAAAAAMIBAAAAAAAAAAAAAMIBAAAAAAAAwwEAAAAAAAAAAAAAwwEAAAAAAADEAQAAAAAAAAAAAADEAQAAAAAAAMUBAAAAAAAAAAAAAMUBAAAAAAAAxgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvwEAAAAAAAC/AQAAAAAAAAAAAAAAAPC/"
				],
				[
					184,
					1,
					"insert",
					{
						"characters": "bool"
					},
					"BAAAAMUBAAAAAAAAxgEAAAAAAAAAAAAAxgEAAAAAAADHAQAAAAAAAAAAAADHAQAAAAAAAMgBAAAAAAAAAAAAAMgBAAAAAAAAyQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxQEAAAAAAADFAQAAAAAAAAAAAAAAAPC/"
				],
				[
					186,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAAMoBAAAAAAAAywEAAAAAAAAAAAAAywEAAAAAAADMAQAAAAAAAAAAAADMAQAAAAAAAM0BAAAAAAAAAAAAAM0BAAAAAAAAzgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAygEAAAAAAADKAQAAAAAAAAAAAAAAAPC/"
				],
				[
					187,
					1,
					"insert",
					{
						"characters": " Bool"
					},
					"BQAAAM4BAAAAAAAAzwEAAAAAAAAAAAAAzwEAAAAAAADQAQAAAAAAAAAAAADQAQAAAAAAANEBAAAAAAAAAAAAANEBAAAAAAAA0gEAAAAAAAAAAAAA0gEAAAAAAADTAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzgEAAAAAAADOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					188,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANMBAAAAAAAA1AEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wEAAAAAAADTAQAAAAAAAAAAAAAAAPC/"
				],
				[
					189,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAANQBAAAAAAAA1gEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1AEAAAAAAADUAQAAAAAAAAAAAAAAAPC/"
				],
				[
					190,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAANUBAAAAAAAA1gEAAAAAAAAAAAAA1gEAAAAAAADXAQAAAAAAAAAAAADWAQAAAAAAANoBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QEAAAAAAADVAQAAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"insert",
					{
						"characters": "fn"
					},
					"AgAAANoBAAAAAAAA2wEAAAAAAAAAAAAA2wEAAAAAAADcAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2gEAAAAAAADaAQAAAAAAAAAAAAAAAPC/"
				],
				[
					192,
					1,
					"insert",
					{
						"characters": " from"
					},
					"BQAAANwBAAAAAAAA3QEAAAAAAAAAAAAA3QEAAAAAAADeAQAAAAAAAAAAAADeAQAAAAAAAN8BAAAAAAAAAAAAAN8BAAAAAAAA4AEAAAAAAAAAAAAA4AEAAAAAAADhAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AEAAAAAAADcAQAAAAAAAAAAAAAAAPC/"
				],
				[
					193,
					1,
					"insert_completion",
					{
						"completion": "formatter",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "formatter"
					},
					"AgAAAN0BAAAAAAAA3QEAAAAAAAAEAAAAZnJvbd0BAAAAAAAA5gEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QEAAAAAAADhAQAAAAAAAAAAAAAAAPC/"
				],
				[
					194,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAN0BAAAAAAAA3QEAAAAAAAAJAAAAZm9ybWF0dGVy",
					"AQAAAAAAAAABAAAA5gEAAAAAAADmAQAAAAAAAAAAAAAAAPC/"
				],
				[
					195,
					1,
					"insert",
					{
						"characters": "fr"
					},
					"AgAAAN0BAAAAAAAA3gEAAAAAAAAAAAAA3gEAAAAAAADfAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QEAAAAAAADdAQAAAAAAAAAAAAAAAPC/"
				],
				[
					196,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"insertTextFormat\":2,\"filterText\":\"from\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"fn from(..)\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"fn from(_: bool) -> Self {\\n    $0\\n}\",\"range\":{\"end\":{\"character\":9,\"line\":28},\"start\":{\"character\":4,\"line\":28}}},\"documentation\":{\"value\":\"Performs the conversion.\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							137,
							195,
							2
						],
						"trigger": "from"
					},
					"AgAAANoBAAAAAAAA2gEAAAAAAAAFAAAAZm4gZnLaAQAAAAAAAAMCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3wEAAAAAAADfAQAAAAAAAAAAAAAAAPC/"
				],
				[
					201,
					1,
					"trim_trailing_white_space",
					null,
					"AQAAAPUBAAAAAAAA9QEAAAAAAAAIAAAAICAgICAgICA",
					"AQAAAAAAAAABAAAA/gEAAAAAAAD+AQAAAAAAAAAAAAAAAPC/"
				],
				[
					210,
					1,
					"insert",
					{
						"characters": "bnool"
					},
					"BQAAAOMBAAAAAAAA5AEAAAAAAAAAAAAA5AEAAAAAAADlAQAAAAAAAAAAAADlAQAAAAAAAOYBAAAAAAAAAAAAAOYBAAAAAAAA5wEAAAAAAAAAAAAA5wEAAAAAAADoAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4wEAAAAAAADjAQAAAAAAAAAAAAAAAPC/"
				],
				[
					212,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAOIBAAAAAAAA4gEAAAAAAAAGAAAAX2Jub29s",
					"AQAAAAAAAAABAAAA6AEAAAAAAADoAQAAAAAAAAAAAAAAAPC/"
				],
				[
					213,
					1,
					"insert",
					{
						"characters": "_+"
					},
					"AgAAAOIBAAAAAAAA4wEAAAAAAAAAAAAA4wEAAAAAAADkAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4gEAAAAAAADiAQAAAAAAAAAAAAAAAPC/"
				],
				[
					214,
					1,
					"left_delete",
					null,
					"AQAAAOMBAAAAAAAA4wEAAAAAAAABAAAAKw",
					"AQAAAAAAAAABAAAA5AEAAAAAAADkAQAAAAAAAAAAAAAAAPC/"
				],
				[
					215,
					1,
					"insert",
					{
						"characters": "bool"
					},
					"BAAAAOMBAAAAAAAA5AEAAAAAAAAAAAAA5AEAAAAAAADlAQAAAAAAAAAAAADlAQAAAAAAAOYBAAAAAAAAAAAAAOYBAAAAAAAA5wEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4wEAAAAAAADjAQAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"reindent",
					null,
					"AQAAAPkBAAAAAAAAAQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+QEAAAAAAAD5AQAAAAAAAAAAAAAAoGtA"
				],
				[
					219,
					1,
					"insert",
					{
						"characters": "B"
					},
					"AQAAAAECAAAAAAAAAgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQIAAAAAAAABAgAAAAAAAAAAAAAAAPC/"
				],
				[
					220,
					1,
					"insert",
					{
						"characters": " ool"
					},
					"BAAAAAICAAAAAAAAAwIAAAAAAAAAAAAAAwIAAAAAAAAEAgAAAAAAAAAAAAAEAgAAAAAAAAUCAAAAAAAAAAAAAAUCAAAAAAAABgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgIAAAAAAAACAgAAAAAAAAAAAAAAAPC/"
				],
				[
					221,
					4,
					"left_delete",
					null,
					"BAAAAAUCAAAAAAAABQIAAAAAAAABAAAAbAQCAAAAAAAABAIAAAAAAAABAAAAbwMCAAAAAAAAAwIAAAAAAAABAAAAbwICAAAAAAAAAgIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAABgIAAAAAAAAGAgAAAAAAAAAAAAAAAPC/"
				],
				[
					222,
					1,
					"insert",
					{
						"characters": "ool"
					},
					"AwAAAAICAAAAAAAAAwIAAAAAAAAAAAAAAwIAAAAAAAAEAgAAAAAAAAAAAAAEAgAAAAAAAAUCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgIAAAAAAAACAgAAAAAAAAAAAAAAAPC/"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAUCAAAAAAAABgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQIAAAAAAAAFAgAAAAAAAAAAAAAAAPC/"
				],
				[
					224,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAAYCAAAAAAAACAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgIAAAAAAAAGAgAAAAAAAAAAAAAAAPC/"
				],
				[
					225,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAAcCAAAAAAAACAIAAAAAAAAAAAAACAIAAAAAAAAQAgAAAAAAAAAAAAAQAgAAAAAAABECAAAAAAAAAAAAABECAAAAAAAAGQIAAAAAAAAAAAAACAIAAAAAAAAIAgAAAAAAAAgAAAAgICAgICAgIAgCAAAAAAAAFAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwIAAAAAAAAHAgAAAAAAAAAAAAAAAPC/"
				],
				[
					226,
					1,
					"insert",
					{
						"characters": "_bool,"
					},
					"BgAAABQCAAAAAAAAFQIAAAAAAAAAAAAAFQIAAAAAAAAWAgAAAAAAAAAAAAAWAgAAAAAAABcCAAAAAAAAAAAAABcCAAAAAAAAGAIAAAAAAAAAAAAAGAIAAAAAAAAZAgAAAAAAAAAAAAAZAgAAAAAAABoCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAIAAAAAAAAUAgAAAAAAAAAAAAAAAPC/"
				],
				[
					239,
					1,
					"insert",
					{
						"characters": "\\"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABAAAAAAAAAEUAAAB1c2Ugc3RkOjpmbXQ6OkRpc3BsYXk7CnVzZSBzdGQ6OmZtdDo6Rm9ybWF0dGVyOwp1c2Ugc3RkOjpmbXQ6OlJlc3VsdDs",
					"AQAAAAAAAAABAAAARQAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					240,
					2,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAXA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAPC/"
				],
				[
					241,
					1,
					"insert",
					{
						"characters": "\nuse"
					},
					"BAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					242,
					1,
					"insert",
					{
						"characters": " strd"
					},
					"BQAAAAQAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAJAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					243,
					3,
					"left_delete",
					null,
					"AwAAAAgAAAAAAAAACAAAAAAAAAABAAAAZAcAAAAAAAAABwAAAAAAAAABAAAAcgYAAAAAAAAABgAAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAACQAAAAAAAAAJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					244,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAAYAAAAAAAAABwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgAAAAAAAAAGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					245,
					1,
					"left_delete",
					null,
					"AQAAAAYAAAAAAAAABgAAAAAAAAABAAAAZA",
					"AQAAAAAAAAABAAAABwAAAAAAAAAHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					246,
					1,
					"insert",
					{
						"characters": "td::fmt;"
					},
					"CAAAAAYAAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAAOAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgAAAAAAAAAGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					260,
					1,
					"insert",
					{
						"characters": "fmt::"
					},
					"DwAAADMDAAAAAAAANAMAAAAAAAAAAAAAIQMAAAAAAAAiAwAAAAAAAAAAAADsAgAAAAAAAO0CAAAAAAAAAAAAADYDAAAAAAAANwMAAAAAAAAAAAAAIwMAAAAAAAAkAwAAAAAAAAAAAADtAgAAAAAAAO4CAAAAAAAAAAAAADkDAAAAAAAAOgMAAAAAAAAAAAAAJQMAAAAAAAAmAwAAAAAAAAAAAADuAgAAAAAAAO8CAAAAAAAAAAAAADwDAAAAAAAAPQMAAAAAAAAAAAAAJwMAAAAAAAAoAwAAAAAAAAAAAADvAgAAAAAAAPACAAAAAAAAAAAAAD8DAAAAAAAAQAMAAAAAAAAAAAAAKQMAAAAAAAAqAwAAAAAAAAAAAADwAgAAAAAAAPECAAAAAAAAAAAAAA",
					"AQAAAAAAAAADAAAA7AIAAAAAAADsAgAAAAAAAAAAAAAAAPC/IQMAAAAAAAAhAwAAAAAAAAAAAAAAAPC/MwMAAAAAAAAzAwAAAAAAAAAAAAAAAPC/"
				],
				[
					264,
					1,
					"insert",
					{
						"characters": "\n\nimpl"
					},
					"BgAAAIIDAAAAAAAAgwMAAAAAAAAAAAAAgwMAAAAAAACEAwAAAAAAAAAAAACEAwAAAAAAAIUDAAAAAAAAAAAAAIUDAAAAAAAAhgMAAAAAAAAAAAAAhgMAAAAAAACHAwAAAAAAAAAAAACHAwAAAAAAAIgDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggMAAAAAAACCAwAAAAAAAAAAAAAAQGBA"
				],
				[
					265,
					1,
					"insert",
					{
						"characters": " fmt::De"
					},
					"CAAAAIgDAAAAAAAAiQMAAAAAAAAAAAAAiQMAAAAAAACKAwAAAAAAAAAAAACKAwAAAAAAAIsDAAAAAAAAAAAAAIsDAAAAAAAAjAMAAAAAAAAAAAAAjAMAAAAAAACNAwAAAAAAAAAAAACNAwAAAAAAAI4DAAAAAAAAAAAAAI4DAAAAAAAAjwMAAAAAAAAAAAAAjwMAAAAAAACQAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAMAAAAAAACIAwAAAAAAAAAAAAAAAPC/"
				],
				[
					266,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"Debug\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"Debug\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"Debug\",\"range\":{\"end\":{\"character\":12,\"line\":54},\"start\":{\"character\":10,\"line\":54}}},\"documentation\":{\"value\":\"`?` formatting.\\n\\n`Debug` should format the output in a programmer-facing, debugging context.\\n\\nGenerally speaking, you should just `derive` a `Debug` implementation.\\n\\nWhen used with the alternate format specifier `#?`, the output is pretty-printed.\\n\\nFor more information on formatters, see [the module-level documentation][module].\\n\\n[module]: ../../std/fmt/index.html\\n\\nThis trait can be used with `#[derive]` if all fields implement `Debug`. When\\n`derive`d for structs, it will use the name of the `struct`, then `{`, then a\\ncomma-separated list of each field's name and `Debug` value, then `}`. For\\n`enum`s, it will use the name of the variant and, if applicable, `(`, then the\\n`Debug` values of the fields, then `)`.\\n\\n# Stability\\n\\nDerived `Debug` formats are not stable, and so may change with future Rust\\nversions. Additionally, `Debug` implementations of types provided by the\\nstandard library (`libstd`, `libcore`, `liballoc`, etc.) are not stable, and\\nmay also change with future Rust versions.\\n\\n# Examples\\n\\nDeriving an implementation:\\n\\n```rust\\n#[derive(Debug)]\\nstruct Point {\\n    x: i32,\\n    y: i32,\\n}\\n\\nlet origin = Point { x: 0, y: 0 };\\n\\nassert_eq!(format!(\\\"The origin is: {:?}\\\", origin), \\\"The origin is: Point { x: 0, y: 0 }\\\");\\n```\\n\\nManually implementing:\\n\\n```rust\\nuse std::fmt;\\n\\nstruct Point {\\n    x: i32,\\n    y: i32,\\n}\\n\\nimpl fmt::Debug for Point {\\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\\n        f.debug_struct(\\\"Point\\\")\\n         .field(\\\"x\\\", &self.x)\\n         .field(\\\"y\\\", &self.y)\\n         .finish()\\n    }\\n}\\n\\nlet origin = Point { x: 0, y: 0 };\\n\\nassert_eq!(format!(\\\"The origin is: {:?}\\\", origin), \\\"The origin is: Point { x: 0, y: 0 }\\\");\\n```\\n\\nThere are a number of helper methods on the [`Formatter`] struct to help you with manual\\nimplementations, such as [`debug_struct`].\\n\\n[`debug_struct`]: Formatter::debug_struct\\n\\nTypes that do not wish to use the standard suite of debug representations\\nprovided by the `Formatter` trait (`debug_struct`, `debug_tuple`,\\n`debut_list`, `debug_set`, `debug_map`) can do something totally custom by\\nmanually writing an arbitrary representation to the `Formatter`.\\n\\n```rust\\nimpl fmt::Debug for Point {\\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\\n        write!(f, \\\"Point [{} {}]\\\", self.x, self.y)\\n    }\\n}\\n```\\n\\n`Debug` implementations using either `derive` or the debug builder API\\non [`Formatter`] support pretty-printing using the alternate flag: `{:#?}`.\\n\\nPretty-printing with `#?`:\\n\\n```rust\\n#[derive(Debug)]\\nstruct Point {\\n    x: i32,\\n    y: i32,\\n}\\n\\nlet origin = Point { x: 0, y: 0 };\\n\\nassert_eq!(format!(\\\"The origin is: {:#?}\\\", origin),\\n\\\"The origin is: Point {\\n    x: 0,\\n    y: 0,\\n}\\\");\\n```\",\"kind\":\"markdown\"},\"kind\":8},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							186,
							265,
							8
						],
						"trigger": "Debug"
					},
					"AgAAAI4DAAAAAAAAjgMAAAAAAAACAAAARGWOAwAAAAAAAJMDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAMAAAAAAACQAwAAAAAAAAAAAAAAAPC/"
				],
				[
					267,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAAJMDAAAAAAAAlAMAAAAAAAAAAAAAlAMAAAAAAACVAwAAAAAAAAAAAACVAwAAAAAAAJYDAAAAAAAAAAAAAJYDAAAAAAAAlwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwMAAAAAAACTAwAAAAAAAAAAAAAAAPC/"
				],
				[
					268,
					1,
					"insert",
					{
						"characters": " Bool"
					},
					"BQAAAJcDAAAAAAAAmAMAAAAAAAAAAAAAmAMAAAAAAACZAwAAAAAAAAAAAACZAwAAAAAAAJoDAAAAAAAAAAAAAJoDAAAAAAAAmwMAAAAAAAAAAAAAmwMAAAAAAACcAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwMAAAAAAACXAwAAAAAAAAAAAAAAAPC/"
				],
				[
					269,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJwDAAAAAAAAnQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAMAAAAAAACcAwAAAAAAAAAAAAAAAPC/"
				],
				[
					270,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJ0DAAAAAAAAnwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQMAAAAAAACdAwAAAAAAAAAAAAAAAPC/"
				],
				[
					271,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAJ4DAAAAAAAAnwMAAAAAAAAAAAAAnwMAAAAAAACgAwAAAAAAAAAAAACfAwAAAAAAAKMDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAngMAAAAAAACeAwAAAAAAAAAAAAAAAPC/"
				],
				[
					272,
					1,
					"insert",
					{
						"characters": "fn"
					},
					"AgAAAKMDAAAAAAAApAMAAAAAAAAAAAAApAMAAAAAAAClAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowMAAAAAAACjAwAAAAAAAAAAAAAAAPC/"
				],
				[
					273,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAAKUDAAAAAAAApgMAAAAAAAAAAAAApgMAAAAAAACnAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQMAAAAAAAClAwAAAAAAAAAAAAAAAPC/"
				],
				[
					274,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"insertTextFormat\":2,\"filterText\":\"fmt\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"fn fmt(..)\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\\n    $0\\n}\",\"range\":{\"end\":{\"character\":8,\"line\":55},\"start\":{\"character\":4,\"line\":55}}},\"documentation\":{\"value\":\"Formats the value using the given formatter.\\n\\n# Examples\\n\\n```rust\\nuse std::fmt;\\n\\nstruct Position {\\n    longitude: f32,\\n    latitude: f32,\\n}\\n\\nimpl fmt::Debug for Position {\\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\\n        f.debug_tuple(\\\"\\\")\\n         .field(&self.longitude)\\n         .field(&self.latitude)\\n         .finish()\\n    }\\n}\\n\\nlet position = Position { longitude: 1.987, latitude: 2.983 };\\nassert_eq!(format!(\\\"{:?}\\\", position), \\\"(1.987, 2.983)\\\");\\n\\nassert_eq!(format!(\\\"{:#?}\\\", position), \\\"(\\n    1.987,\\n    2.983,\\n)\\\");\\n```\",\"kind\":\"markdown\"},\"kind\":2},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							194,
							273,
							2
						],
						"trigger": "fmt"
					},
					"AgAAAKMDAAAAAAAAowMAAAAAAAAEAAAAZm4gZqMDAAAAAAAA7AMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApwMAAAAAAACnAwAAAAAAAAAAAAAAAPC/"
				],
				[
					286,
					1,
					"paste",
					null,
					"AQAAAN4DAAAAAAAADgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5gMAAAAAAADmAwAAAAAAAAAAAAAAAPC/"
				],
				[
					287,
					3,
					"left_delete",
					null,
					"AwAAABIEAAAAAAAAEgQAAAAAAAAEAAAAICAgIA4EAAAAAAAADgQAAAAAAAAEAAAAICAgIA0EAAAAAAAADQQAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAFgQAAAAAAAAWBAAAAAAAAAAAAAAAAPC/"
				],
				[
					290,
					1,
					"insert",
					{
						"characters": ":?"
					},
					"AgAAAPoDAAAAAAAA+wMAAAAAAAAAAAAA+wMAAAAAAAD8AwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+gMAAAAAAAD6AwAAAAAAAAAAAAAAAPC/"
				],
				[
					305,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AgAAABYDAAAAAAAAFwMAAAAAAAAAAAAAFwMAAAAAAAAXAwAAAAAAAAkAAABmb3JtYXR0ZXI",
					"AQAAAAAAAAABAAAAFgMAAAAAAAAfAwAAAAAAAAAAAAAAAPC/"
				],
				[
					310,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AgAAAFIDAAAAAAAAUwMAAAAAAAAAAAAAUwMAAAAAAABTAwAAAAAAAAkAAABmb3JtYXR0ZXI",
					"AQAAAAAAAAABAAAAUgMAAAAAAABbAwAAAAAAAAAAAAAAAPC/"
				],
				[
					315,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AgAAAN0DAAAAAAAA3gMAAAAAAAAAAAAA3gMAAAAAAADeAwAAAAAAAAkAAABmb3JtYXR0ZXI",
					"AQAAAAAAAAABAAAA3QMAAAAAAADmAwAAAAAAAAAAAAAAAPC/"
				],
				[
					345,
					1,
					"insert",
					{
						"characters": "Bool"
					},
					"BAAAAOEDAAAAAAAA4gMAAAAAAAAAAAAA4gMAAAAAAADjAwAAAAAAAAAAAADjAwAAAAAAAOQDAAAAAAAAAAAAAOQDAAAAAAAA5QMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QMAAAAAAADhAwAAAAAAAAAAAAAAAPC/"
				],
				[
					346,
					1,
					"insert",
					{
						"characters": "<"
					},
					"AQAAAOUDAAAAAAAA5gMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5QMAAAAAAADlAwAAAAAAAAAAAAAAAPC/"
				],
				[
					349,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAOoDAAAAAAAA6wMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6gMAAAAAAADqAwAAAAAAAAAAAAAAAPC/"
				],
				[
					365,
					2,
					"left_delete",
					null,
					"AgAAAOgDAAAAAAAA6AMAAAAAAAABAAAAP+cDAAAAAAAA5wMAAAAAAAABAAAAOg",
					"AQAAAAAAAAABAAAA6QMAAAAAAADpAwAAAAAAAAAAAAAAAPC/"
				],
				[
					366,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOcDAAAAAAAA6AMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5wMAAAAAAADnAwAAAAAAAAAAAAAAAPC/"
				],
				[
					367,
					1,
					"left_delete",
					null,
					"AQAAAOcDAAAAAAAA5wMAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA6AMAAAAAAADoAwAAAAAAAAAAAAAAAPC/"
				],
				[
					378,
					1,
					"insert",
					{
						"characters": "\n\nimpl"
					},
					"BgAAAPUBAAAAAAAA9gEAAAAAAAAAAAAA9gEAAAAAAAD3AQAAAAAAAAAAAAD3AQAAAAAAAPgBAAAAAAAAAAAAAPgBAAAAAAAA+QEAAAAAAAAAAAAA+QEAAAAAAAD6AQAAAAAAAAAAAAD6AQAAAAAAAPsBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9QEAAAAAAAD1AQAAAAAAAAAAAAAAAPC/"
				],
				[
					379,
					1,
					"insert",
					{
						"characters": " From<"
					},
					"BgAAAPsBAAAAAAAA/AEAAAAAAAAAAAAA/AEAAAAAAAD9AQAAAAAAAAAAAAD9AQAAAAAAAP4BAAAAAAAAAAAAAP4BAAAAAAAA/wEAAAAAAAAAAAAA/wEAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAECAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+wEAAAAAAAD7AQAAAAAAAAAAAAAAAPC/"
				],
				[
					380,
					1,
					"insert",
					{
						"characters": "i32<>"
					},
					"BQAAAAECAAAAAAAAAgIAAAAAAAAAAAAAAgIAAAAAAAADAgAAAAAAAAAAAAADAgAAAAAAAAQCAAAAAAAAAAAAAAQCAAAAAAAABQIAAAAAAAAAAAAABQIAAAAAAAAGAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQIAAAAAAAABAgAAAAAAAAAAAAAAAPC/"
				],
				[
					381,
					2,
					"left_delete",
					null,
					"AgAAAAUCAAAAAAAABQIAAAAAAAABAAAAPgQCAAAAAAAABAIAAAAAAAABAAAAPA",
					"AQAAAAAAAAABAAAABgIAAAAAAAAGAgAAAAAAAAAAAAAAAPC/"
				],
				[
					382,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAAQCAAAAAAAABQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAIAAAAAAAAEAgAAAAAAAAAAAAAAAPC/"
				],
				[
					383,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAAAUCAAAAAAAABgIAAAAAAAAAAAAABgIAAAAAAAAHAgAAAAAAAAAAAAAHAgAAAAAAAAgCAAAAAAAAAAAAAAgCAAAAAAAACQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQIAAAAAAAAFAgAAAAAAAAAAAAAAAPC/"
				],
				[
					384,
					1,
					"insert",
					{
						"characters": " Bool"
					},
					"BQAAAAkCAAAAAAAACgIAAAAAAAAAAAAACgIAAAAAAAALAgAAAAAAAAAAAAALAgAAAAAAAAwCAAAAAAAAAAAAAAwCAAAAAAAADQIAAAAAAAAAAAAADQIAAAAAAAAOAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACQIAAAAAAAAJAgAAAAAAAAAAAAAAAPC/"
				],
				[
					385,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA4CAAAAAAAADwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADgIAAAAAAAAOAgAAAAAAAAAAAAAAAPC/"
				],
				[
					386,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAA8CAAAAAAAAEQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADwIAAAAAAAAPAgAAAAAAAAAAAAAAAPC/"
				],
				[
					387,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAABACAAAAAAAAEQIAAAAAAAAAAAAAEQIAAAAAAAASAgAAAAAAAAAAAAARAgAAAAAAABUCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAIAAAAAAAAQAgAAAAAAAAAAAAAAAPC/"
				],
				[
					396,
					1,
					"insert",
					{
						"characters": "fbn"
					},
					"AwAAABUCAAAAAAAAFgIAAAAAAAAAAAAAFgIAAAAAAAAXAgAAAAAAAAAAAAAXAgAAAAAAABgCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQIAAAAAAAAVAgAAAAAAAAAAAAAAAEpA"
				],
				[
					397,
					1,
					"insert",
					{
						"characters": " f"
					},
					"AgAAABgCAAAAAAAAGQIAAAAAAAAAAAAAGQIAAAAAAAAaAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGAIAAAAAAAAYAgAAAAAAAAAAAAAAAPC/"
				],
				[
					398,
					1,
					"left_delete",
					null,
					"AQAAABkCAAAAAAAAGQIAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAAGgIAAAAAAAAaAgAAAAAAAAAAAAAAAPC/"
				],
				[
					399,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAABUCAAAAAAAAFQIAAAAAAAAEAAAAZmJuIBECAAAAAAAAEQIAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAGQIAAAAAAAAZAgAAAAAAAAAAAAAAAPC/"
				],
				[
					400,
					1,
					"reindent",
					null,
					"AQAAABECAAAAAAAAFQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQIAAAAAAAARAgAAAAAAAAAAAAAAAPC/"
				],
				[
					401,
					1,
					"insert",
					{
						"characters": "fn"
					},
					"AgAAABUCAAAAAAAAFgIAAAAAAAAAAAAAFgIAAAAAAAAXAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQIAAAAAAAAVAgAAAAAAAAAAAAAAAPC/"
				],
				[
					402,
					1,
					"insert",
					{
						"characters": " \t"
					},
					"AgAAABcCAAAAAAAAGAIAAAAAAAAAAAAAGAIAAAAAAAAZAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFwIAAAAAAAAXAgAAAAAAAAAAAAAAAPC/"
				],
				[
					403,
					1,
					"left_delete",
					null,
					"AQAAABgCAAAAAAAAGAIAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAGQIAAAAAAAAZAgAAAAAAAAAAAAAAAPC/"
				],
				[
					404,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAABgCAAAAAAAAGQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGAIAAAAAAAAYAgAAAAAAAAAAAAAAAPC/"
				],
				[
					405,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"insertTextFormat\":2,\"filterText\":\"from\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"fn from(..)\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"fn from(_: i32) -> Self {\\n    $0\\n}\",\"range\":{\"end\":{\"character\":8,\"line\":35},\"start\":{\"character\":4,\"line\":35}}},\"documentation\":{\"value\":\"Performs the conversion.\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							282,
							404,
							1
						],
						"trigger": "from"
					},
					"AgAAABUCAAAAAAAAFQIAAAAAAAAEAAAAZm4gZhUCAAAAAAAAPQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQIAAAAAAAAZAgAAAAAAAAAAAAAAAPC/"
				],
				[
					410,
					1,
					"insert",
					{
						"characters": "integer"
					},
					"BwAAAB4CAAAAAAAAHwIAAAAAAAAAAAAAHwIAAAAAAAAgAgAAAAAAAAAAAAAgAgAAAAAAACECAAAAAAAAAAAAACECAAAAAAAAIgIAAAAAAAAAAAAAIgIAAAAAAAAjAgAAAAAAAAAAAAAjAgAAAAAAACQCAAAAAAAAAAAAACQCAAAAAAAAJQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgIAAAAAAAAeAgAAAAAAAAAAAAAAAPC/"
				],
				[
					416,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAB0CAAAAAAAAHQIAAAAAAAAIAAAAX2ludGVnZXI",
					"AQAAAAAAAAABAAAAJQIAAAAAAAAlAgAAAAAAAAAAAAAAQHBA"
				],
				[
					417,
					1,
					"insert",
					{
						"characters": "_int"
					},
					"BAAAAB0CAAAAAAAAHgIAAAAAAAAAAAAAHgIAAAAAAAAfAgAAAAAAAAAAAAAfAgAAAAAAACACAAAAAAAAAAAAACACAAAAAAAAIQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHQIAAAAAAAAdAgAAAAAAAAAAAAAAAPC/"
				],
				[
					419,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAADoCAAAAAAAAPgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgIAAAAAAAA6AgAAAAAAAAAAAAAAAGpA"
				],
				[
					420,
					1,
					"left_delete",
					null,
					"AQAAADoCAAAAAAAAOgIAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAPgIAAAAAAAA+AgAAAAAAAAAAAAAAAPC/"
				],
				[
					437,
					1,
					"insert",
					{
						"characters": "Bo"
					},
					"AgAAADoCAAAAAAAAOwIAAAAAAAAAAAAAOwIAAAAAAAA8AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgIAAAAAAAA6AgAAAAAAAAAAAAAAAPC/"
				],
				[
					438,
					2,
					"left_delete",
					null,
					"AgAAADsCAAAAAAAAOwIAAAAAAAABAAAAbzoCAAAAAAAAOgIAAAAAAAABAAAAQg",
					"AQAAAAAAAAABAAAAPAIAAAAAAAA8AgAAAAAAAAAAAAAAAPC/"
				],
				[
					439,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAADoCAAAAAAAAOwIAAAAAAAAAAAAAOwIAAAAAAAA8AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgIAAAAAAAA6AgAAAAAAAAAAAAAAAPC/"
				],
				[
					440,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADwCAAAAAAAAPQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAIAAAAAAAA8AgAAAAAAAAAAAAAAAPC/"
				],
				[
					441,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_int\",\"preselect\":true,\"detail\":\"i32\",\"sortText\":\"fffffffc\",\"label\":\"_int\",\"additionalTextEdits\":[],\"deprecated\":false,\"textEdit\":{\"newText\":\"_int\",\"range\":{\"end\":{\"character\":11,\"line\":36},\"start\":{\"character\":11,\"line\":36}}},\"kind\":6},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": true,
						"query_change_id":
						[
							311,
							440,
							1
						],
						"trigger": "_int"
					},
					"AQAAAD0CAAAAAAAAQQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQIAAAAAAAA9AgAAAAAAAAAAAAAAAPC/"
				],
				[
					442,
					1,
					"insert",
					{
						"characters": " ."
					},
					"AgAAAEECAAAAAAAAQgIAAAAAAAAAAAAAQgIAAAAAAABDAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQIAAAAAAABBAgAAAAAAAAAAAAAAAPC/"
				],
				[
					443,
					1,
					"left_delete",
					null,
					"AQAAAEICAAAAAAAAQgIAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAQwIAAAAAAABDAgAAAAAAAAAAAAAAAPC/"
				],
				[
					444,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAEICAAAAAAAAQwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgIAAAAAAABCAgAAAAAAAAAAAAAAAPC/"
				],
				[
					445,
					1,
					"insert",
					{
						"characters": " 0-"
					},
					"AwAAAEMCAAAAAAAARAIAAAAAAAAAAAAARAIAAAAAAABFAgAAAAAAAAAAAABFAgAAAAAAAEYCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwIAAAAAAABDAgAAAAAAAAAAAAAAAPC/"
				],
				[
					446,
					1,
					"left_delete",
					null,
					"AQAAAEUCAAAAAAAARQIAAAAAAAABAAAALQ",
					"AQAAAAAAAAABAAAARgIAAAAAAABGAgAAAAAAAAAAAAAAAPC/"
				],
				[
					447,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEUCAAAAAAAARgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQIAAAAAAABFAgAAAAAAAAAAAAAAAPC/"
				],
				[
					448,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAEYCAAAAAAAASAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARgIAAAAAAABGAgAAAAAAAAAAAAAAAPC/"
				],
				[
					453,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAEcCAAAAAAAASAIAAAAAAAAAAAAASAIAAAAAAABQAgAAAAAAAAAAAABQAgAAAAAAAFECAAAAAAAAAAAAAFECAAAAAAAAWQIAAAAAAAAAAAAASAIAAAAAAABIAgAAAAAAAAgAAAAgICAgICAgIEgCAAAAAAAAVAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARwIAAAAAAABHAgAAAAAAAAAAAAAAAPC/"
				],
				[
					454,
					1,
					"insert",
					{
						"characters": "Bool"
					},
					"BAAAAFQCAAAAAAAAVQIAAAAAAAAAAAAAVQIAAAAAAABWAgAAAAAAAAAAAABWAgAAAAAAAFcCAAAAAAAAAAAAAFcCAAAAAAAAWAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVAIAAAAAAABUAgAAAAAAAAAAAAAAAPC/"
				],
				[
					455,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFgCAAAAAAAAWQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWAIAAAAAAABYAgAAAAAAAAAAAAAAAPC/"
				],
				[
					456,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAFkCAAAAAAAAWwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQIAAAAAAABZAgAAAAAAAAAAAAAAAPC/"
				],
				[
					457,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAFoCAAAAAAAAWwIAAAAAAAAAAAAAWwIAAAAAAABnAgAAAAAAAAAAAABnAgAAAAAAAGgCAAAAAAAAAAAAAGgCAAAAAAAAdAIAAAAAAAAAAAAAWwIAAAAAAABbAgAAAAAAAAwAAAAgICAgICAgICAgICBbAgAAAAAAAGsCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgIAAAAAAABaAgAAAAAAAAAAAAAAAPC/"
				],
				[
					458,
					1,
					"insert",
					{
						"characters": "_bo"
					},
					"AwAAAGsCAAAAAAAAbAIAAAAAAAAAAAAAbAIAAAAAAABtAgAAAAAAAAAAAABtAgAAAAAAAG4CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawIAAAAAAABrAgAAAAAAAAAAAAAAAPC/"
				],
				[
					459,
					1,
					"left_delete",
					null,
					"AQAAAG0CAAAAAAAAbQIAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAbgIAAAAAAABuAgAAAAAAAAAAAAAAAPC/"
				],
				[
					460,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_bool\",\"additionalTextEdits\":[],\"detail\":\"bool\",\"deprecated\":false,\"label\":\"_bool\",\"sortText\":\"fffffffa\",\"textEdit\":{\"newText\":\"_bool\",\"range\":{\"end\":{\"character\":18,\"line\":38},\"start\":{\"character\":16,\"line\":38}}},\"kind\":5},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							328,
							459,
							1
						],
						"trigger": "_bool"
					},
					"AgAAAGsCAAAAAAAAawIAAAAAAAACAAAAX2JrAgAAAAAAAHACAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQIAAAAAAABtAgAAAAAAAAAAAAAAAPC/"
				],
				[
					461,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAHACAAAAAAAAcQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAIAAAAAAABwAgAAAAAAAAAAAAAAAPC/"
				],
				[
					462,
					1,
					"insert",
					{
						"characters": " true"
					},
					"BQAAAHECAAAAAAAAcgIAAAAAAAAAAAAAcgIAAAAAAABzAgAAAAAAAAAAAABzAgAAAAAAAHQCAAAAAAAAAAAAAHQCAAAAAAAAdQIAAAAAAAAAAAAAdQIAAAAAAAB2AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQIAAAAAAABxAgAAAAAAAAAAAAAAAPC/"
				],
				[
					465,
					1,
					"insert",
					{
						"characters": " else"
					},
					"BQAAAI4CAAAAAAAAjwIAAAAAAAAAAAAAjwIAAAAAAACQAgAAAAAAAAAAAACQAgAAAAAAAJECAAAAAAAAAAAAAJECAAAAAAAAkgIAAAAAAAAAAAAAkgIAAAAAAACTAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgIAAAAAAACOAgAAAAAAAAAAAAAA8HVA"
				],
				[
					466,
					1,
					"insert",
					{
						"characters": " A"
					},
					"AgAAAJMCAAAAAAAAlAIAAAAAAAAAAAAAlAIAAAAAAACVAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwIAAAAAAACTAgAAAAAAAAAAAAAAAPC/"
				],
				[
					467,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJUCAAAAAAAAlwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQIAAAAAAACVAgAAAAAAAAAAAAAAAPC/"
				],
				[
					468,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAJUCAAAAAAAAlQIAAAAAAAABAAAAe5UCAAAAAAAAlQIAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAlgIAAAAAAACWAgAAAAAAAAAAAAAAAPC/"
				],
				[
					469,
					1,
					"left_delete",
					null,
					"AQAAAJQCAAAAAAAAlAIAAAAAAAABAAAAQQ",
					"AQAAAAAAAAABAAAAlQIAAAAAAACVAgAAAAAAAAAAAAAAAPC/"
				],
				[
					470,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJQCAAAAAAAAlgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAIAAAAAAACUAgAAAAAAAAAAAAAAAPC/"
				],
				[
					471,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAJUCAAAAAAAAlgIAAAAAAAAAAAAAlgIAAAAAAACeAgAAAAAAAAAAAACeAgAAAAAAAJ8CAAAAAAAAAAAAAJ8CAAAAAAAApwIAAAAAAAAAAAAAlgIAAAAAAACWAgAAAAAAAAgAAAAgICAgICAgIJYCAAAAAAAAogIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQIAAAAAAACVAgAAAAAAAAAAAAAAAPC/"
				],
				[
					478,
					2,
					"left_delete",
					null,
					"AgAAAI8CAAAAAAAAjwIAAAAAAAAdAAAAZWxzZSB7CiAgICAgICAgICAgIAogICAgICAgIH2OAgAAAAAAAI4CAAAAAAAAAQAAACA",
					"AQAAAAAAAAABAAAArAIAAAAAAACPAgAAAAAAAAAAAAAAAPC/"
				],
				[
					479,
					1,
					"insert",
					{
						"characters": "\nbool"
					},
					"BgAAAI4CAAAAAAAAjwIAAAAAAAAAAAAAjwIAAAAAAACXAgAAAAAAAAAAAACXAgAAAAAAAJgCAAAAAAAAAAAAAJgCAAAAAAAAmQIAAAAAAAAAAAAAmQIAAAAAAACaAgAAAAAAAAAAAACaAgAAAAAAAJsCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgIAAAAAAACOAgAAAAAAAAAAAAAAAPC/"
				],
				[
					480,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJsCAAAAAAAAnAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmwIAAAAAAACbAgAAAAAAAAAAAAAAAPC/"
				],
				[
					481,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJwCAAAAAAAAngIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAIAAAAAAACcAgAAAAAAAAAAAAAAAPC/"
				],
				[
					485,
					1,
					"insert",
					{
						"characters": "B"
					},
					"AQAAAJcCAAAAAAAAmAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwIAAAAAAACXAgAAAAAAAAAAAAAAAPC/"
				],
				[
					486,
					1,
					"right_delete",
					null,
					"AQAAAJgCAAAAAAAAmAIAAAAAAAABAAAAYg",
					"AQAAAAAAAAABAAAAmAIAAAAAAACYAgAAAAAAAAAAAAAAAPC/"
				],
				[
					489,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAJ0CAAAAAAAAngIAAAAAAAAAAAAAngIAAAAAAACmAgAAAAAAAAAAAACmAgAAAAAAAKcCAAAAAAAAAAAAAKcCAAAAAAAArwIAAAAAAAAAAAAAngIAAAAAAACeAgAAAAAAAAgAAAAgICAgICAgIJ4CAAAAAAAAqgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQIAAAAAAACdAgAAAAAAAAAAAAAAAPC/"
				],
				[
					490,
					1,
					"insert",
					{
						"characters": "_bol"
					},
					"BAAAAKoCAAAAAAAAqwIAAAAAAAAAAAAAqwIAAAAAAACsAgAAAAAAAAAAAACsAgAAAAAAAK0CAAAAAAAAAAAAAK0CAAAAAAAArgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqgIAAAAAAACqAgAAAAAAAAAAAAAAAPC/"
				],
				[
					491,
					1,
					"left_delete",
					null,
					"AQAAAK0CAAAAAAAArQIAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAArgIAAAAAAACuAgAAAAAAAAAAAAAAAPC/"
				],
				[
					492,
					1,
					"insert",
					{
						"characters": "ol:"
					},
					"AwAAAK0CAAAAAAAArgIAAAAAAAAAAAAArgIAAAAAAACvAgAAAAAAAAAAAACvAgAAAAAAALACAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQIAAAAAAACtAgAAAAAAAAAAAAAAAPC/"
				],
				[
					493,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAALACAAAAAAAAsgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsAIAAAAAAACwAgAAAAAAAAAAAAAAAPC/"
				],
				[
					494,
					1,
					"left_delete",
					null,
					"AQAAALACAAAAAAAAsAIAAAAAAAABAAAAIg",
					"AQAAAAAAAAABAAAAsQIAAAAAAACxAgAAAAAAAAAAAAAAAPC/"
				],
				[
					495,
					1,
					"insert",
					{
						"characters": " false\\"
					},
					"BwAAALACAAAAAAAAsQIAAAAAAAAAAAAAsQIAAAAAAACyAgAAAAAAAAAAAACyAgAAAAAAALMCAAAAAAAAAAAAALMCAAAAAAAAtAIAAAAAAAAAAAAAtAIAAAAAAAC1AgAAAAAAAAAAAAC1AgAAAAAAALYCAAAAAAAAAAAAALYCAAAAAAAAtwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsAIAAAAAAACwAgAAAAAAAAAAAAAAAPC/"
				],
				[
					497,
					2,
					"right_delete",
					null,
					"AgAAALYCAAAAAAAAtgIAAAAAAAABAAAAXLYCAAAAAAAAtgIAAAAAAAABAAAAIg",
					"AQAAAAAAAAABAAAAtgIAAAAAAAC2AgAAAAAAAAAAAAAAAPC/"
				],
				[
					519,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAFQCAAAAAAAAVQIAAAAAAAAAAAAAVQIAAAAAAABWAgAAAAAAAAAAAABWAgAAAAAAAFcCAAAAAAAAAAAAAFcCAAAAAAAAWAIAAAAAAAAAAAAAWAIAAAAAAABZAgAAAAAAAAAAAABZAgAAAAAAAFoCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVAIAAAAAAABUAgAAAAAAAAAAAAAAAPC/"
				],
				[
					520,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFoCAAAAAAAAWwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgIAAAAAAABaAgAAAAAAAAAAAAAAAPC/"
				],
				[
					551,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMADAAAAAAAAwQMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwAMAAAAAAADAAwAAAAAAAAAAAAAAACpA"
				],
				[
					553,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAE4EAAAAAAAATwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATgQAAAAAAABOBAAAAAAAAAAAAAAAAPC/"
				],
				[
					563,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAANACAAAAAAAA0QIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0AIAAAAAAADQAgAAAAAAAAAAAAAAAPC/"
				],
				[
					573,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAPYBAAAAAAAA9wEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9gEAAAAAAAD2AQAAAAAAAAAAAAAAAPC/"
				],
				[
					579,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAIMBAAAAAAAAhAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwEAAAAAAACDAQAAAAAAAAAAAAAAAPC/"
				],
				[
					588,
					1,
					"insert",
					{
						"characters": "\n\nimlp"
					},
					"BgAAAOMEAAAAAAAA5AQAAAAAAAAAAAAA5AQAAAAAAADlBAAAAAAAAAAAAADlBAAAAAAAAOYEAAAAAAAAAAAAAOYEAAAAAAAA5wQAAAAAAAAAAAAA5wQAAAAAAADoBAAAAAAAAAAAAADoBAAAAAAAAOkEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4wQAAAAAAADjBAAAAAAAAAAAAAAAAPC/"
				],
				[
					589,
					2,
					"left_delete",
					null,
					"AgAAAOgEAAAAAAAA6AQAAAAAAAABAAAAcOcEAAAAAAAA5wQAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAA6QQAAAAAAADpBAAAAAAAAAAAAAAAAPC/"
				],
				[
					590,
					1,
					"insert",
					{
						"characters": "pl"
					},
					"AgAAAOcEAAAAAAAA6AQAAAAAAAAAAAAA6AQAAAAAAADpBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5wQAAAAAAADnBAAAAAAAAAAAAAAAAPC/"
				],
				[
					591,
					1,
					"insert",
					{
						"characters": " par"
					},
					"BAAAAOkEAAAAAAAA6gQAAAAAAAAAAAAA6gQAAAAAAADrBAAAAAAAAAAAAADrBAAAAAAAAOwEAAAAAAAAAAAAAOwEAAAAAAAA7QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6QQAAAAAAADpBAAAAAAAAAAAAAAAAPC/"
				],
				[
					592,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"PartialEq\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"PartialEq\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"PartialEq\",\"range\":{\"end\":{\"character\":8,\"line\":79},\"start\":{\"character\":5,\"line\":79}}},\"documentation\":{\"value\":\"Trait for equality comparisons which are [partial equivalence\\nrelations](https://en.wikipedia.org/wiki/Partial_equivalence_relation).\\n\\n`x.eq(y)` can also be written `x == y`, and `x.ne(y)` can be written `x != y`.\\nWe use the easier-to-read infix notation in the remainder of this documentation.\\n\\nThis trait allows for partial equality, for types that do not have a full\\nequivalence relation. For example, in floating point numbers `NaN != NaN`,\\nso floating point types implement `PartialEq` but not [`trait@Eq`].\\n\\nImplementations must ensure that `eq` and `ne` are consistent with each other:\\n\\n- `a != b` if and only if `!(a == b)`\\n  (ensured by the default implementation).\\n\\nIf [`PartialOrd`] or [`Ord`] are also implemented for `Self` and `Rhs`, their methods must also\\nbe consistent with `PartialEq` (see the documentation of those traits for the exact\\nrequirements). It's easy to accidentally make them disagree by deriving some of the traits and\\nmanually implementing others.\\n\\nThe equality relation `==` must satisfy the following conditions\\n(for all `a`, `b`, `c` of type `A`, `B`, `C`):\\n\\n- **Symmetric**: if `A: PartialEq<B>` and `B: PartialEq<A>`, then **`a == b`\\n  implies `b == a`**; and\\n\\n- **Transitive**: if `A: PartialEq<B>` and `B: PartialEq<C>` and `A:\\n  PartialEq<C>`, then **`a == b` and `b == c` implies `a == c`**.\\n\\nNote that the `B: PartialEq<A>` (symmetric) and `A: PartialEq<C>`\\n(transitive) impls are not forced to exist, but these requirements apply\\nwhenever they do exist.\\n\\n## Derivable\\n\\nThis trait can be used with `#[derive]`. When `derive`d on structs, two\\ninstances are equal if all fields are equal, and not equal if any fields\\nare not equal. When `derive`d on enums, each variant is equal to itself\\nand not equal to the other variants.\\n\\n## How can I implement `PartialEq`?\\n\\nAn example implementation for a domain in which two books are considered\\nthe same book if their ISBN matches, even if the formats differ:\\n\\n```rust\\nenum BookFormat {\\n    Paperback,\\n    Hardback,\\n    Ebook,\\n}\\n\\nstruct Book {\\n    isbn: i32,\\n    format: BookFormat,\\n}\\n\\nimpl PartialEq for Book {\\n    fn eq(&self, other: &Self) -> bool {\\n        self.isbn == other.isbn\\n    }\\n}\\n\\nlet b1 = Book { isbn: 3, format: BookFormat::Paperback };\\nlet b2 = Book { isbn: 3, format: BookFormat::Ebook };\\nlet b3 = Book { isbn: 10, format: BookFormat::Paperback };\\n\\nassert!(b1 == b2);\\nassert!(b1 != b3);\\n```\\n\\n## How can I compare two different types?\\n\\nThe type you can compare with is controlled by `PartialEq`'s type parameter.\\nFor example, let's tweak our previous code a bit:\\n\\n```rust\\n// The derive implements <BookFormat> == <BookFormat> comparisons\\n#[derive(PartialEq)]\\nenum BookFormat {\\n    Paperback,\\n    Hardback,\\n    Ebook,\\n}\\n\\nstruct Book {\\n    isbn: i32,\\n    format: BookFormat,\\n}\\n\\n// Implement <Book> == <BookFormat> comparisons\\nimpl PartialEq<BookFormat> for Book {\\n    fn eq(&self, other: &BookFormat) -> bool {\\n        self.format == *other\\n    }\\n}\\n\\n// Implement <BookFormat> == <Book> comparisons\\nimpl PartialEq<Book> for BookFormat {\\n    fn eq(&self, other: &Book) -> bool {\\n        *self == other.format\\n    }\\n}\\n\\nlet b1 = Book { isbn: 3, format: BookFormat::Paperback };\\n\\nassert!(b1 == BookFormat::Paperback);\\nassert!(BookFormat::Ebook != b1);\\n```\\n\\nBy changing `impl PartialEq for Book` to `impl PartialEq<BookFormat> for Book`,\\nwe allow `BookFormat`s to be compared with `Book`s.\\n\\nA comparison like the one above, which ignores some fields of the struct,\\ncan be dangerous. It can easily lead to an unintended violation of the\\nrequirements for a partial equivalence relation. For example, if we kept\\nthe above implementation of `PartialEq<Book>` for `BookFormat` and added an\\nimplementation of `PartialEq<Book>` for `Book` (either via a `#[derive]` or\\nvia the manual implementation from the first example) then the result would\\nviolate transitivity:\\n\\n```rust\\n#[derive(PartialEq)]\\nenum BookFormat {\\n    Paperback,\\n    Hardback,\\n    Ebook,\\n}\\n\\n#[derive(PartialEq)]\\nstruct Book {\\n    isbn: i32,\\n    format: BookFormat,\\n}\\n\\nimpl PartialEq<BookFormat> for Book {\\n    fn eq(&self, other: &BookFormat) -> bool {\\n        self.format == *other\\n    }\\n}\\n\\nimpl PartialEq<Book> for BookFormat {\\n    fn eq(&self, other: &Book) -> bool {\\n        *self == other.format\\n    }\\n}\\n\\nfn main() {\\n    let b1 = Book { isbn: 1, format: BookFormat::Paperback };\\n    let b2 = Book { isbn: 2, format: BookFormat::Paperback };\\n\\n    assert!(b1 == BookFormat::Paperback);\\n    assert!(BookFormat::Paperback == b2);\\n\\n    // The following should hold by transitivity but doesn't.\\n    assert!(b1 == b2); // <-- PANICS\\n}\\n```\\n\\n# Examples\\n\\n```rust\\nlet x: u32 = 0;\\nlet y: u32 = 1;\\n\\nassert_eq!(x == y, false);\\nassert_eq!(x.eq(&y), false);\\n```\\n\\n[`eq`]: PartialEq::eq\\n[`ne`]: PartialEq::ne\",\"kind\":\"markdown\"},\"kind\":8},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							413,
							591,
							4
						],
						"trigger": "PartialEq"
					},
					"AgAAAOoEAAAAAAAA6gQAAAAAAAADAAAAcGFy6gQAAAAAAADzBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7QQAAAAAAADtBAAAAAAAAAAAAAAAAPC/"
				],
				[
					593,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAAPMEAAAAAAAA9AQAAAAAAAAAAAAA9AQAAAAAAAD1BAAAAAAAAAAAAAD1BAAAAAAAAPYEAAAAAAAAAAAAAPYEAAAAAAAA9wQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8wQAAAAAAADzBAAAAAAAAAAAAAAAAPC/"
				],
				[
					594,
					1,
					"insert",
					{
						"characters": " Bo"
					},
					"AwAAAPcEAAAAAAAA+AQAAAAAAAAAAAAA+AQAAAAAAAD5BAAAAAAAAAAAAAD5BAAAAAAAAPoEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9wQAAAAAAAD3BAAAAAAAAAAAAAAAAPC/"
				],
				[
					595,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"Bool\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"Bool\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"Bool\",\"range\":{\"end\":{\"character\":21,\"line\":79},\"start\":{\"character\":19,\"line\":79}}},\"documentation\":{\"value\":\"Bool structure for True and False\",\"kind\":\"markdown\"},\"kind\":22},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							416,
							594,
							3
						],
						"trigger": "Bool"
					},
					"AgAAAPgEAAAAAAAA+AQAAAAAAAACAAAAQm/4BAAAAAAAAPwEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+gQAAAAAAAD6BAAAAAAAAAAAAAAAAPC/"
				],
				[
					596,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPwEAAAAAAAA/QQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/AQAAAAAAAD8BAAAAAAAAAAAAAAAAPC/"
				],
				[
					597,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAP0EAAAAAAAA/wQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/QQAAAAAAAD9BAAAAAAAAAAAAAAAAPC/"
				],
				[
					598,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAP4EAAAAAAAA/wQAAAAAAAAAAAAA/wQAAAAAAAAABQAAAAAAAAAAAAD/BAAAAAAAAAMFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gQAAAAAAAD+BAAAAAAAAAAAAAAAAPC/"
				],
				[
					599,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAAMFAAAAAAAABAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwUAAAAAAAADBQAAAAAAAAAAAAAAAPC/"
				],
				[
					600,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAAQFAAAAAAAABQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAUAAAAAAAAEBQAAAAAAAAAAAAAAAPC/"
				],
				[
					601,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAUFAAAAAAAABgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQUAAAAAAAAFBQAAAAAAAAAAAAAAAPC/"
				],
				[
					602,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"insertTextFormat\":2,\"filterText\":\"eq\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"fn eq(..)\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"fn eq(&self, other: &Self) -> bool {\\n    $0\\n}\",\"range\":{\"end\":{\"character\":7,\"line\":80},\"start\":{\"character\":4,\"line\":80}}},\"documentation\":{\"value\":\"This method tests for `self` and `other` values to be equal, and is used\\nby `==`.\",\"kind\":\"markdown\"},\"kind\":2},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": true,
						"query_change_id":
						[
							423,
							601,
							1
						],
						"trigger": "eq"
					},
					"AgAAAAMFAAAAAAAAAwUAAAAAAAADAAAAZm4gAwUAAAAAAAA2BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgUAAAAAAAAGBQAAAAAAAAAAAAAAAPC/"
				],
				[
					604,
					1,
					"insert",
					{
						"characters": "\n\nfn"
					},
					"BwAAADYFAAAAAAAANwUAAAAAAAAAAAAANwUAAAAAAAA7BQAAAAAAAAAAAAA7BQAAAAAAADwFAAAAAAAAAAAAADwFAAAAAAAAQAUAAAAAAAAAAAAANwUAAAAAAAA3BQAAAAAAAAQAAAAgICAgPAUAAAAAAAA9BQAAAAAAAAAAAAA9BQAAAAAAAD4FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANgUAAAAAAAA2BQAAAAAAAAAAAAAAAFpA"
				],
				[
					605,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAD4FAAAAAAAAPwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPgUAAAAAAAA+BQAAAAAAAAAAAAAAAPC/"
				],
				[
					608,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"insertTextFormat\":2,\"filterText\":\"ne\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"fn ne(..)\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"fn ne(&self, other: &Self) -> bool {\\n    $0\\n}\",\"range\":{\"end\":{\"character\":7,\"line\":84},\"start\":{\"character\":4,\"line\":84}}},\"documentation\":{\"value\":\"This method tests for `!=`.\",\"kind\":\"markdown\"},\"kind\":2},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": true,
						"query_change_id":
						[
							427,
							605,
							1
						],
						"trigger": "ne"
					},
					"AgAAADwFAAAAAAAAPAUAAAAAAAADAAAAZm4gPAUAAAAAAABvBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwUAAAAAAAA/BQAAAAAAAAAAAAAAAPC/"
				],
				[
					614,
					1,
					"trim_trailing_white_space",
					null,
					"AQAAACgFAAAAAAAAKAUAAAAAAAAIAAAAICAgICAgICA",
					"AQAAAAAAAAABAAAAaQUAAAAAAABpBQAAAAAAAAAAAAAAAFpA"
				],
				[
					621,
					1,
					"reindent",
					null,
					"AQAAACgFAAAAAAAAMAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAUAAAAAAAAoBQAAAAAAAAAAAAAAAPC/"
				],
				[
					622,
					1,
					"insert",
					{
						"characters": "self."
					},
					"BQAAADAFAAAAAAAAMQUAAAAAAAAAAAAAMQUAAAAAAAAyBQAAAAAAAAAAAAAyBQAAAAAAADMFAAAAAAAAAAAAADMFAAAAAAAANAUAAAAAAAAAAAAANAUAAAAAAAA1BQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAUAAAAAAAAwBQAAAAAAAAAAAAAAAPC/"
				],
				[
					623,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_bool\",\"preselect\":true,\"detail\":\"bool\",\"sortText\":\"fffffff9\",\"label\":\"_bool\",\"additionalTextEdits\":[],\"deprecated\":false,\"textEdit\":{\"newText\":\"_bool\",\"range\":{\"end\":{\"character\":13,\"line\":81},\"start\":{\"character\":13,\"line\":81}}},\"kind\":5},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": true,
						"query_change_id":
						[
							436,
							622,
							5
						],
						"trigger": "_bool"
					},
					"AQAAADUFAAAAAAAAOgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANQUAAAAAAAA1BQAAAAAAAAAAAAAAAPC/"
				],
				[
					624,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAADoFAAAAAAAAOwUAAAAAAAAAAAAAOwUAAAAAAAA8BQAAAAAAAAAAAAA8BQAAAAAAAD0FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgUAAAAAAAA6BQAAAAAAAAAAAAAAAPC/"
				],
				[
					625,
					1,
					"insert",
					{
						"characters": " other._"
					},
					"CAAAAD0FAAAAAAAAPgUAAAAAAAAAAAAAPgUAAAAAAAA/BQAAAAAAAAAAAAA/BQAAAAAAAEAFAAAAAAAAAAAAAEAFAAAAAAAAQQUAAAAAAAAAAAAAQQUAAAAAAABCBQAAAAAAAAAAAABCBQAAAAAAAEMFAAAAAAAAAAAAAEMFAAAAAAAARAUAAAAAAAAAAAAARAUAAAAAAABFBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQUAAAAAAAA9BQAAAAAAAAAAAAAAAPC/"
				],
				[
					626,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_bool\",\"preselect\":true,\"detail\":\"bool\",\"sortText\":\"fffffff9\",\"label\":\"_bool\",\"additionalTextEdits\":[],\"deprecated\":false,\"textEdit\":{\"newText\":\"_bool\",\"range\":{\"end\":{\"character\":29,\"line\":81},\"start\":{\"character\":28,\"line\":81}}},\"kind\":5},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							439,
							625,
							8
						],
						"trigger": "_bool"
					},
					"AgAAAEQFAAAAAAAARAUAAAAAAAABAAAAX0QFAAAAAAAASQUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQUAAAAAAABFBQAAAAAAAAAAAAAAAPC/"
				],
				[
					629,
					1,
					"paste",
					null,
					"AQAAAHoFAAAAAAAAnAUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggUAAAAAAACCBQAAAAAAAAAAAAAA0HpA"
				],
				[
					633,
					1,
					"left_delete",
					null,
					"AQAAAI0FAAAAAAAAjQUAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAjgUAAAAAAACOBQAAAAAAAAAAAAAAAPC/"
				],
				[
					634,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAAI0FAAAAAAAAjgUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQUAAAAAAACNBQAAAAAAAAAAAAAAAPC/"
				],
				[
					640,
					1,
					"trim_trailing_white_space",
					null,
					"AQAAAJwFAAAAAAAAnAUAAAAAAAAIAAAAICAgICAgICA",
					"AQAAAAAAAAABAAAAZQUAAAAAAABlBQAAAAAAAAAAAAAAQHBA"
				],
				[
					647,
					1,
					"left_delete",
					null,
					"AQAAAJsFAAAAAAAAmwUAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAnAUAAAAAAACcBQAAAAAAAAAAAAAAAPC/"
				],
				[
					653,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAKMFAAAAAAAApAUAAAAAAAAAAAAApAUAAAAAAAClBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowUAAAAAAACjBQAAAAAAAAAAAAAAAPC/"
				],
				[
					654,
					1,
					"paste",
					null,
					"AQAAAKUFAAAAAAAAYwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQUAAAAAAAClBQAAAAAAAAAAAAAAAPC/"
				],
				[
					658,
					1,
					"insert",
					{
						"characters": "<bool>"
					},
					"BgAAALMFAAAAAAAAtAUAAAAAAAAAAAAAtAUAAAAAAAC1BQAAAAAAAAAAAAC1BQAAAAAAALYFAAAAAAAAAAAAALYFAAAAAAAAtwUAAAAAAAAAAAAAtwUAAAAAAAC4BQAAAAAAAAAAAAC4BQAAAAAAALkFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAswUAAAAAAACzBQAAAAAAAAAAAAAAAPC/"
				],
				[
					671,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAN4FAAAAAAAA3gUAAAAAAAAEAAAAU2VsZg",
					"AQAAAAAAAAABAAAA4gUAAAAAAADiBQAAAAAAAAAAAAAAAPC/"
				],
				[
					672,
					1,
					"left_delete",
					null,
					"AQAAAN0FAAAAAAAA3QUAAAAAAAABAAAAJg",
					"AQAAAAAAAAABAAAA3gUAAAAAAADeBQAAAAAAAAAAAAAAAPC/"
				],
				[
					673,
					1,
					"insert",
					{
						"characters": "bool"
					},
					"BAAAAN0FAAAAAAAA3gUAAAAAAAAAAAAA3gUAAAAAAADfBQAAAAAAAAAAAADfBQAAAAAAAOAFAAAAAAAAAAAAAOAFAAAAAAAA4QUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QUAAAAAAADdBQAAAAAAAAAAAAAAAPC/"
				],
				[
					676,
					1,
					"right_delete",
					null,
					"AQAAAAgGAAAAAAAACAYAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAACAYAAAAAAAAIBgAAAAAAAAAAAAAAAPC/"
				],
				[
					677,
					1,
					"delete_word",
					{
						"forward": true
					},
					"AQAAAAgGAAAAAAAACAYAAAAAAAAFAAAAX2Jvb2w",
					"AQAAAAAAAAABAAAACAYAAAAAAAAIBgAAAAAAAAAAAAAAAPC/"
				],
				[
					680,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAACkGAAAAAAAAKQYAAAAAAAAEAAAAU2VsZigGAAAAAAAAKAYAAAAAAAABAAAAJg",
					"AQAAAAAAAAABAAAALQYAAAAAAAAtBgAAAAAAAAAAAAAAAPC/"
				],
				[
					681,
					1,
					"insert",
					{
						"characters": "bookl"
					},
					"BQAAACgGAAAAAAAAKQYAAAAAAAAAAAAAKQYAAAAAAAAqBgAAAAAAAAAAAAAqBgAAAAAAACsGAAAAAAAAAAAAACsGAAAAAAAALAYAAAAAAAAAAAAALAYAAAAAAAAtBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAYAAAAAAAAoBgAAAAAAAAAAAAAAAPC/"
				],
				[
					683,
					1,
					"left_delete",
					null,
					"AQAAACwGAAAAAAAALAYAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAALQYAAAAAAAAtBgAAAAAAAAAAAAAAAPC/"
				],
				[
					684,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAACwGAAAAAAAALQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAYAAAAAAAAsBgAAAAAAAAAAAAAAAPC/"
				],
				[
					685,
					1,
					"left_delete",
					null,
					"AQAAACwGAAAAAAAALAYAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAALQYAAAAAAAAtBgAAAAAAAAAAAAAAAPC/"
				],
				[
					686,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAACwGAAAAAAAALQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAYAAAAAAAAsBgAAAAAAAAAAAAAAAPC/"
				],
				[
					687,
					2,
					"left_delete",
					null,
					"AgAAACwGAAAAAAAALAYAAAAAAAABAAAAbCsGAAAAAAAAKwYAAAAAAAABAAAAaw",
					"AQAAAAAAAAABAAAALQYAAAAAAAAtBgAAAAAAAAAAAAAAAPC/"
				],
				[
					688,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAACsGAAAAAAAALAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwYAAAAAAAArBgAAAAAAAAAAAAAAAPC/"
				],
				[
					693,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAAFQGAAAAAAAAVAYAAAAAAAAFAAAAX2Jvb2xTBgAAAAAAAFMGAAAAAAAAAQAAAC4",
					"AQAAAAAAAAABAAAAWQYAAAAAAABZBgAAAAAAAP///////+9/"
				],
				[
					718,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAN0FAAAAAAAA3gUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QUAAAAAAADdBQAAAAAAAAAAAAAAAPC/"
				],
				[
					721,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAACkGAAAAAAAAKgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQYAAAAAAAApBgAAAAAAAAAAAAAAAPC/"
				],
				[
					732,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAAQGAAAAAAAABQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAYAAAAAAAAEBgAAAAAAAAAAAAAAAPC/"
				],
				[
					735,
					1,
					"insert",
					{
						"characters": "*"
					},
					"AQAAAFEGAAAAAAAAUgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQYAAAAAAABRBgAAAAAAAAAAAAAAAPC/"
				],
				[
					753,
					1,
					"insert",
					{
						"characters": "\n#"
					},
					"AgAAAH8AAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACBAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwAAAAAAAAB/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					754,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAIEAAAAAAAAAgwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgQAAAAAAAACBAAAAAAAAAAAAAAAAAPC/"
				],
				[
					755,
					1,
					"insert",
					{
						"characters": "de"
					},
					"AgAAAIIAAAAAAAAAgwAAAAAAAAAAAAAAgwAAAAAAAACEAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggAAAAAAAACCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					756,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"derive\",\"additionalTextEdits\":[],\"detail\":\"pub macro derive\",\"sortText\":\"fffffffd\",\"label\":\"derive\",\"deprecated\":false,\"textEdit\":{\"newText\":\"derive\",\"range\":{\"end\":{\"character\":4,\"line\":10},\"start\":{\"character\":2,\"line\":10}}},\"documentation\":{\"value\":\"Attribute macro used to apply derive macros.\\n\\nSee [the reference] for more info.\\n\\n[the reference]: ../../../reference/attributes/derive.html\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							526,
							755,
							2
						],
						"trigger": "derive"
					},
					"AgAAAIIAAAAAAAAAggAAAAAAAAACAAAAZGWCAAAAAAAAAIgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAAAAAAAAACEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					757,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIgAAAAAAAAAigAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAAAAAAAAACIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					758,
					1,
					"insert",
					{
						"characters": "Par"
					},
					"AwAAAIkAAAAAAAAAigAAAAAAAAAAAAAAigAAAAAAAACLAAAAAAAAAAAAAACLAAAAAAAAAIwAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQAAAAAAAACJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					759,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"PartialEq\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"PartialEq\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"PartialEq\",\"range\":{\"end\":{\"character\":12,\"line\":10},\"start\":{\"character\":9,\"line\":10}}},\"documentation\":{\"value\":\"Derive macro generating an impl of the trait `PartialEq`.\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							529,
							758,
							3
						],
						"trigger": "PartialEq"
					},
					"AgAAAIkAAAAAAAAAiQAAAAAAAAADAAAAUGFyiQAAAAAAAACSAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAAAAAAAAACMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					771,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"CAAAALcFAAAAAAAAugUAAAAAAAAAAAAAsQUAAAAAAAC0BQAAAAAAAAAAAACPBQAAAAAAAJIFAAAAAAAAAAAAAGYFAAAAAAAAaQUAAAAAAAAAAAAAXwUAAAAAAABiBQAAAAAAAAAAAAA9BQAAAAAAAEAFAAAAAAAAAAAAABQFAAAAAAAAFwUAAAAAAAAAAAAA+gQAAAAAAAD9BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAUAAAAAAAD5BAAAAAAAAAAAAAAAAPC/"
				],
				[
					785,
					1,
					"duplicate_line",
					null,
					"AQAAAJUAAAAAAAAAqgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAAAAAAAAACUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					787,
					1,
					"insert",
					{
						"characters": "<bool>"
					},
					"BgAAAKcAAAAAAAAAqAAAAAAAAAAAAAAAqAAAAAAAAACpAAAAAAAAAAAAAACpAAAAAAAAAKoAAAAAAAAAAAAAAKoAAAAAAAAAqwAAAAAAAAAAAAAAqwAAAAAAAACsAAAAAAAAAAAAAACsAAAAAAAAAK0AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApwAAAAAAAACnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					798,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAAKwAAAAAAAAArAAAAAAAAAABAAAAPqgAAAAAAAAAqAAAAAAAAAAEAAAAYm9vbA",
					"AQAAAAAAAAABAAAArQAAAAAAAACtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					799,
					1,
					"left_delete",
					null,
					"AQAAAKcAAAAAAAAApwAAAAAAAAABAAAAPA",
					"AQAAAAAAAAABAAAAqAAAAAAAAACoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					811,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKcAAAAAAAAAqQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApwAAAAAAAACnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					812,
					1,
					"insert",
					{
						"characters": "bool"
					},
					"BAAAAKgAAAAAAAAAqQAAAAAAAAAAAAAAqQAAAAAAAACqAAAAAAAAAAAAAACqAAAAAAAAAKsAAAAAAAAAAAAAAKsAAAAAAAAArAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqAAAAAAAAACoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					825,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"CAAAAKYGAAAAAAAAqQYAAAAAAAAAAAAAoAYAAAAAAACjBgAAAAAAAAAAAACDBgAAAAAAAIYGAAAAAAAAAAAAAFoGAAAAAAAAXQYAAAAAAAAAAAAAUwYAAAAAAABWBgAAAAAAAAAAAAA2BgAAAAAAADkGAAAAAAAAAAAAAA0GAAAAAAAAEAYAAAAAAAAAAAAA7QUAAAAAAADwBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApwYAAAAAAADtBQAAAAAAAAAAAAAAAPC/"
				],
				[
					837,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"CAAAALsGAAAAAAAAuwYAAAAAAAADAAAALy8gsgYAAAAAAACyBgAAAAAAAAMAAAAvLyCSBgAAAAAAAJIGAAAAAAAAAwAAAC8vIGYGAAAAAAAAZgYAAAAAAAADAAAALy8gXAYAAAAAAABcBgAAAAAAAAMAAAAvLyA8BgAAAAAAADwGAAAAAAAAAwAAAC8vIBAGAAAAAAAAEAYAAAAAAAADAAAALy8g7QUAAAAAAADtBQAAAAAAAAMAAAAvLyA",
					"AQAAAAAAAAABAAAAvwYAAAAAAADtBQAAAAAAAAAAAAAAAPC/"
				],
				[
					848,
					1,
					"cut",
					null,
					"AQAAAJUAAAAAAAAAlQAAAAAAAAAbAAAAI1tkZXJpdmUoUGFydGlhbEVxKGJvb2wpKV0K",
					"AQAAAAAAAAABAAAArwAAAAAAAACvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					859,
					2,
					"left_delete",
					null,
					"AgAAAPoEAAAAAAAA+gQAAAAAAADWAAAALy8gaW1wbCBQYXJ0aWFsRXEgZm9yIEJvb2wgewovLyAgICAgZm4gZXEoJnNlbGYsIG90aGVyOiAmU2VsZikgLT4gYm9vbCB7Ci8vICAgICAgICAgc2VsZi5fYm9vbCA9PSBvdGhlci5fYm9vbAovLyAgICAgfQoKLy8gICAgIGZuIG5lKCZzZWxmLCBvdGhlcjogJlNlbGYpIC0+IGJvb2wgewovLyAgICAgICAgIHNlbGYuX2Jvb2wgIT0gb3RoZXIuX2Jvb2wKLy8gICAgIH0KLy8gffkEAAAAAAAA+QQAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA0AUAAAAAAAD6BAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "examples/boolean_example.rs",
			"settings":
			{
				"buffer_size": 529,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\n\nmain"
					},
					"BwAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"expand_snippet",
					null,
					"AgAAAAMAAAAAAAAAAwAAAAAAAAAEAAAAbWFpbgMAAAAAAAAAJgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwAAAAAAAAAHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\nP"
					},
					"AgAAAAEAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAEpA"
				],
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAAAIAAAAAAAAAAgAAAAAAAAABAAAAUA",
					"AQAAAAAAAAABAAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "python::Bo"
					},
					"CgAAAAIAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAAsAAAAAAAAAAAAAAAsAAAAAAAAADAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAAwAAAAAAAAADQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADAAAAAAAAAAMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					3,
					"delete_word",
					{
						"forward": false
					},
					"AwAAAAoAAAAAAAAACgAAAAAAAAADAAAAQm9vCAAAAAAAAAAIAAAAAAAAAAIAAAA6OgIAAAAAAAAAAgAAAAAAAAAGAAAAcHl0aG9u",
					"AQAAAAAAAAABAAAADQAAAAAAAAANAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "yuse"
					},
					"BAAAAAIAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAAABgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAAIAAAAAAAAAAgAAAAAAAAAEAAAAeXVzZQ",
					"AQAAAAAAAAABAAAABgAAAAAAAAAGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "use"
					},
					"AwAAAAIAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAAAAUAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " python::*:"
					},
					"CwAAAAUAAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAAsAAAAAAAAAAAAAAAsAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA4AAAAAAAAAAAAAAA4AAAAAAAAADwAAAAAAAAAAAAAADwAAAAAAAAAQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQAAAAAAAAAFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"left_delete",
					null,
					"AQAAAA8AAAAAAAAADwAAAAAAAAABAAAAOg",
					"AQAAAAAAAAABAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAAwGZA"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAA8AAAAAAAAAEAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADwAAAAAAAAAPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					3,
					"delete_word",
					{
						"forward": false
					},
					"AwAAAC8AAAAAAAAALwAAAAAAAAAEAAAAISgpOyIAAAAAAAAAIgAAAAAAAAANAAAAdW5pbXBsZW1lbnRlZB4AAAAAAAAAHgAAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAMwAAAAAAAAAzAAAAAAAAAP///////+9/"
				],
				[
					26,
					1,
					"reindent",
					null,
					"AQAAAB4AAAAAAAAAIgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgAAAAAAAAAeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAACIAAAAAAAAAIwAAAAAAAAAAAAAAIwAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACUAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIgAAAAAAAAAiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " bool"
					},
					"BQAAACUAAAAAAAAAJgAAAAAAAAAAAAAAJgAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAAKQAAAAAAAAAAAAAAKQAAAAAAAAAqAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQAAAAAAAAAlAAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAACYAAAAAAAAAJgAAAAAAAAAEAAAAYm9vbA",
					"AQAAAAAAAAABAAAAKgAAAAAAAAAqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAACYAAAAAAAAAJwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJgAAAAAAAAAmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAACcAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAApAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwAAAAAAAAAnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " Bo"
					},
					"AwAAACkAAAAAAAAAKgAAAAAAAAAAAAAAKgAAAAAAAAArAAAAAAAAAAAAAAArAAAAAAAAACwAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQAAAAAAAAApAAAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"Bool\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"Bool\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"Bool\",\"range\":{\"end\":{\"character\":14,\"line\":5},\"start\":{\"character\":12,\"line\":5}}},\"documentation\":{\"value\":\"Bool structure for True and False\",\"kind\":\"markdown\"},\"kind\":22},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							25,
							32,
							3
						],
						"trigger": "Bool"
					},
					"AgAAACoAAAAAAAAAKgAAAAAAAAACAAAAQm8qAAAAAAAAAC4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAAAAAAAAAAsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "::new"
					},
					"BQAAAC4AAAAAAAAALwAAAAAAAAAAAAAALwAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAzAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALgAAAAAAAAAuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"new\",\"additionalTextEdits\":[],\"detail\":\"fn(bool) -> Bool\",\"sortText\":\"fffffffd\",\"label\":\"new\",\"deprecated\":false,\"textEdit\":{\"newText\":\"new\",\"range\":{\"end\":{\"character\":21,\"line\":5},\"start\":{\"character\":18,\"line\":5}}},\"documentation\":{\"value\":\"create a new bool\\nexample\\nlet boolean = Bool::new(true)\\nlet boolean = Bool::new(false)\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							27,
							34,
							5
						],
						"trigger": "new"
					},
					"AgAAADAAAAAAAAAAMAAAAAAAAAADAAAAbmV3MAAAAAAAAAAzAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwAAAAAAAAAzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADMAAAAAAAAANQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwAAAAAAAAAzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "treu"
					},
					"BAAAADQAAAAAAAAANQAAAAAAAAAAAAAANQAAAAAAAAA2AAAAAAAAAAAAAAA2AAAAAAAAADcAAAAAAAAAAAAAADcAAAAAAAAAOAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAAAAAAAAAA0AAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAADQAAAAAAAAANAAAAAAAAAAEAAAAdHJldQ",
					"AQAAAAAAAAABAAAAOAAAAAAAAAA4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "tryue"
					},
					"BQAAADQAAAAAAAAANQAAAAAAAAAAAAAANQAAAAAAAAA2AAAAAAAAAAAAAAA2AAAAAAAAADcAAAAAAAAAAAAAADcAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA5AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAAAAAAAAAA0AAAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					3,
					"left_delete",
					null,
					"AwAAADgAAAAAAAAAOAAAAAAAAAABAAAAZTcAAAAAAAAANwAAAAAAAAABAAAAdTYAAAAAAAAANgAAAAAAAAABAAAAeQ",
					"AQAAAAAAAAABAAAAOQAAAAAAAAA5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "ue"
					},
					"AgAAADYAAAAAAAAANwAAAAAAAAAAAAAANwAAAAAAAAA4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANgAAAAAAAAA2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADkAAAAAAAAAOgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQAAAAAAAAA5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"duplicate_line",
					null,
					"AQAAADsAAAAAAAAAWAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOgAAAAAAAAA6AAAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAFEAAAAAAAAAUQAAAAAAAAAEAAAAdHJ1ZQ",
					"AQAAAAAAAAABAAAAVQAAAAAAAABVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "false"
					},
					"BQAAAFEAAAAAAAAAUgAAAAAAAAAAAAAAUgAAAAAAAABTAAAAAAAAAAAAAABTAAAAAAAAAFQAAAAAAAAAAAAAAFQAAAAAAAAAVQAAAAAAAAAAAAAAVQAAAAAAAABWAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQAAAAAAAABRAAAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": "1"
					},
					"AQAAACcAAAAAAAAAKAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwAAAAAAAAAnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAEYAAAAAAAAARwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARgAAAAAAAABGAAAAAAAAAAAAAAAAQGBA"
				],
				[
					59,
					1,
					"left_delete",
					null,
					"AQAAAEYAAAAAAAAARgAAAAAAAAABAAAAMg",
					"AQAAAAAAAAABAAAARwAAAAAAAABHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAEUAAAAAAAAARgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQAAAAAAAABFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "\nas"
					},
					"BAAAAFoAAAAAAAAAWwAAAAAAAAAAAAAAWwAAAAAAAABfAAAAAAAAAAAAAABfAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAYQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgAAAAAAAABaAAAAAAAAAP///////+9/"
				],
				[
					71,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"insertTextFormat\":2,\"filterText\":\"assert!\",\"additionalTextEdits\":[],\"detail\":\"#[macro_export] macro_rules! assert\",\"sortText\":\"fffffffd\",\"label\":\"assert!(â€¦)\",\"deprecated\":false,\"textEdit\":{\"newText\":\"assert!($0)\",\"range\":{\"end\":{\"character\":6,\"line\":7},\"start\":{\"character\":4,\"line\":7}}},\"documentation\":{\"value\":\"Asserts that a boolean expression is `true` at runtime.\\n\\nThis will invoke the [`panic!`] macro if the provided expression cannot be\\nevaluated to `true` at runtime.\\n\\n# Uses\\n\\nAssertions are always checked in both debug and release builds, and cannot\\nbe disabled. See [`debug_assert!`] for assertions that are not enabled in\\nrelease builds by default.\\n\\nUnsafe code may rely on `assert!` to enforce run-time invariants that, if\\nviolated could lead to unsafety.\\n\\nOther use-cases of `assert!` include testing and enforcing run-time\\ninvariants in safe code (whose violation cannot result in unsafety).\\n\\n# Custom Messages\\n\\nThis macro has a second form, where a custom panic message can\\nbe provided with or without arguments for formatting. See [`std::fmt`]\\nfor syntax for this form. Expressions used as format arguments will only\\nbe evaluated if the assertion fails.\\n\\n[`std::fmt`]: ../std/fmt/index.html\\n\\n# Examples\\n\\n```rust\\n// the panic message for these assertions is the stringified value of the\\n// expression given.\\nassert!(true);\\n\\nfn some_computation() -> bool { true } // a very simple function\\n\\nassert!(some_computation());\\n\\n// assert with a custom message\\nlet x = true;\\nassert!(x, \\\"x wasn't true!\\\");\\n\\nlet a = 3; let b = 27;\\nassert!(a + b == 30, \\\"a = {}, b = {}\\\", a, b);\\n```\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							59,
							70,
							4
						],
						"trigger": "assert!"
					},
					"AgAAAF8AAAAAAAAAXwAAAAAAAAACAAAAYXNfAAAAAAAAAGgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQAAAAAAAABhAAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": "_eq"
					},
					"AwAAAGUAAAAAAAAAZgAAAAAAAAAAAAAAZgAAAAAAAABnAAAAAAAAAAAAAABnAAAAAAAAAGgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQAAAAAAAABlAAAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "b1"
					},
					"AgAAAGoAAAAAAAAAawAAAAAAAAAAAAAAawAAAAAAAABsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagAAAAAAAABqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAGwAAAAAAAAAbQAAAAAAAAAAAAAAbQAAAAAAAABuAAAAAAAAAAAAAABuAAAAAAAAAG8AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAAAAAAAAABsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": " b2"
					},
					"AwAAAG8AAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAABxAAAAAAAAAAAAAABxAAAAAAAAAHIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwAAAAAAAABvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAHMAAAAAAAAAdAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcwAAAAAAAABzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFoAAAAAAAAAWwAAAAAAAAAAAAAAWwAAAAAAAABfAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgAAAAAAAABaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"trim_trailing_white_space",
					null,
					"AQAAAFsAAAAAAAAAWwAAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAAEpA"
				],
				[
					106,
					3,
					"left_delete",
					null,
					"AwAAAGgAAAAAAAAAaAAAAAAAAAABAAAAcWcAAAAAAAAAZwAAAAAAAAABAAAAZWYAAAAAAAAAZgAAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAAaQAAAAAAAABpAAAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"duplicate_line",
					null,
					"AQAAAHMAAAAAAAAAigAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgAAAAAAAAByAAAAAAAAAP///////+9/"
				],
				[
					116,
					1,
					"left_delete",
					null,
					"AQAAAIIAAAAAAAAAggAAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAgwAAAAAAAACDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAAIIAAAAAAAAAgwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggAAAAAAAACCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"duplicate_line",
					null,
					"AQAAAIoAAAAAAAAAoQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwAAAAAAAACDAAAAAAAAAAAAAAAAAGpA"
				],
				[
					128,
					2,
					"right_delete",
					null,
					"AgAAAJkAAAAAAAAAmQAAAAAAAAABAAAAIZkAAAAAAAAAmQAAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAmQAAAAAAAACZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "=="
					},
					"AgAAAJkAAAAAAAAAmgAAAAAAAAAAAAAAmgAAAAAAAACbAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQAAAAAAAACZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					2,
					"right_delete",
					null,
					"AgAAAJwAAAAAAAAAnAAAAAAAAAABAAAAYpwAAAAAAAAAnAAAAAAAAAABAAAAMg",
					"AQAAAAAAAAABAAAAnAAAAAAAAACcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					132,
					1,
					"insert",
					{
						"characters": "true"
					},
					"BAAAAJwAAAAAAAAAnQAAAAAAAAAAAAAAnQAAAAAAAACeAAAAAAAAAAAAAACeAAAAAAAAAJ8AAAAAAAAAAAAAAJ8AAAAAAAAAoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAAAAAAAAACcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAAGYAAAAAAAAAZwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgAAAAAAAABmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"assert_ne\",\"additionalTextEdits\":[],\"detail\":\"#[macro_export] macro_rules! assert_ne\",\"sortText\":\"fffffffd\",\"label\":\"assert_ne (use pretty_assertions::assert_ne)\",\"data\":{\"imports\":[{\"full_import_path\":\"pretty_assertions::assert_ne\",\"imported_name\":\"assert_ne\"}],\"position\":{\"position\":{\"character\":11,\"line\":8},\"textDocument\":{\"uri\":\"file:///home/alexzander/Alexzander__/programming/rust/python/examples/boolean_example.rs\"}}},\"deprecated\":false,\"textEdit\":{\"newText\":\"assert_ne\",\"range\":{\"end\":{\"character\":11,\"line\":8},\"start\":{\"character\":4,\"line\":8}}},\"documentation\":{\"value\":\"Asserts that two expressions are not equal to each other (using [`PartialEq`]).\\n\\nOn panic, this macro will print the values of the expressions with their\\n[`Debug`] representations.\\n\\nThis is a drop in replacement for [`core::assert_ne!`].\\nYou can provide a custom panic message if desired.\\n\\n# Examples\\n\\n```rust\\nuse pretty_assertions::assert_ne;\\n\\nlet a = 3;\\nlet b = 2;\\nassert_ne!(a, b);\\n\\nassert_ne!(a, b, \\\"we are testing that the values are not equal\\\");\\n```\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							110,
							148,
							1
						],
						"trigger": "assert_ne"
					},
					"AgAAAGAAAAAAAAAAYAAAAAAAAAAHAAAAYXNzZXJ0X2AAAAAAAAAAaQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZwAAAAAAAABnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					151,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							[
								[
									2,
									0
								],
								[
									2,
									0
								],
								"use pretty_assertions::assert_ne;",
								null
							],
							[
								[
									2,
									0
								],
								[
									2,
									0
								],
								"\n",
								null
							]
						]
					},
					"AgAAAAIAAAAAAAAAAwAAAAAAAAAAAAAAAgAAAAAAAAAjAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQAAAAAAAABpAAAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"cut",
					null,
					"AQAAAAIAAAAAAAAAAgAAAAAAAAAiAAAAdXNlIHByZXR0eV9hc3NlcnRpb25zOjphc3NlcnRfbmU7Cg",
					"AQAAAAAAAAABAAAAIwAAAAAAAAAjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					2,
					"right_delete",
					null,
					"AgAAAGcAAAAAAAAAZwAAAAAAAAABAAAAbmcAAAAAAAAAZwAAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAZwAAAAAAAABnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					2,
					"right_delete",
					null,
					"AgAAAGYAAAAAAAAAZgAAAAAAAAABAAAAX2YAAAAAAAAAZgAAAAAAAAABAAAAIQ",
					"AQAAAAAAAAABAAAAZgAAAAAAAABmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAAGYAAAAAAAAAZwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgAAAAAAAABmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					190,
					1,
					"duplicate_line",
					null,
					"AQAAAKMAAAAAAAAAvAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogAAAAAAAACiAAAAAAAAAP///////+9/"
				],
				[
					194,
					1,
					"left_delete",
					null,
					"AQAAALAAAAAAAAAAsAAAAAAAAAABAAAAMQ",
					"AQAAAAAAAAABAAAAsQAAAAAAAACxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					195,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAALAAAAAAAAAAsQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsAAAAAAAAACwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					198,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAALUAAAAAAAAAtQAAAAAAAAAEAAAAdHJ1ZQ",
					"AQAAAAAAAAABAAAAuQAAAAAAAAC5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					199,
					1,
					"insert",
					{
						"characters": "false"
					},
					"BQAAALUAAAAAAAAAtgAAAAAAAAAAAAAAtgAAAAAAAAC3AAAAAAAAAAAAAAC3AAAAAAAAALgAAAAAAAAAAAAAALgAAAAAAAAAuQAAAAAAAAAAAAAAuQAAAAAAAAC6AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQAAAAAAAAC1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABEAAAAAAAAAEgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQAAAAAAAAARAAAAAAAAAAAAAAAAIGVA"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": "use"
					},
					"AwAAABEAAAAAAAAAEgAAAAAAAAAAAAAAEgAAAAAAAAATAAAAAAAAAAAAAAATAAAAAAAAABQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQAAAAAAAAARAAAAAAAAAAAAAAAAAAAA"
				],
				[
					217,
					1,
					"insert",
					{
						"characters": " pre"
					},
					"BAAAABQAAAAAAAAAFQAAAAAAAAAAAAAAFQAAAAAAAAAWAAAAAAAAAAAAAAAWAAAAAAAAABcAAAAAAAAAAAAAABcAAAAAAAAAGAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAAAAAAAAAAUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"pretty_assertions\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"pretty_assertions\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"pretty_assertions\",\"range\":{\"end\":{\"character\":7,\"line\":3},\"start\":{\"character\":4,\"line\":3}}},\"documentation\":{\"value\":\"# Pretty Assertions\\n\\nWhen writing tests in Rust, you'll probably use `assert_eq!(a, b)` _a lot_.\\n\\nIf such a test fails, it will present all the details of `a` and `b`.\\nBut you have to spot the differences yourself, which is not always straightforward,\\nlike here:\\n\\n![standard assertion](https://raw.githubusercontent.com/colin-kiegel/rust-pretty-assertions/2d2357ff56d22c51a86b2f1cfe6efcee9f5a8081/examples/standard_assertion.png)\\n\\nWouldn't that task be _much_ easier with a colorful diff?\\n\\n![pretty assertion](https://raw.githubusercontent.com/colin-kiegel/rust-pretty-assertions/2d2357ff56d22c51a86b2f1cfe6efcee9f5a8081/examples/pretty_assertion.png)\\n\\nYep â€” and you only need **one line of code** to make it happen:\\n\\n```rust\\nuse pretty_assertions::{assert_eq, assert_ne};\\n```\\n\\n<details>\\n<summary>Show the example behind the screenshots above.</summary>\\n\\n```rust\\n// 1. add the `pretty_assertions` dependency to `Cargo.toml`.\\n// 2. insert this line at the top of each module, as needed\\nuse pretty_assertions::{assert_eq, assert_ne};\\n\\n#[derive(Debug, PartialEq)]\\nstruct Foo {\\n    lorem: &'static str,\\n    ipsum: u32,\\n    dolor: Result<String, String>,\\n}\\n\\nlet x = Some(Foo { lorem: \\\"Hello World!\\\", ipsum: 42, dolor: Ok(\\\"hey\\\".to_string())});\\nlet y = Some(Foo { lorem: \\\"Hello Wrold!\\\", ipsum: 42, dolor: Ok(\\\"hey ho!\\\".to_string())});\\n\\nassert_eq!(x, y);\\n```\\n</details>\\n\\n## Tip\\n\\nSpecify it as [`[dev-dependencies]`](http://doc.crates.io/specifying-dependencies.html#development-dependencies)\\nand it will only be used for compiling tests, examples, and benchmarks.\\nThis way the compile time of `cargo build` won't be affected!\\n\\nAlso add `#[cfg(test)]` to your `use` statements, like this:\\n\\n```rust\\n#[cfg(test)]\\nuse pretty_assertions::{assert_eq, assert_ne};\\n```\\n\\n## Note\\n\\n* Since `Rust 2018` edition, you need to declare\\n  `use pretty_assertions::{assert_eq, assert_ne};` per module.\\n  Before you would write `#[macro_use] extern crate pretty_assertions;`.\\n* The replacement is only effective in your own crate, not in other libraries\\n  you include.\\n* `assert_ne` is also switched to multi-line presentation, but does _not_ show\\n  a diff.\\n\\n## Features\\n\\nFeatures provided by the crate are:\\n\\n- `std`: Use the Rust standard library. Enabled by default.\\n  Exactly one of `std` and `alloc` is required.\\n- `alloc`: Use the `alloc` crate.\\n  Exactly one of `std` and `alloc` is required.\\n- `unstable`: opt-in to unstable features that may not follow Semantic Versioning.\\n  Implmenetion behind this feature is subject to change without warning between patch versions.\",\"kind\":\"markdown\"},\"kind\":9},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							148,
							217,
							4
						],
						"trigger": "pretty_assertions"
					},
					"AgAAABUAAAAAAAAAFQAAAAAAAAADAAAAcHJlFQAAAAAAAAAmAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGAAAAAAAAAAYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					219,
					1,
					"insert",
					{
						"characters": "::"
					},
					"AgAAACYAAAAAAAAAJwAAAAAAAAAAAAAAJwAAAAAAAAAoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJgAAAAAAAAAmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					222,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"assert_eq\",\"additionalTextEdits\":[],\"detail\":\"#[macro_export] macro_rules! assert_eq\",\"sortText\":\"fffffffd\",\"label\":\"assert_eq\",\"deprecated\":false,\"textEdit\":{\"newText\":\"assert_eq\",\"range\":{\"end\":{\"character\":23,\"line\":3},\"start\":{\"character\":23,\"line\":3}}},\"documentation\":{\"value\":\"Asserts that two expressions are equal to each other (using [`PartialEq`]).\\n\\nOn panic, this macro will print a diff derived from [`Debug`] representation of\\neach value.\\n\\nThis is a drop in replacement for [`core::assert_eq!`].\\nYou can provide a custom panic message if desired.\\n\\n# Examples\\n\\n```rust\\nuse pretty_assertions::assert_eq;\\n\\nlet a = 3;\\nlet b = 1 + 2;\\nassert_eq!(a, b);\\n\\nassert_eq!(a, b, \\\"we are testing addition with {} and {}\\\", a, b);\\n```\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": true,
						"query_change_id":
						[
							150,
							219,
							2
						],
						"trigger": "assert_eq"
					},
					"AQAAACgAAAAAAAAAMQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAAAAAAAAAAoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADEAAAAAAAAAMgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQAAAAAAAAAxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					224,
					1,
					"insert_snippet",
					{
						"contents": "'"
					},
					"AQAAADIAAAAAAAAAMwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgAAAAAAAAAyAAAAAAAAAAAAAAAAAPC/"
				],
				[
					227,
					1,
					"left_delete",
					null,
					"AQAAADIAAAAAAAAAMgAAAAAAAAABAAAAJw",
					"AQAAAAAAAAABAAAAMwAAAAAAAAAzAAAAAAAAAAAAAAAAoHtA"
				],
				[
					228,
					1,
					"duplicate_line",
					null,
					"AQAAADMAAAAAAAAAVQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgAAAAAAAAAyAAAAAAAAAAAAAAAAAPC/"
				],
				[
					230,
					2,
					"left_delete",
					null,
					"AgAAAFIAAAAAAAAAUgAAAAAAAAABAAAAcVEAAAAAAAAAUQAAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAUwAAAAAAAABTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					231,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAFEAAAAAAAAAUgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQAAAAAAAABRAAAAAAAAAAAAAAAAAPC/"
				],
				[
					232,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"assert_ne\",\"additionalTextEdits\":[],\"detail\":\"#[macro_export] macro_rules! assert_ne\",\"sortText\":\"fffffffd\",\"label\":\"assert_ne\",\"deprecated\":false,\"textEdit\":{\"newText\":\"assert_ne\",\"range\":{\"end\":{\"character\":31,\"line\":4},\"start\":{\"character\":23,\"line\":4}}},\"documentation\":{\"value\":\"Asserts that two expressions are not equal to each other (using [`PartialEq`]).\\n\\nOn panic, this macro will print the values of the expressions with their\\n[`Debug`] representations.\\n\\nThis is a drop in replacement for [`core::assert_ne!`].\\nYou can provide a custom panic message if desired.\\n\\n# Examples\\n\\n```rust\\nuse pretty_assertions::assert_ne;\\n\\nlet a = 3;\\nlet b = 2;\\nassert_ne!(a, b);\\n\\nassert_ne!(a, b, \\\"we are testing that the values are not equal\\\");\\n```\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							160,
							231,
							1
						],
						"trigger": "assert_ne"
					},
					"AgAAAEoAAAAAAAAASgAAAAAAAAAIAAAAYXNzZXJ0X25KAAAAAAAAAFMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUgAAAAAAAABSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					246,
					1,
					"insert",
					{
						"characters": "_eq"
					},
					"AwAAAKoAAAAAAAAAqwAAAAAAAAAAAAAAqwAAAAAAAACsAAAAAAAAAAAAAACsAAAAAAAAAK0AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqgAAAAAAAACqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					248,
					3,
					"left_delete",
					null,
					"AwAAALMAAAAAAAAAswAAAAAAAAABAAAAPbIAAAAAAAAAsgAAAAAAAAABAAAAPbEAAAAAAAAAsQAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAtAAAAAAAAAC0AAAAAAAAAAAAAAAAAPC/"
				],
				[
					249,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAALEAAAAAAAAAsgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQAAAAAAAACxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					254,
					1,
					"insert",
					{
						"characters": "_eq"
					},
					"CQAAAPIAAAAAAAAA8wAAAAAAAAAAAAAA2QAAAAAAAADaAAAAAAAAAAAAAADCAAAAAAAAAMMAAAAAAAAAAAAAAPUAAAAAAAAA9gAAAAAAAAAAAAAA2wAAAAAAAADcAAAAAAAAAAAAAADDAAAAAAAAAMQAAAAAAAAAAAAAAPgAAAAAAAAA+QAAAAAAAAAAAAAA3QAAAAAAAADeAAAAAAAAAAAAAADEAAAAAAAAAMUAAAAAAAAAAAAAAA",
					"AQAAAAAAAAADAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/2QAAAAAAAADZAAAAAAAAAAAAAAAAAPC/8gAAAAAAAADyAAAAAAAAAAAAAAAAQGBA"
				],
				[
					284,
					4,
					"left_delete",
					null,
					"BAAAAMwAAAAAAAAAzAAAAAAAAAABAAAAIMsAAAAAAAAAywAAAAAAAAABAAAAPcoAAAAAAAAAygAAAAAAAAABAAAAIckAAAAAAAAAyQAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAzQAAAAAAAADNAAAAAAAAAAAAAAAAAPC/"
				],
				[
					285,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAMkAAAAAAAAAygAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQAAAAAAAADJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					286,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMoAAAAAAAAAywAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAygAAAAAAAADKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					289,
					4,
					"left_delete",
					null,
					"BAAAAOQAAAAAAAAA5AAAAAAAAAABAAAAIOMAAAAAAAAA4wAAAAAAAAABAAAAPeIAAAAAAAAA4gAAAAAAAAABAAAAPeEAAAAAAAAA4QAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA5QAAAAAAAADlAAAAAAAAAAAAAAAAAPC/"
				],
				[
					290,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOEAAAAAAAAA4gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QAAAAAAAADhAAAAAAAAAAAAAAAAAPC/"
				],
				[
					291,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOIAAAAAAAAA4wAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4gAAAAAAAADiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					297,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAPwAAAAAAAAA/AAAAAAAAAADAAAAPT0g",
					"AQAAAAAAAAABAAAA/wAAAAAAAAD/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					298,
					1,
					"left_delete",
					null,
					"AQAAAPsAAAAAAAAA+wAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA/AAAAAAAAAD8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					299,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAPsAAAAAAAAA/AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+wAAAAAAAAD7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					304,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPwAAAAAAAAA/QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/AAAAAAAAAD8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					326,
					2,
					"left_delete",
					null,
					"AgAAAMQAAAAAAAAAxAAAAAAAAAABAAAAccMAAAAAAAAAwwAAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAxQAAAAAAAADFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					327,
					1,
					"insert",
					{
						"characters": "ne"
					},
					"AgAAAMMAAAAAAAAAxAAAAAAAAAAAAAAAxAAAAAAAAADFAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwwAAAAAAAADDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					329,
					1,
					"cut",
					null,
					"AQAAAKAAAAAAAAAAoAAAAAAAAAAYAAAAICAgIGFzc2VydF9lcSEoYjEsIGIyKTsK",
					"AQAAAAAAAAABAAAArQAAAAAAAACtAAAAAAAAAAAAAAAAIGVA"
				],
				[
					354,
					1,
					"insert",
					{
						"characters": "\n\niof"
					},
					"CAAAAJ4AAAAAAAAAnwAAAAAAAAAAAAAAnwAAAAAAAACjAAAAAAAAAAAAAACjAAAAAAAAAKQAAAAAAAAAAAAAAKQAAAAAAAAAqAAAAAAAAAAAAAAAnwAAAAAAAACfAAAAAAAAAAQAAAAgICAgpAAAAAAAAAClAAAAAAAAAAAAAAClAAAAAAAAAKYAAAAAAAAAAAAAAKYAAAAAAAAApwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAngAAAAAAAACeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					355,
					2,
					"left_delete",
					null,
					"AgAAAKYAAAAAAAAApgAAAAAAAAABAAAAZqUAAAAAAAAApQAAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAApwAAAAAAAACnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					356,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAKUAAAAAAAAApgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQAAAAAAAAClAAAAAAAAAAAAAAAAAPC/"
				],
				[
					357,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKYAAAAAAAAApwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApgAAAAAAAACmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					358,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKcAAAAAAAAAqQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApwAAAAAAAACnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					359,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAKcAAAAAAAAApwAAAAAAAAABAAAAKKcAAAAAAAAApwAAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAqAAAAAAAAACoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					360,
					1,
					"insert",
					{
						"characters": "b1"
					},
					"AgAAAKcAAAAAAAAAqAAAAAAAAAAAAAAAqAAAAAAAAACpAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApwAAAAAAAACnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					361,
					1,
					"insert",
					{
						"characters": " =="
					},
					"AwAAAKkAAAAAAAAAqgAAAAAAAAAAAAAAqgAAAAAAAACrAAAAAAAAAAAAAACrAAAAAAAAAKwAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQAAAAAAAACpAAAAAAAAAAAAAAAAAPC/"
				],
				[
					362,
					2,
					"left_delete",
					null,
					"AgAAAKsAAAAAAAAAqwAAAAAAAAABAAAAPaoAAAAAAAAAqgAAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAArAAAAAAAAACsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					363,
					1,
					"insert",
					{
						"characters": "!="
					},
					"AgAAAKoAAAAAAAAAqwAAAAAAAAAAAAAAqwAAAAAAAACsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqgAAAAAAAACqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					364,
					1,
					"insert",
					{
						"characters": " b2"
					},
					"AwAAAKwAAAAAAAAArQAAAAAAAAAAAAAArQAAAAAAAACuAAAAAAAAAAAAAACuAAAAAAAAAK8AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAAAAAAAAACsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					365,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK8AAAAAAAAAsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwAAAAAAAACvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					366,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAALAAAAAAAAAAsgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsAAAAAAAAACwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					367,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAALEAAAAAAAAAsgAAAAAAAAAAAAAAsgAAAAAAAAC2AAAAAAAAAAAAAAC2AAAAAAAAALcAAAAAAAAAAAAAALcAAAAAAAAAuwAAAAAAAAAAAAAAsgAAAAAAAACyAAAAAAAAAAQAAAAgICAgsgAAAAAAAAC6AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQAAAAAAAACxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					369,
					1,
					"insert",
					{
						"characters": " else"
					},
					"BgAAAMAAAAAAAAAAwQAAAAAAAAAAAAAAsgAAAAAAAACyAAAAAAAAAAgAAAAgICAgICAgILkAAAAAAAAAugAAAAAAAAAAAAAAugAAAAAAAAC7AAAAAAAAAAAAAAC7AAAAAAAAALwAAAAAAAAAAAAAALwAAAAAAAAAvQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAAAFpA"
				],
				[
					370,
					1,
					"insert",
					{
						"characters": " P"
					},
					"AgAAAL0AAAAAAAAAvgAAAAAAAAAAAAAAvgAAAAAAAAC/AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvQAAAAAAAAC9AAAAAAAAAAAAAAAAAPC/"
				],
				[
					371,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAL8AAAAAAAAAwQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvwAAAAAAAAC/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					372,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAL8AAAAAAAAAvwAAAAAAAAABAAAAe78AAAAAAAAAvwAAAAAAAAABAAAAfQ",
					"AQAAAAAAAAABAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					373,
					1,
					"left_delete",
					null,
					"AQAAAL4AAAAAAAAAvgAAAAAAAAABAAAAUA",
					"AQAAAAAAAAABAAAAvwAAAAAAAAC/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					374,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAL4AAAAAAAAAwAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvgAAAAAAAAC+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					375,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAL8AAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAMUAAAAAAAAAAAAAAMUAAAAAAAAAyQAAAAAAAAAAAAAAwAAAAAAAAADAAAAAAAAAAAQAAAAgICAgwAAAAAAAAADIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvwAAAAAAAAC/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					379,
					1,
					"insert",
					{
						"characters": "print"
					},
					"BgAAALIAAAAAAAAAswAAAAAAAAAAAAAAwQAAAAAAAADBAAAAAAAAAAgAAAAgICAgICAgILMAAAAAAAAAtAAAAAAAAAAAAAAAtAAAAAAAAAC1AAAAAAAAAAAAAAC1AAAAAAAAALYAAAAAAAAAAAAAALYAAAAAAAAAtwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgAAAAAAAACyAAAAAAAAAAAAAAAAAFpA"
				],
				[
					383,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"insertTextFormat\":2,\"filterText\":\"println!\",\"additionalTextEdits\":[],\"detail\":\"#[macro_export] macro_rules! println\",\"sortText\":\"fffffffd\",\"label\":\"println!(â€¦)\",\"deprecated\":false,\"textEdit\":{\"newText\":\"println!($0)\",\"range\":{\"end\":{\"character\":5,\"line\":11},\"start\":{\"character\":0,\"line\":11}}},\"documentation\":{\"value\":\"Prints to the standard output, with a newline.\\n\\nOn all platforms, the newline is the LINE FEED character (`\\\\n`/`U+000A`) alone\\n(no additional CARRIAGE RETURN (`\\\\r`/`U+000D`)).\\n\\nUse the [`format!`] syntax to write data to the standard output.\\nSee [`std::fmt`] for more information.\\n\\nUse `println!` only for the primary output of your program. Use\\n[`eprintln!`] instead to print error and progress messages.\\n\\n[`std::fmt`]: crate::fmt\\n\\n# Panics\\n\\nPanics if writing to [`io::stdout`] fails.\\n\\n[`io::stdout`]: crate::io::stdout\\n\\n# Examples\\n\\n```rust\\nprintln!(); // prints just a newline\\nprintln!(\\\"hello there!\\\");\\nprintln!(\\\"format {} arguments\\\", \\\"some\\\");\\n```\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							265,
							379,
							6
						],
						"trigger": "println!"
					},
					"AgAAALIAAAAAAAAAsgAAAAAAAAAFAAAAcHJpbnSyAAAAAAAAALwAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtwAAAAAAAAC3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					384,
					2,
					"indent",
					null,
					"AgAAALIAAAAAAAAAtgAAAAAAAAAAAAAAsgAAAAAAAAC2AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuwAAAAAAAAC7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					385,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAMMAAAAAAAAAxQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwwAAAAAAAADDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					386,
					1,
					"insert",
					{
						"characters": "yes"
					},
					"AwAAAMQAAAAAAAAAxQAAAAAAAAAAAAAAxQAAAAAAAADGAAAAAAAAAAAAAADGAAAAAAAAAMcAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxAAAAAAAAADEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					391,
					1,
					"paste",
					null,
					"AQAAANcAAAAAAAAA7wAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1wAAAAAAAADXAAAAAAAAAAAAAAAAEHFA"
				],
				[
					394,
					1,
					"left_delete",
					null,
					"AQAAAO4AAAAAAAAA7gAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA7wAAAAAAAADvAAAAAAAAAAAAAAAAAAAA"
				],
				[
					396,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAOkAAAAAAAAA6QAAAAAAAAADAAAAeWVz",
					"AQAAAAAAAAABAAAA7AAAAAAAAADsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					397,
					1,
					"insert",
					{
						"characters": "no"
					},
					"AgAAAOkAAAAAAAAA6gAAAAAAAAAAAAAA6gAAAAAAAADrAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6QAAAAAAAADpAAAAAAAAAAAAAAAAAPC/"
				],
				[
					412,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAPMAAAAAAAAA9AAAAAAAAAAAAAAA9AAAAAAAAAD4AAAAAAAAAAAAAAD4AAAAAAAAAPkAAAAAAAAAAAAAAPkAAAAAAAAA/QAAAAAAAAAAAAAA9AAAAAAAAAD0AAAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAA8wAAAAAAAADzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					413,
					1,
					"left_delete",
					null,
					"AQAAAPUAAAAAAAAA9QAAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAA+QAAAAAAAAD5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					414,
					1,
					"paste",
					null,
					"AQAAAPUAAAAAAAAASAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9QAAAAAAAAD1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					420,
					5,
					"left_delete",
					null,
					"BQAAAAMBAAAAAAAAAwEAAAAAAAABAAAAMgIBAAAAAAAAAgEAAAAAAAABAAAAYgEBAAAAAAAAAQEAAAAAAAABAAAAIAABAAAAAAAAAAEAAAAAAAABAAAAPf8AAAAAAAAA/wAAAAAAAAABAAAAIQ",
					"AQAAAAAAAAABAAAABAEAAAAAAAAEAQAAAAAAAAAAAAAAAPC/"
				],
				[
					421,
					1,
					"insert",
					{
						"characters": "=="
					},
					"AgAAAP8AAAAAAAAAAAEAAAAAAAAAAAAAAAEAAAAAAAABAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wAAAAAAAAD/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					422,
					1,
					"insert",
					{
						"characters": " true"
					},
					"BQAAAAEBAAAAAAAAAgEAAAAAAAAAAAAAAgEAAAAAAAADAQAAAAAAAAAAAAADAQAAAAAAAAQBAAAAAAAAAAAAAAQBAAAAAAAABQEAAAAAAAAAAAAABQEAAAAAAAAGAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQEAAAAAAAABAQAAAAAAAAAAAAAAAPC/"
				],
				[
					438,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAEoBAAAAAAAASwEAAAAAAAAAAAAASwEAAAAAAABPAQAAAAAAAAAAAABPAQAAAAAAAFABAAAAAAAAAAAAAFABAAAAAAAAVAEAAAAAAAAAAAAASwEAAAAAAABLAQAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAASgEAAAAAAABKAQAAAAAAAAAAAAAAAPC/"
				],
				[
					439,
					1,
					"left_delete",
					null,
					"AQAAAEwBAAAAAAAATAEAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAUAEAAAAAAABQAQAAAAAAAAAAAAAAAPC/"
				],
				[
					440,
					1,
					"paste",
					null,
					"AQAAAEwBAAAAAAAAoQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAEAAAAAAABMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					443,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAAFkBAAAAAAAAWQEAAAAAAAAFAAAAdHJ1ZSBWAQAAAAAAAFYBAAAAAAAAAwAAAD09IA",
					"AQAAAAAAAAABAAAAXgEAAAAAAABeAQAAAAAAAAAAAAAAAPC/"
				],
				[
					444,
					1,
					"left_delete",
					null,
					"AQAAAFUBAAAAAAAAVQEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAVgEAAAAAAABWAQAAAAAAAAAAAAAAAPC/"
				],
				[
					449,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFUBAAAAAAAAVgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVQEAAAAAAABVAQAAAAAAAAAAAAAAAPC/"
				],
				[
					469,
					1,
					"reindent",
					null,
					"AQAAAEsBAAAAAAAATwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwEAAAAAAABLAQAAAAAAAAAAAAAAAPC/"
				],
				[
					470,
					1,
					"insert",
					{
						"characters": "\n//"
					},
					"BQAAAE8BAAAAAAAAUAEAAAAAAAAAAAAAUAEAAAAAAABUAQAAAAAAAAAAAABLAQAAAAAAAEsBAAAAAAAABAAAACAgICBQAQAAAAAAAFEBAAAAAAAAAAAAAFEBAAAAAAAAUgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATwEAAAAAAABPAQAAAAAAAAAAAAAAAPC/"
				],
				[
					471,
					1,
					"insert",
					{
						"characters": " not"
					},
					"BAAAAFIBAAAAAAAAUwEAAAAAAAAAAAAAUwEAAAAAAABUAQAAAAAAAAAAAABUAQAAAAAAAFUBAAAAAAAAAAAAAFUBAAAAAAAAVgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUgEAAAAAAABSAQAAAAAAAAAAAAAAAPC/"
				],
				[
					472,
					1,
					"insert",
					{
						"characters": " avai"
					},
					"BQAAAFYBAAAAAAAAVwEAAAAAAAAAAAAAVwEAAAAAAABYAQAAAAAAAAAAAABYAQAAAAAAAFkBAAAAAAAAAAAAAFkBAAAAAAAAWgEAAAAAAAAAAAAAWgEAAAAAAABbAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVgEAAAAAAABWAQAAAAAAAAAAAAAAAPC/"
				],
				[
					473,
					1,
					"insert",
					{
						"characters": "lable"
					},
					"BQAAAFsBAAAAAAAAXAEAAAAAAAAAAAAAXAEAAAAAAABdAQAAAAAAAAAAAABdAQAAAAAAAF4BAAAAAAAAAAAAAF4BAAAAAAAAXwEAAAAAAAAAAAAAXwEAAAAAAABgAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWwEAAAAAAABbAQAAAAAAAAAAAAAAAPC/"
				],
				[
					474,
					1,
					"insert",
					{
						"characters": " yet"
					},
					"BAAAAGABAAAAAAAAYQEAAAAAAAAAAAAAYQEAAAAAAABiAQAAAAAAAAAAAABiAQAAAAAAAGMBAAAAAAAAAAAAAGMBAAAAAAAAZAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYAEAAAAAAABgAQAAAAAAAAAAAAAAAPC/"
				],
				[
					478,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"BQAAALEBAAAAAAAAtAEAAAAAAAAAAAAAmgEAAAAAAACdAQAAAAAAAAAAAACNAQAAAAAAAJABAAAAAAAAAAAAAHUBAAAAAAAAeAEAAAAAAAAAAAAAaQEAAAAAAABsAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAEAAAAAAACyAQAAAAAAAAAAAAAAgHNA"
				]
			]
		},
		{
			"file": "/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs",
			"settings":
			{
				"buffer_size": 76826,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "examples/object_trait.rs",
			"settings":
			{
				"buffer_size": 2520,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					6,
					3,
					"right_delete",
					null,
					"AwAAAAgBAAAAAAAACAEAAAAAAAABAAAAPAgBAAAAAAAACAEAAAAAAAABAAAAVAgBAAAAAAAACAEAAAAAAAABAAAAPg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAIAQAAAAAAAAgBAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					3,
					"right_delete",
					null,
					"AwAAALwDAAAAAAAAvAMAAAAAAAABAAAAPLwDAAAAAAAAvAMAAAAAAAABAAAAVLwDAAAAAAAAvAMAAAAAAAABAAAAPg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC8AwAAAAAAALwDAAAAAAAAAAAAAAAA8L8"
				],
				[
					98,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAABuBwAACnVzZSBzdGQ6OmZtdDsKdXNlIHN0ZDo6YW55Ojp0eXBlX25hbWU7CgovLy8gZ2V0IHRoZSB0eXBlIG9mIGFuIG9iamVjdApwdWIgZm4gdHlwZV9vZjxUPihfOiAmVCkgLT4gJnN0ciB7CiAgICB0eXBlX25hbWU6OjxUPigpCn0KCi8vLyB0aGUgc3VwcmVtZSBfT2JqZWN0IHRyYWl0Ci8vLyB0aGF0IGl0cyBkZXJpdmVkIHR5cGVzIHNob3VsZAovLy8gaW1wbGVtZW50IGxpa2UgYWxsIHRoZSBfX2Z1bmN0aW9uc19fIGZyb20gcHl0aG9uCnB1YiB0cmFpdCBfT2JqZWN0IHsKICAgIC8vLyBweXRob24gcmVwcihvYmplY3QpCiAgICBmbiBfX3JlcHJfXygmc2VsZikgLT4gU3RyaW5nOwogICAgLy8vIHB5dGhvbiBsZW4ob2JqZWN0KQogICAgZm4gX19sZW5fXygmc2VsZikgLT4gdXNpemU7CiAgICAvLy8gcHl0aG9uIHN0cihvYmplY3QpCiAgICBmbiBfX3N0cl9fKCZzZWxmKSAtPiBTdHJpbmc7Cn0KCiNbZGVyaXZlKENvcHkpXQojW2Rlcml2ZShDbG9uZSldCi8vLyBGbG9hdCBzdHJ1Y3QgdGhhdCBoYW5kbGVzIGYzMiBhbmQgZjY0CnB1YiBzdHJ1Y3QgRmxvYXQ8VDogU2l6ZWQ+IHsKICAgIC8vIHRoaXMgY2FuIGJlIGYzMiBvciBmNjQKICAgIF9mbG9hdDogVCwKfQoKCmltcGw8VD4gRmxvYXQ8VD4Kd2hlcmUgVDogU2l6ZWQKewogICAgLy8vIGNvbnN0cnVjdG9yCiAgICAvLy8gY3JlYXRlcyBhIEZsb2F0IG9iamVjdCBmcm9tIGFueSBmbG9hdCAoZjMyLCBmNjQpCiAgICBwdWIgZm4gbmV3KF9mbG9hdDogVCkgLT4gU2VsZiB7CiAgICAgICAgRmxvYXQgewogICAgICAgICAgICBfZmxvYXQKICAgICAgICB9CiAgICB9Cn0KCmltcGw8VD4gRnJvbTxUPiBmb3IgRmxvYXQ8VD4Kd2hlcmUgVDogU2l6ZWQKewogICAgZm4gZnJvbShfZmxvYXQ6IFQpIC0+IFNlbGYgewogICAgICAgIEZsb2F0IHsKICAgICAgICAgICAgX2Zsb2F0LAogICAgICAgIH0KICAgIH0KfQoKCgppbXBsPFQ+IF9PYmplY3QgZm9yIEZsb2F0PFQ+CndoZXJlIFQ6IFNpemVkICsgZm10OjpEaXNwbGF5CnsKICAgICNbaW5saW5lXQogICAgZm4gX19yZXByX18oJnNlbGYpIC0+IFN0cmluZyB7CiAgICAgICAgLy8geW91IG5lZWQgZm10OjpEaXNwbGF5IGZvciB0aGlzCiAgICAgICAgZm9ybWF0ISgie30iLCBzZWxmLl9mbG9hdCkKICAgIH0KCiAgICAjW2lubGluZV0KICAgIGZuIF9fbGVuX18oJnNlbGYpIC0+IHVzaXplIHsKICAgICAgICA4CiAgICB9CgogICAgI1tpbmxpbmVdCiAgICBmbiBfX3N0cl9fKCZzZWxmKSAtPiBTdHJpbmcgewogICAgICAgIC8vIGFuZCBmb3IgdGhpczsgZm10OjpEaXNwbGF5CiAgICAgICAgZm9ybWF0ISgie30iLCBzZWxmLl9mbG9hdCkKICAgIH0KfQoKCgoKaW1wbDxUPiBmbXQ6OkRpc3BsYXkgZm9yIEZsb2F0PFQ+CndoZXJlIFQ6IFNpemVkICsgZm10OjpEaXNwbGF5CnsKICAgIGZuIGZtdCgmc2VsZiwgZm9ybWF0dGVyOiAmbXV0IGZtdDo6Rm9ybWF0dGVyPCdfPikgLT4gZm10OjpSZXN1bHQgewogICAgICAgIGxldCBfdHlwZSA9IHR5cGVfb2YoJnNlbGYuX2Zsb2F0KTsKICAgICAgICBpZiBmb3JtYXR0ZXIuYWx0ZXJuYXRlKCkgewogICAgICAgICAgICB3cml0ZSEoZm9ybWF0dGVyLCAie30gLT4gPHt9PiIsIHNlbGYuX19zdHJfXygpLCBfdHlwZSkKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB3cml0ZSEoZm9ybWF0dGVyLCAie30iLCBzZWxmLl9fc3RyX18oKSkKICAgICAgICB9CiAgICB9Cn0KCgovLy8gcHJpbnQob2JqZWN0KTsKcHViIGZuIHByaW50PFQ6IGZtdDo6RGlzcGxheT4oYXJnOiBUKSB7CiAgICBwcmludGxuISgie30iLCBhcmcpOwp9CgpmbiBtYWluKCkgewogICAgbGV0IF9mbG9hdGVyID0gRmxvYXQ6Om5ldygxMjNmMzIpOwogICAgbGV0IGZsb2F0ZXIgPSBGbG9hdDo6ZnJvbSgxMjNmMzIpOwogICAgcHJpbnQoZmxvYXRlcik7Cn0KAAAAAAAAAABuBwAAAAAAAAAAAAAAAAAAAAAAAG4HAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABXBwAAAAAAAFcHAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					2,
					"cut",
					null,
					"AgAAAAsBAAAAAAAACwEAAAAAAAAcAAAAICAgIC8vLyBweXRob24gcmVwcihvYmplY3QpCgsBAAAAAAAACwEAAAAAAAAiAAAAICAgIGZuIF9fcmVwcl9fKCZzZWxmKSAtPiBTdHJpbmc7Cg",
					"AQAAAAAAAAABAAAAHgEAAAAAAAAeAQAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					2,
					"cut",
					null,
					"AgAAAEYBAAAAAAAARgEAAAAAAAAbAAAAICAgIC8vLyBweXRob24gc3RyKG9iamVjdCkKRgEAAAAAAABGAQAAAAAAACEAAAAgICAgZm4gX19zdHJfXygmc2VsZikgLT4gU3RyaW5nOwo",
					"AQAAAAAAAAABAAAARgEAAAAAAABGAQAAAAAAAAAAAAAAAAAA"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAACsGAAAAAAAALAYAAAAAAAAAAAAALAYAAAAAAAAtBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwYAAAAAAAArBgAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"paste",
					null,
					"AQAAACwGAAAAAAAAmgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAYAAAAAAAAsBgAAAAAAAAAAAAAAAAAA"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "<T>"
					},
					"AwAAADsGAAAAAAAAPAYAAAAAAAAAAAAAPAYAAAAAAAA9BgAAAAAAAAAAAAA9BgAAAAAAAD4GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwYAAAAAAAA7BgAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAJMGAAAAAAAAkwYAAAAAAAAGAAAAT2JqZWN0",
					"AQAAAAAAAAABAAAAmQYAAAAAAACZBgAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": "T"
					},
					"AQAAAJMGAAAAAAAAlAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwYAAAAAAACTBgAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"left_delete",
					null,
					"AQAAAD4GAAAAAAAAPgYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAPwYAAAAAAAA/BgAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "\nwhere"
					},
					"BgAAAD4GAAAAAAAAPwYAAAAAAAAAAAAAPwYAAAAAAABABgAAAAAAAAAAAABABgAAAAAAAEEGAAAAAAAAAAAAAEEGAAAAAAAAQgYAAAAAAAAAAAAAQgYAAAAAAABDBgAAAAAAAAAAAABDBgAAAAAAAEQGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPgYAAAAAAAA+BgAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"insert",
					{
						"characters": " T;"
					},
					"AwAAAEQGAAAAAAAARQYAAAAAAAAAAAAARQYAAAAAAABGBgAAAAAAAAAAAABGBgAAAAAAAEcGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAYAAAAAAABEBgAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"left_delete",
					null,
					"AQAAAEYGAAAAAAAARgYAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAARwYAAAAAAABHBgAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAEYGAAAAAAAARwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARgYAAAAAAABGBgAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": " Ob"
					},
					"AwAAAEcGAAAAAAAASAYAAAAAAAAAAAAASAYAAAAAAABJBgAAAAAAAAAAAABJBgAAAAAAAEoGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARwYAAAAAAABHBgAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_Object\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"_Object\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"_Object\",\"range\":{\"end\":{\"character\":11,\"line\":88},\"start\":{\"character\":9,\"line\":88}}},\"documentation\":{\"value\":\"the supreme _Object trait\\nthat its derived types should\\nimplement like all the __functions__ from python\",\"kind\":\"markdown\"},\"kind\":8},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							40,
							51,
							3
						],
						"trigger": "_Object"
					},
					"AgAAAEgGAAAAAAAASAYAAAAAAAACAAAAT2JIBgAAAAAAAE8GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgYAAAAAAABKBgAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAE8GAAAAAAAAUAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATwYAAAAAAABPBgAAAAAAAAAAAAAAAGpA"
				],
				[
					64,
					1,
					"insert",
					{
						"characters": "\nuse"
					},
					"BAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": " srtd"
					},
					"BQAAAAQAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAJAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					3,
					"left_delete",
					null,
					"AwAAAAgAAAAAAAAACAAAAAAAAAABAAAAZAcAAAAAAAAABwAAAAAAAAABAAAAdAYAAAAAAAAABgAAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAACQAAAAAAAAAJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "td::col"
					},
					"BwAAAAYAAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACgAAAAAAAAAAAAAACgAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgAAAAAAAAAGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"collections\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"collections\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"collections\",\"range\":{\"end\":{\"character\":12,\"line\":1},\"start\":{\"character\":9,\"line\":1}}},\"documentation\":{\"value\":\"Collection types.\\n\\nRust's standard collection library provides efficient implementations of the\\nmost common general purpose programming data structures. By using the\\nstandard implementations, it should be possible for two libraries to\\ncommunicate without significant data conversion.\\n\\nTo get this out of the way: you should probably just use [`Vec`] or [`HashMap`].\\nThese two collections cover most use cases for generic data storage and\\nprocessing. They are exceptionally good at doing what they do. All the other\\ncollections in the standard library have specific use cases where they are\\nthe optimal choice, but these cases are borderline *niche* in comparison.\\nEven when `Vec` and `HashMap` are technically suboptimal, they're probably a\\ngood enough choice to get started.\\n\\nRust's collections can be grouped into four major categories:\\n\\n* Sequences: [`Vec`], [`VecDeque`], [`LinkedList`]\\n* Maps: [`HashMap`], [`BTreeMap`]\\n* Sets: [`HashSet`], [`BTreeSet`]\\n* Misc: [`BinaryHeap`]\\n\\n# When Should You Use Which Collection?\\n\\nThese are fairly high-level and quick break-downs of when each collection\\nshould be considered. Detailed discussions of strengths and weaknesses of\\nindividual collections can be found on their own documentation pages.\\n\\n### Use a `Vec` when:\\n* You want to collect items up to be processed or sent elsewhere later, and\\n  don't care about any properties of the actual values being stored.\\n* You want a sequence of elements in a particular order, and will only be\\n  appending to (or near) the end.\\n* You want a stack.\\n* You want a resizable array.\\n* You want a heap-allocated array.\\n\\n### Use a `VecDeque` when:\\n* You want a [`Vec`] that supports efficient insertion at both ends of the\\n  sequence.\\n* You want a queue.\\n* You want a double-ended queue (deque).\\n\\n### Use a `LinkedList` when:\\n* You want a [`Vec`] or [`VecDeque`] of unknown size, and can't tolerate\\n  amortization.\\n* You want to efficiently split and append lists.\\n* You are *absolutely* certain you *really*, *truly*, want a doubly linked\\n  list.\\n\\n### Use a `HashMap` when:\\n* You want to associate arbitrary keys with an arbitrary value.\\n* You want a cache.\\n* You want a map, with no extra functionality.\\n\\n### Use a `BTreeMap` when:\\n* You want a map sorted by its keys.\\n* You want to be able to get a range of entries on-demand.\\n* You're interested in what the smallest or largest key-value pair is.\\n* You want to find the largest or smallest key that is smaller or larger\\n  than something.\\n\\n### Use the `Set` variant of any of these `Map`s when:\\n* You just want to remember which keys you've seen.\\n* There is no meaningful value to associate with your keys.\\n* You just want a set.\\n\\n### Use a `BinaryHeap` when:\\n\\n* You want to store a bunch of elements, but only ever want to process the\\n  \\\"biggest\\\" or \\\"most important\\\" one at any given time.\\n* You want a priority queue.\\n\\n# Performance\\n\\nChoosing the right collection for the job requires an understanding of what\\neach collection is good at. Here we briefly summarize the performance of\\ndifferent collections for certain important operations. For further details,\\nsee each type's documentation, and note that the names of actual methods may\\ndiffer from the tables below on certain collections.\\n\\nThroughout the documentation, we will follow a few conventions. For all\\noperations, the collection's size is denoted by n. If another collection is\\ninvolved in the operation, it contains m elements. Operations which have an\\n*amortized* cost are suffixed with a `*`. Operations with an *expected*\\ncost are suffixed with a `~`.\\n\\nAll amortized costs are for the potential need to resize when capacity is\\nexhausted. If a resize occurs it will take *O*(*n*) time. Our collections never\\nautomatically shrink, so removal operations aren't amortized. Over a\\nsufficiently large series of operations, the average cost per operation will\\ndeterministically equal the given cost.\\n\\nOnly [`HashMap`] has expected costs, due to the probabilistic nature of hashing.\\nIt is theoretically possible, though very unlikely, for [`HashMap`] to\\nexperience worse performance.\\n\\n## Sequences\\n\\n|                | get(i)                 | insert(i)               | remove(i)              | append    | split_off(i)           |\\n|----------------|------------------------|-------------------------|------------------------|-----------|------------------------|\\n| [`Vec`]        | *O*(1)                 | *O*(*n*-*i*)*           | *O*(*n*-*i*)           | *O*(*m*)* | *O*(*n*-*i*)           |\\n| [`VecDeque`]   | *O*(1)                 | *O*(min(*i*, *n*-*i*))* | *O*(min(*i*, *n*-*i*)) | *O*(*m*)* | *O*(min(*i*, *n*-*i*)) |\\n| [`LinkedList`] | *O*(min(*i*, *n*-*i*)) | *O*(min(*i*, *n*-*i*))  | *O*(min(*i*, *n*-*i*)) | *O*(1)    | *O*(min(*i*, *n*-*i*)) |\\n\\nNote that where ties occur, [`Vec`] is generally going to be faster than [`VecDeque`], and\\n[`VecDeque`] is generally going to be faster than [`LinkedList`].\\n\\n## Maps\\n\\nFor Sets, all operations have the cost of the equivalent Map operation.\\n\\n|              | get           | insert        | remove        | range         | append       |\\n|--------------|---------------|---------------|---------------|---------------|--------------|\\n| [`HashMap`]  | *O*(1)~       | *O*(1)~*      | *O*(1)~       | N/A           | N/A          |\\n| [`BTreeMap`] | *O*(log(*n*)) | *O*(log(*n*)) | *O*(log(*n*)) | *O*(log(*n*)) | *O*(*n*+*m*) |\\n\\n# Correct and Efficient Usage of Collections\\n\\nOf course, knowing which collection is the right one for the job doesn't\\ninstantly permit you to use it correctly. Here are some quick tips for\\nefficient and correct usage of the standard collections in general. If\\nyou're interested in how to use a specific collection in particular, consult\\nits documentation for detailed discussion and code examples.\\n\\n## Capacity Management\\n\\nMany collections provide several constructors and methods that refer to\\n\\\"capacity\\\". These collections are generally built on top of an array.\\nOptimally, this array would be exactly the right size to fit only the\\nelements stored in the collection, but for the collection to do this would\\nbe very inefficient. If the backing array was exactly the right size at all\\ntimes, then every time an element is inserted, the collection would have to\\ngrow the array to fit it. Due to the way memory is allocated and managed on\\nmost computers, this would almost surely require allocating an entirely new\\narray and copying every single element from the old one into the new one.\\nHopefully you can see that this wouldn't be very efficient to do on every\\noperation.\\n\\nMost collections therefore use an *amortized* allocation strategy. They\\ngenerally let themselves have a fair amount of unoccupied space so that they\\nonly have to grow on occasion. When they do grow, they allocate a\\nsubstantially larger array to move the elements into so that it will take a\\nwhile for another grow to be required. While this strategy is great in\\ngeneral, it would be even better if the collection *never* had to resize its\\nbacking array. Unfortunately, the collection itself doesn't have enough\\ninformation to do this itself. Therefore, it is up to us programmers to give\\nit hints.\\n\\nAny `with_capacity` constructor will instruct the collection to allocate\\nenough space for the specified number of elements. Ideally this will be for\\nexactly that many elements, but some implementation details may prevent\\nthis. See collection-specific documentation for details. In general, use\\n`with_capacity` when you know exactly how many elements will be inserted, or\\nat least have a reasonable upper-bound on that number.\\n\\nWhen anticipating a large influx of elements, the `reserve` family of\\nmethods can be used to hint to the collection how much room it should make\\nfor the coming items. As with `with_capacity`, the precise behavior of\\nthese methods will be specific to the collection of interest.\\n\\nFor optimal performance, collections will generally avoid shrinking\\nthemselves. If you believe that a collection will not soon contain any more\\nelements, or just really need the memory, the `shrink_to_fit` method prompts\\nthe collection to shrink the backing array to the minimum size capable of\\nholding its elements.\\n\\nFinally, if ever you're interested in what the actual capacity of the\\ncollection is, most collections provide a `capacity` method to query this\\ninformation on demand. This can be useful for debugging purposes, or for\\nuse with the `reserve` methods.\\n\\n## Iterators\\n\\nIterators are a powerful and robust mechanism used throughout Rust's\\nstandard libraries. Iterators provide a sequence of values in a generic,\\nsafe, efficient and convenient way. The contents of an iterator are usually\\n*lazily* evaluated, so that only the values that are actually needed are\\never actually produced, and no allocation need be done to temporarily store\\nthem. Iterators are primarily consumed using a `for` loop, although many\\nfunctions also take iterators where a collection or sequence of values is\\ndesired.\\n\\nAll of the standard collections provide several iterators for performing\\nbulk manipulation of their contents. The three primary iterators almost\\nevery collection should provide are `iter`, `iter_mut`, and `into_iter`.\\nSome of these are not provided on collections where it would be unsound or\\nunreasonable to provide them.\\n\\n`iter` provides an iterator of immutable references to all the contents of a\\ncollection in the most \\\"natural\\\" order. For sequence collections like [`Vec`],\\nthis means the items will be yielded in increasing order of index starting\\nat 0. For ordered collections like [`BTreeMap`], this means that the items\\nwill be yielded in sorted order. For unordered collections like [`HashMap`],\\nthe items will be yielded in whatever order the internal representation made\\nmost convenient. This is great for reading through all the contents of the\\ncollection.\\n\\n```rust\\nlet vec = vec![1, 2, 3, 4];\\nfor x in vec.iter() {\\n   println!(\\\"vec contained {}\\\", x);\\n}\\n```\\n\\n`iter_mut` provides an iterator of *mutable* references in the same order as\\n`iter`. This is great for mutating all the contents of the collection.\\n\\n```rust\\nlet mut vec = vec![1, 2, 3, 4];\\nfor x in vec.iter_mut() {\\n   *x += 1;\\n}\\n```\\n\\n`into_iter` transforms the actual collection into an iterator over its\\ncontents by-value. This is great when the collection itself is no longer\\nneeded, and the values are needed elsewhere. Using `extend` with `into_iter`\\nis the main way that contents of one collection are moved into another.\\n`extend` automatically calls `into_iter`, and takes any <code>T: [IntoIterator]</code>.\\nCalling `collect` on an iterator itself is also a great way to convert one\\ncollection into another. Both of these methods should internally use the\\ncapacity management tools discussed in the previous section to do this as\\nefficiently as possible.\\n\\n```rust\\nlet mut vec1 = vec![1, 2, 3, 4];\\nlet vec2 = vec![10, 20, 30, 40];\\nvec1.extend(vec2);\\n```\\n\\n```rust\\nuse std::collections::VecDeque;\\n\\nlet vec = [1, 2, 3, 4];\\nlet buf: VecDeque<_> = vec.into_iter().collect();\\n```\\n\\nIterators also provide a series of *adapter* methods for performing common\\nthreads to sequences. Among the adapters are functional favorites like `map`,\\n`fold`, `skip` and `take`. Of particular interest to collections is the\\n`rev` adapter, which reverses any iterator that supports this operation. Most\\ncollections provide reversible iterators as the way to iterate over them in\\nreverse order.\\n\\n```rust\\nlet vec = vec![1, 2, 3, 4];\\nfor x in vec.iter().rev() {\\n   println!(\\\"vec contained {}\\\", x);\\n}\\n```\\n\\nSeveral other collection methods also return iterators to yield a sequence\\nof results but avoid allocating an entire collection to store the result in.\\nThis provides maximum flexibility as `collect` or `extend` can be called to\\n\\\"pipe\\\" the sequence into any collection if desired. Otherwise, the sequence\\ncan be looped over with a `for` loop. The iterator can also be discarded\\nafter partial use, preventing the computation of the unused items.\\n\\n## Entries\\n\\nThe `entry` API is intended to provide an efficient mechanism for\\nmanipulating the contents of a map conditionally on the presence of a key or\\nnot. The primary motivating use case for this is to provide efficient\\naccumulator maps. For instance, if one wishes to maintain a count of the\\nnumber of times each key has been seen, they will have to perform some\\nconditional logic on whether this is the first time the key has been seen or\\nnot. Normally, this would require a `find` followed by an `insert`,\\neffectively duplicating the search effort on each insertion.\\n\\nWhen a user calls `map.entry(key)`, the map will search for the key and\\nthen yield a variant of the `Entry` enum.\\n\\nIf a `Vacant(entry)` is yielded, then the key *was not* found. In this case\\nthe only valid operation is to `insert` a value into the entry. When this is\\ndone, the vacant entry is consumed and converted into a mutable reference to\\nthe value that was inserted. This allows for further manipulation of the\\nvalue beyond the lifetime of the search itself. This is useful if complex\\nlogic needs to be performed on the value regardless of whether the value was\\njust inserted.\\n\\nIf an `Occupied(entry)` is yielded, then the key *was* found. In this case,\\nthe user has several options: they can `get`, `insert` or `remove` the\\nvalue of the occupied entry. Additionally, they can convert the occupied\\nentry into a mutable reference to its value, providing symmetry to the\\nvacant `insert` case.\\n\\n### Examples\\n\\nHere are the two primary ways in which `entry` is used. First, a simple\\nexample where the logic performed on the values is trivial.\\n\\n#### Counting the number of times each character in a string occurs\\n\\n```rust\\nuse std::collections::btree_map::BTreeMap;\\n\\nlet mut count = BTreeMap::new();\\nlet message = \\\"she sells sea shells by the sea shore\\\";\\n\\nfor c in message.chars() {\\n    *count.entry(c).or_insert(0) += 1;\\n}\\n\\nassert_eq!(count.get(&'s'), Some(&8));\\n\\nprintln!(\\\"Number of occurrences of each character\\\");\\nfor (char, count) in &count {\\n    println!(\\\"{}: {}\\\", char, count);\\n}\\n```\\n\\nWhen the logic to be performed on the value is more complex, we may simply\\nuse the `entry` API to ensure that the value is initialized and perform the\\nlogic afterwards.\\n\\n#### Tracking the inebriation of customers at a bar\\n\\n```rust\\nuse std::collections::btree_map::BTreeMap;\\n\\n// A client of the bar. They have a blood alcohol level.\\nstruct Person { blood_alcohol: f32 }\\n\\n// All the orders made to the bar, by client ID.\\nlet orders = vec![1, 2, 1, 2, 3, 4, 1, 2, 2, 3, 4, 1, 1, 1];\\n\\n// Our clients.\\nlet mut blood_alcohol = BTreeMap::new();\\n\\nfor id in orders {\\n    // If this is the first time we've seen this customer, initialize them\\n    // with no blood alcohol. Otherwise, just retrieve them.\\n    let person = blood_alcohol.entry(id).or_insert(Person { blood_alcohol: 0.0 });\\n\\n    // Reduce their blood alcohol level. It takes time to order and drink a beer!\\n    person.blood_alcohol *= 0.9;\\n\\n    // Check if they're sober enough to have another beer.\\n    if person.blood_alcohol > 0.3 {\\n        // Too drunk... for now.\\n        println!(\\\"Sorry {}, I have to cut you off\\\", id);\\n    } else {\\n        // Have another!\\n        person.blood_alcohol += 0.1;\\n    }\\n}\\n```\\n\\n# Insert and complex keys\\n\\nIf we have a more complex key, calls to `insert` will\\nnot update the value of the key. For example:\\n\\n```rust\\nuse std::cmp::Ordering;\\nuse std::collections::BTreeMap;\\nuse std::hash::{Hash, Hasher};\\n\\n#[derive(Debug)]\\nstruct Foo {\\n    a: u32,\\n    b: &'static str,\\n}\\n\\n// we will compare `Foo`s by their `a` value only.\\nimpl PartialEq for Foo {\\n    fn eq(&self, other: &Self) -> bool { self.a == other.a }\\n}\\n\\nimpl Eq for Foo {}\\n\\n// we will hash `Foo`s by their `a` value only.\\nimpl Hash for Foo {\\n    fn hash<H: Hasher>(&self, h: &mut H) { self.a.hash(h); }\\n}\\n\\nimpl PartialOrd for Foo {\\n    fn partial_cmp(&self, other: &Self) -> Option<Ordering> { self.a.partial_cmp(&other.a) }\\n}\\n\\nimpl Ord for Foo {\\n    fn cmp(&self, other: &Self) -> Ordering { self.a.cmp(&other.a) }\\n}\\n\\nlet mut map = BTreeMap::new();\\nmap.insert(Foo { a: 1, b: \\\"baz\\\" }, 99);\\n\\n// We already have a Foo with an a of 1, so this will be updating the value.\\nmap.insert(Foo { a: 1, b: \\\"xyz\\\" }, 100);\\n\\n// The value has been updated...\\nassert_eq!(map.values().next().unwrap(), &100);\\n\\n// ...but the key hasn't changed. b is still \\\"baz\\\", not \\\"xyz\\\".\\nassert_eq!(map.keys().next().unwrap().b, \\\"baz\\\");\\n```\\n\\n[IntoIterator]: crate::iter::IntoIterator \\\"iter::IntoIterator\\\"\",\"kind\":\"markdown\"},\"kind\":9},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							51,
							67,
							7
						],
						"trigger": "collections"
					},
					"AgAAAAoAAAAAAAAACgAAAAAAAAADAAAAY29sCgAAAAAAAAAVAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQAAAAAAAAANAAAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "::Vec"
					},
					"BQAAABUAAAAAAAAAFgAAAAAAAAAAAAAAFgAAAAAAAAAXAAAAAAAAAAAAAAAXAAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAGQAAAAAAAAAAAAAAGQAAAAAAAAAaAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQAAAAAAAAAVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"VecDeque\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"VecDeque\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"VecDeque\",\"range\":{\"end\":{\"character\":25,\"line\":1},\"start\":{\"character\":22,\"line\":1}}},\"documentation\":{\"value\":\"A double-ended queue implemented with a growable ring buffer.\\n\\nThe \\\"default\\\" usage of this type as a queue is to use [`push_back`] to add to\\nthe queue, and [`pop_front`] to remove from the queue. [`extend`] and [`append`]\\npush onto the back in this manner, and iterating over `VecDeque` goes front\\nto back.\\n\\nA `VecDeque` with a known list of items can be initialized from an array:\\n\\n```rust\\nuse std::collections::VecDeque;\\n\\nlet deq = VecDeque::from([-1, 0, 1]);\\n```\\n\\nSince `VecDeque` is a ring buffer, its elements are not necessarily contiguous\\nin memory. If you want to access the elements as a single slice, such as for\\nefficient sorting, you can use [`make_contiguous`]. It rotates the `VecDeque`\\nso that its elements do not wrap, and returns a mutable slice to the\\nnow-contiguous element sequence.\\n\\n[`push_back`]: VecDeque::push_back\\n[`pop_front`]: VecDeque::pop_front\\n[`extend`]: VecDeque::extend\\n[`append`]: VecDeque::append\\n[`make_contiguous`]: VecDeque::make_contiguous\",\"kind\":\"markdown\"},\"kind\":22},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							53,
							69,
							5
						],
						"trigger": "VecDeque"
					},
					"AgAAABcAAAAAAAAAFwAAAAAAAAADAAAAVmVjFwAAAAAAAAAfAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgAAAAAAAAAaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAB8AAAAAAAAAIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwAAAAAAAAAfAAAAAAAAAAAAAAAAYHhA"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMHlA"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "python::"
					},
					"CAAAAAEAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAJAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAAAA"
				],
				[
					82,
					3,
					"delete_word",
					{
						"forward": false
					},
					"AwAAAAcAAAAAAAAABwAAAAAAAAACAAAAOjoBAAAAAAAAAAEAAAAAAAAABgAAAHB5dGhvbgAAAAAAAAAAAAAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAACQAAAAAAAAAJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"left_delete",
					null,
					"AQAAAJEDAAAAAAAAkQMAAAAAAACEAAAAICAgICNbaW5saW5lXQogICAgZm4gX19yZXByX18oJnNlbGYpIC0+IFN0cmluZyB7CiAgICAgICAgLy8geW91IG5lZWQgZm10OjpEaXNwbGF5IGZvciB0aGlzCiAgICAgICAgZm9ybWF0ISgie30iLCBzZWxmLl9mbG9hdCkKICAgIH0K",
					"AQAAAAAAAAABAAAAFQQAAAAAAACRAwAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					2,
					"left_delete",
					null,
					"AgAAANIDAAAAAAAA0gMAAAAAAAB+AAAAICAgICNbaW5saW5lXQogICAgZm4gX19zdHJfXygmc2VsZikgLT4gU3RyaW5nIHsKICAgICAgICAvLyBhbmQgZm9yIHRoaXM7IGZtdDo6RGlzcGxheQogICAgICAgIGZvcm1hdCEoInt9Iiwgc2VsZi5fZmxvYXQpCiAgICB90QMAAAAAAADRAwAAAAAAAAEAAAAK",
					"AQAAAAAAAAABAAAAUAQAAAAAAADSAwAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"left_delete",
					null,
					"AQAAAJADAAAAAAAAkAMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAkQMAAAAAAACRAwAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"left_delete",
					null,
					"AQAAAM8DAAAAAAAAzwMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAA0AMAAAAAAADQAwAAAAAAAAAAAAAAACpA"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAMYFAAAAAAAAxwUAAAAAAAAAAAAAxwUAAAAAAADIBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgUAAAAAAADGBQAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"paste",
					null,
					"AQAAAMcFAAAAAAAARQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwUAAAAAAADHBQAAAAAAAAAAAAAAAAAA"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": "List"
					},
					"BQAAANsFAAAAAAAA3AUAAAAAAAAAAAAA3AUAAAAAAADcBQAAAAAAAAUAAABGbG9hdNwFAAAAAAAA3QUAAAAAAAAAAAAA3QUAAAAAAADeBQAAAAAAAAAAAADeBQAAAAAAAN8FAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2wUAAAAAAADgBQAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAOwFAAAAAAAA7AUAAAAAAAAFAAAAU2l6ZWQ",
					"AQAAAAAAAAABAAAA8QUAAAAAAADxBQAAAAAAAAAAAAAAAPC/"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": "Ob"
					},
					"AgAAAOwFAAAAAAAA7QUAAAAAAAAAAAAA7QUAAAAAAADuBQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7AUAAAAAAADsBQAAAAAAAAAAAAAAAPC/"
				],
				[
					140,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_Object\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"_Object\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"_Object\",\"range\":{\"end\":{\"character\":11,\"line\":85},\"start\":{\"character\":9,\"line\":85}}},\"documentation\":{\"value\":\"the supreme _Object trait\\nthat its derived types should\\nimplement like all the __functions__ from python\",\"kind\":\"markdown\"},\"kind\":8},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							97,
							139,
							2
						],
						"trigger": "_Object"
					},
					"AgAAAOwFAAAAAAAA7AUAAAAAAAACAAAAT2LsBQAAAAAAAPMFAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7gUAAAAAAADuBQAAAAAAAAAAAAAAAPC/"
				],
				[
					150,
					1,
					"left_delete",
					null,
					"AQAAADwGAAAAAAAAPAYAAAAAAAABAAAAOA",
					"AQAAAAAAAAABAAAAPQYAAAAAAAA9BgAAAAAAAAAAAAAAAGpA"
				],
				[
					151,
					1,
					"insert",
					{
						"characters": "self._l"
					},
					"BwAAADwGAAAAAAAAPQYAAAAAAAAAAAAAPQYAAAAAAAA+BgAAAAAAAAAAAAA+BgAAAAAAAD8GAAAAAAAAAAAAAD8GAAAAAAAAQAYAAAAAAAAAAAAAQAYAAAAAAABBBgAAAAAAAAAAAABBBgAAAAAAAEIGAAAAAAAAAAAAAEIGAAAAAAAAQwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAYAAAAAAAA8BgAAAAAAAAAAAAAAAPC/"
				],
				[
					152,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_list\",\"additionalTextEdits\":[],\"detail\":\"VecDeque<T, Global>\",\"sortText\":\"fffffffd\",\"label\":\"_list\",\"deprecated\":false,\"textEdit\":{\"newText\":\"_list\",\"range\":{\"end\":{\"character\":15,\"line\":89},\"start\":{\"character\":13,\"line\":89}}},\"documentation\":{\"value\":\"_list which holds all the python objects together\",\"kind\":\"markdown\"},\"kind\":5},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							104,
							151,
							7
						],
						"trigger": "_list"
					},
					"AgAAAEEGAAAAAAAAQQYAAAAAAAACAAAAX2xBBgAAAAAAAEYGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwYAAAAAAABDBgAAAAAAAAAAAAAAAPC/"
				],
				[
					153,
					1,
					"insert",
					{
						"characters": ".le"
					},
					"AwAAAEYGAAAAAAAARwYAAAAAAAAAAAAARwYAAAAAAABIBgAAAAAAAAAAAABIBgAAAAAAAEkGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARgYAAAAAAABGBgAAAAAAAAAAAAAAAPC/"
				],
				[
					154,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"insertTextFormat\":2,\"filterText\":\"len\",\"preselect\":true,\"detail\":\"fn(&self) -> usize\",\"sortText\":\"fffffffa\",\"label\":\"len()\",\"additionalTextEdits\":[],\"deprecated\":false,\"textEdit\":{\"newText\":\"len()$0\",\"range\":{\"end\":{\"character\":21,\"line\":89},\"start\":{\"character\":19,\"line\":89}}},\"documentation\":{\"value\":\"Returns the number of elements in the `VecDeque`.\\n\\n# Examples\\n\\n```rust\\nuse std::collections::VecDeque;\\n\\nlet mut v = VecDeque::new();\\nassert_eq!(v.len(), 0);\\nv.push_back(1);\\nassert_eq!(v.len(), 1);\\n```\",\"kind\":\"markdown\"},\"kind\":2},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							106,
							153,
							3
						],
						"trigger": "len"
					},
					"AgAAAEcGAAAAAAAARwYAAAAAAAACAAAAbGVHBgAAAAAAAEwGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASQYAAAAAAABJBgAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAMYFAAAAAAAAxwUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgUAAAAAAADGBQAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"duplicate_line",
					null,
					"AQAAAGcBAAAAAAAAhwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgEAAAAAAABmAQAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAG4BAAAAAAAAbgEAAAAAAAAHAAAAX19sZW5fXw",
					"AQAAAAAAAAABAAAAdQEAAAAAAAB1AQAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": "__str__"
					},
					"BwAAAG4BAAAAAAAAbwEAAAAAAAAAAAAAbwEAAAAAAABwAQAAAAAAAAAAAABwAQAAAAAAAHEBAAAAAAAAAAAAAHEBAAAAAAAAcgEAAAAAAAAAAAAAcgEAAAAAAABzAQAAAAAAAAAAAABzAQAAAAAAAHQBAAAAAAAAAAAAAHQBAAAAAAAAdQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbgEAAAAAAABuAQAAAAAAAAAAAAAAAPC/"
				],
				[
					184,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAIABAAAAAAAAgAEAAAAAAAAFAAAAdXNpemU",
					"AQAAAAAAAAABAAAAhQEAAAAAAACFAQAAAAAAAAAAAAAAAPC/"
				],
				[
					185,
					1,
					"insert",
					{
						"characters": "String"
					},
					"BgAAAIABAAAAAAAAgQEAAAAAAAAAAAAAgQEAAAAAAACCAQAAAAAAAAAAAACCAQAAAAAAAIMBAAAAAAAAAAAAAIMBAAAAAAAAhAEAAAAAAAAAAAAAhAEAAAAAAACFAQAAAAAAAAAAAACFAQAAAAAAAIYBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAEAAAAAAACAAQAAAAAAAAAAAAAAAPC/"
				],
				[
					200,
					1,
					"insert",
					{
						"characters": "\n\nfn__"
					},
					"CQAAAPADAAAAAAAA8QMAAAAAAAAAAAAA8QMAAAAAAAD1AwAAAAAAAAAAAAD1AwAAAAAAAPYDAAAAAAAAAAAAAPYDAAAAAAAA+gMAAAAAAAAAAAAA8QMAAAAAAADxAwAAAAAAAAQAAAAgICAg9gMAAAAAAAD3AwAAAAAAAAAAAAD3AwAAAAAAAPgDAAAAAAAAAAAAAPgDAAAAAAAA+QMAAAAAAAAAAAAA+QMAAAAAAAD6AwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8AMAAAAAAADwAwAAAAAAAP///////+9/"
				],
				[
					201,
					2,
					"left_delete",
					null,
					"AgAAAPkDAAAAAAAA+QMAAAAAAAABAAAAX/gDAAAAAAAA+AMAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAA+gMAAAAAAAD6AwAAAAAAAAAAAAAAAPC/"
				],
				[
					202,
					1,
					"insert",
					{
						"characters": " __str"
					},
					"BgAAAPgDAAAAAAAA+QMAAAAAAAAAAAAA+QMAAAAAAAD6AwAAAAAAAAAAAAD6AwAAAAAAAPsDAAAAAAAAAAAAAPsDAAAAAAAA/AMAAAAAAAAAAAAA/AMAAAAAAAD9AwAAAAAAAAAAAAD9AwAAAAAAAP4DAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+AMAAAAAAAD4AwAAAAAAAAAAAAAAAPC/"
				],
				[
					203,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"insertTextFormat\":2,\"filterText\":\"__str__\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"fn __str__(..)\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"fn __str__(&self) -> String {\\n    $0\\n}\",\"range\":{\"end\":{\"character\":12,\"line\":61},\"start\":{\"character\":4,\"line\":61}}},\"kind\":2},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							135,
							202,
							6
						],
						"trigger": "__str__"
					},
					"AgAAAPYDAAAAAAAA9gMAAAAAAAAIAAAAZm4gX19zdHL2AwAAAAAAACIEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gMAAAAAAAD+AwAAAAAAAAAAAAAAAPC/"
				],
				[
					208,
					1,
					"insert",
					{
						"characters": "self."
					},
					"BQAAABwEAAAAAAAAHQQAAAAAAAAAAAAAHQQAAAAAAAAeBAAAAAAAAAAAAAAeBAAAAAAAAB8EAAAAAAAAAAAAAB8EAAAAAAAAIAQAAAAAAAAAAAAAIAQAAAAAAAAhBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHAQAAAAAAAAcBAAAAAAAAAAAAAAAAFpA"
				],
				[
					209,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAACAEAAAAAAAAIAQAAAAAAAABAAAALhwEAAAAAAAAHAQAAAAAAAAEAAAAc2VsZg",
					"AQAAAAAAAAABAAAAIQQAAAAAAAAhBAAAAAAAAAAAAAAAAPC/"
				],
				[
					210,
					1,
					"insert",
					{
						"characters": "format!"
					},
					"BwAAABwEAAAAAAAAHQQAAAAAAAAAAAAAHQQAAAAAAAAeBAAAAAAAAAAAAAAeBAAAAAAAAB8EAAAAAAAAAAAAAB8EAAAAAAAAIAQAAAAAAAAAAAAAIAQAAAAAAAAhBAAAAAAAAAAAAAAhBAAAAAAAACIEAAAAAAAAAAAAACIEAAAAAAAAIwQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHAQAAAAAAAAcBAAAAAAAAAAAAAAAAPC/"
				],
				[
					211,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACMEAAAAAAAAJQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIwQAAAAAAAAjBAAAAAAAAAAAAAAAAPC/"
				],
				[
					212,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAACQEAAAAAAAAJgQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAQAAAAAAAAkBAAAAAAAAAAAAAAAAPC/"
				],
				[
					213,
					1,
					"insert",
					{
						"characters": "{}"
					},
					"AgAAACUEAAAAAAAAJgQAAAAAAAAAAAAAJgQAAAAAAAAnBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQQAAAAAAAAlBAAAAAAAAAAAAAAAAPC/"
				],
				[
					215,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAACgEAAAAAAAAKQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAQAAAAAAAAoBAAAAAAAAAAAAAAAAPC/"
				],
				[
					216,
					1,
					"insert",
					{
						"characters": " slef._"
					},
					"BwAAACkEAAAAAAAAKgQAAAAAAAAAAAAAKgQAAAAAAAArBAAAAAAAAAAAAAArBAAAAAAAACwEAAAAAAAAAAAAACwEAAAAAAAALQQAAAAAAAAAAAAALQQAAAAAAAAuBAAAAAAAAAAAAAAuBAAAAAAAAC8EAAAAAAAAAAAAAC8EAAAAAAAAMAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQQAAAAAAAApBAAAAAAAAAAAAAAAAPC/"
				],
				[
					217,
					3,
					"delete_word",
					{
						"forward": false
					},
					"AwAAAC8EAAAAAAAALwQAAAAAAAABAAAAXy4EAAAAAAAALgQAAAAAAAABAAAALioEAAAAAAAAKgQAAAAAAAAEAAAAc2xlZg",
					"AQAAAAAAAAABAAAAMAQAAAAAAAAwBAAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"insert",
					{
						"characters": "self._flo"
					},
					"CQAAACoEAAAAAAAAKwQAAAAAAAAAAAAAKwQAAAAAAAAsBAAAAAAAAAAAAAAsBAAAAAAAAC0EAAAAAAAAAAAAAC0EAAAAAAAALgQAAAAAAAAAAAAALgQAAAAAAAAvBAAAAAAAAAAAAAAvBAAAAAAAADAEAAAAAAAAAAAAADAEAAAAAAAAMQQAAAAAAAAAAAAAMQQAAAAAAAAyBAAAAAAAAAAAAAAyBAAAAAAAADMEAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgQAAAAAAAAqBAAAAAAAAAAAAAAAAPC/"
				],
				[
					219,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_float\",\"additionalTextEdits\":[],\"detail\":\"T\",\"deprecated\":false,\"label\":\"_float\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"_float\",\"range\":{\"end\":{\"character\":31,\"line\":62},\"start\":{\"character\":27,\"line\":62}}},\"kind\":5},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							151,
							218,
							9
						],
						"trigger": "_float"
					},
					"AgAAAC8EAAAAAAAALwQAAAAAAAAEAAAAX2Zsby8EAAAAAAAANQQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwQAAAAAAAAzBAAAAAAAAAAAAAAAAPC/"
				],
				[
					237,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAMAGAAAAAAAAwQYAAAAAAAAAAAAAwQYAAAAAAADFBgAAAAAAAAAAAADFBgAAAAAAAMYGAAAAAAAAAAAAAMYGAAAAAAAAygYAAAAAAAAAAAAAwQYAAAAAAADBBgAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAAwAYAAAAAAADABgAAAAAAAAAAAAAAAPC/"
				],
				[
					238,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAMIGAAAAAAAAwgYAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAxgYAAAAAAADGBgAAAAAAAAAAAAAAAPC/"
				],
				[
					239,
					1,
					"paste",
					null,
					"AQAAAMIGAAAAAAAADAcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwgYAAAAAAADCBgAAAAAAAAAAAAAAAPC/"
				],
				[
					253,
					3,
					"delete_word",
					{
						"forward": false
					},
					"AwAAAP8GAAAAAAAA/wYAAAAAAAAGAAAAX2Zsb2F0/gYAAAAAAAD+BgAAAAAAAAEAAAAu+gYAAAAAAAD6BgAAAAAAAAQAAABzZWxm",
					"AQAAAAAAAAABAAAABQcAAAAAAAAFBwAAAAAAAAAAAAAAAPC/"
				],
				[
					255,
					1,
					"cut",
					null,
					"AQAAAOQGAAAAAAAA5AYAAAAAAAAYAAAAICAgICAgICBmb3JtYXQhKCJ7fSIsICkK",
					"AQAAAAAAAAABAAAA9QYAAAAAAAD1BgAAAAAAAAAAAAAAAPC/"
				],
				[
					258,
					1,
					"insert",
					{
						"characters": "\nformat"
					},
					"CQAAAOMGAAAAAAAA5AYAAAAAAAAAAAAA5AYAAAAAAADoBgAAAAAAAAAAAADoBgAAAAAAAOwGAAAAAAAAAAAAAOwGAAAAAAAA7QYAAAAAAAAAAAAA7QYAAAAAAADuBgAAAAAAAAAAAADuBgAAAAAAAO8GAAAAAAAAAAAAAO8GAAAAAAAA8AYAAAAAAAAAAAAA8AYAAAAAAADxBgAAAAAAAAAAAADxBgAAAAAAAPIGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4wYAAAAAAADjBgAAAAAAAP///////+9/"
				],
				[
					259,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAPIGAAAAAAAA9AYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8gYAAAAAAADyBgAAAAAAAAAAAAAAAPC/"
				],
				[
					261,
					1,
					"insert",
					{
						"characters": "!"
					},
					"AQAAAPIGAAAAAAAA8wYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8gYAAAAAAADyBgAAAAAAAAAAAAAAAPC/"
				],
				[
					263,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAPQGAAAAAAAA9gYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9AYAAAAAAAD0BgAAAAAAAAAAAAAAAPC/"
				],
				[
					264,
					1,
					"insert",
					{
						"characters": "not"
					},
					"AwAAAPUGAAAAAAAA9gYAAAAAAAAAAAAA9gYAAAAAAAD3BgAAAAAAAAAAAAD3BgAAAAAAAPgGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9QYAAAAAAAD1BgAAAAAAAAAAAAAAAPC/"
				],
				[
					265,
					1,
					"insert",
					{
						"characters": " implemented"
					},
					"DAAAAPgGAAAAAAAA+QYAAAAAAAAAAAAA+QYAAAAAAAD6BgAAAAAAAAAAAAD6BgAAAAAAAPsGAAAAAAAAAAAAAPsGAAAAAAAA/AYAAAAAAAAAAAAA/AYAAAAAAAD9BgAAAAAAAAAAAAD9BgAAAAAAAP4GAAAAAAAAAAAAAP4GAAAAAAAA/wYAAAAAAAAAAAAA/wYAAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAEHAAAAAAAAAAAAAAEHAAAAAAAAAgcAAAAAAAAAAAAAAgcAAAAAAAADBwAAAAAAAAAAAAADBwAAAAAAAAQHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+AYAAAAAAAD4BgAAAAAAAAAAAAAAAPC/"
				],
				[
					286,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAANYHAAAAAAAA1wcAAAAAAAAAAAAA1wcAAAAAAADbBwAAAAAAAAAAAADbBwAAAAAAANwHAAAAAAAAAAAAANwHAAAAAAAA4AcAAAAAAAAAAAAA1wcAAAAAAADXBwAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAA1gcAAAAAAADWBwAAAAAAAAAAAAAAAPC/"
				],
				[
					289,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAANwHAAAAAAAA4AcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AcAAAAAAADcBwAAAAAAAAAAAAAAAEpA"
				],
				[
					290,
					1,
					"left_delete",
					null,
					"AQAAANwHAAAAAAAA3AcAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAA4AcAAAAAAADgBwAAAAAAAAAAAAAAAPC/"
				],
				[
					291,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAANwHAAAAAAAA3QcAAAAAAAAAAAAA3QcAAAAAAADeBwAAAAAAAAAAAADeBwAAAAAAAN8HAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AcAAAAAAADcBwAAAAAAAAAAAAAAAPC/"
				],
				[
					292,
					1,
					"insert",
					{
						"characters": " lista"
					},
					"BgAAAN8HAAAAAAAA4AcAAAAAAAAAAAAA4AcAAAAAAADhBwAAAAAAAAAAAADhBwAAAAAAAOIHAAAAAAAAAAAAAOIHAAAAAAAA4wcAAAAAAAAAAAAA4wcAAAAAAADkBwAAAAAAAAAAAADkBwAAAAAAAOUHAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3wcAAAAAAADfBwAAAAAAAAAAAAAAAPC/"
				],
				[
					293,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAOUHAAAAAAAA5gcAAAAAAAAAAAAA5gcAAAAAAADnBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5QcAAAAAAADlBwAAAAAAAAAAAAAAAPC/"
				],
				[
					294,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAOcHAAAAAAAA6AcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5wcAAAAAAADnBwAAAAAAAAAAAAAAAPC/"
				],
				[
					295,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAAOYHAAAAAAAA5gcAAAAAAAACAAAAPSDgBwAAAAAAAOAHAAAAAAAABgAAAGxpc3RhIA",
					"AQAAAAAAAAABAAAA6AcAAAAAAADoBwAAAAAAAAAAAAAAAPC/"
				],
				[
					296,
					1,
					"insert",
					{
						"characters": "lista"
					},
					"BQAAAOAHAAAAAAAA4QcAAAAAAAAAAAAA4QcAAAAAAADiBwAAAAAAAAAAAADiBwAAAAAAAOMHAAAAAAAAAAAAAOMHAAAAAAAA5AcAAAAAAAAAAAAA5AcAAAAAAADlBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4AcAAAAAAADgBwAAAAAAAAAAAAAAAPC/"
				],
				[
					297,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAOUHAAAAAAAA5gcAAAAAAAAAAAAA5gcAAAAAAADnBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5QcAAAAAAADlBwAAAAAAAAAAAAAAAPC/"
				],
				[
					298,
					1,
					"insert",
					{
						"characters": " List::"
					},
					"BwAAAOcHAAAAAAAA6AcAAAAAAAAAAAAA6AcAAAAAAADpBwAAAAAAAAAAAADpBwAAAAAAAOoHAAAAAAAAAAAAAOoHAAAAAAAA6wcAAAAAAAAAAAAA6wcAAAAAAADsBwAAAAAAAAAAAADsBwAAAAAAAO0HAAAAAAAAAAAAAO0HAAAAAAAA7gcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5wcAAAAAAADnBwAAAAAAAAAAAAAAAPC/"
				],
				[
					301,
					1,
					"insert",
					{
						"characters": "\n\nimpl<>T"
					},
					"CQAAADIGAAAAAAAAMwYAAAAAAAAAAAAAMwYAAAAAAAA0BgAAAAAAAAAAAAA0BgAAAAAAADUGAAAAAAAAAAAAADUGAAAAAAAANgYAAAAAAAAAAAAANgYAAAAAAAA3BgAAAAAAAAAAAAA3BgAAAAAAADgGAAAAAAAAAAAAADgGAAAAAAAAOQYAAAAAAAAAAAAAOQYAAAAAAAA6BgAAAAAAAAAAAAA6BgAAAAAAADsGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgYAAAAAAAAyBgAAAAAAAAAAAAAAAPC/"
				],
				[
					302,
					2,
					"left_delete",
					null,
					"AgAAADoGAAAAAAAAOgYAAAAAAAABAAAAVDkGAAAAAAAAOQYAAAAAAAABAAAAPg",
					"AQAAAAAAAAABAAAAOwYAAAAAAAA7BgAAAAAAAAAAAAAAAPC/"
				],
				[
					303,
					1,
					"insert",
					{
						"characters": "T>"
					},
					"AgAAADkGAAAAAAAAOgYAAAAAAAAAAAAAOgYAAAAAAAA7BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQYAAAAAAAA5BgAAAAAAAAAAAAAAAPC/"
				],
				[
					304,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADsGAAAAAAAAPAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwYAAAAAAAA7BgAAAAAAAAAAAAAAAPC/"
				],
				[
					305,
					1,
					"insert",
					{
						"characters": "List<T>"
					},
					"BwAAADwGAAAAAAAAPQYAAAAAAAAAAAAAPQYAAAAAAAA+BgAAAAAAAAAAAAA+BgAAAAAAAD8GAAAAAAAAAAAAAD8GAAAAAAAAQAYAAAAAAAAAAAAAQAYAAAAAAABBBgAAAAAAAAAAAABBBgAAAAAAAEIGAAAAAAAAAAAAAEIGAAAAAAAAQwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAYAAAAAAAA8BgAAAAAAAAAAAAAAAPC/"
				],
				[
					306,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEMGAAAAAAAARAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwYAAAAAAABDBgAAAAAAAAAAAAAAAPC/"
				],
				[
					307,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAEQGAAAAAAAARgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAYAAAAAAABEBgAAAAAAAAAAAAAAAPC/"
				],
				[
					308,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAEUGAAAAAAAARgYAAAAAAAAAAAAARgYAAAAAAABHBgAAAAAAAAAAAABGBgAAAAAAAEoGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQYAAAAAAABFBgAAAAAAAAAAAAAAAPC/"
				],
				[
					312,
					1,
					"left_delete",
					null,
					"AgAAAEMGAAAAAAAAQwYAAAAAAAABAAAAIEUGAAAAAAAARQYAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAARAYAAAAAAABEBgAAAAAAAAAAAAAAAPC/"
				],
				[
					313,
					1,
					"insert",
					{
						"characters": "\nwe"
					},
					"AwAAAEMGAAAAAAAARAYAAAAAAAAAAAAARAYAAAAAAABFBgAAAAAAAAAAAABFBgAAAAAAAEYGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwYAAAAAAABDBgAAAAAAAAAAAAAAAPC/"
				],
				[
					314,
					1,
					"left_delete",
					null,
					"AQAAAEUGAAAAAAAARQYAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAARgYAAAAAAABGBgAAAAAAAAAAAAAAAPC/"
				],
				[
					315,
					1,
					"insert",
					{
						"characters": "here"
					},
					"BAAAAEUGAAAAAAAARgYAAAAAAAAAAAAARgYAAAAAAABHBgAAAAAAAAAAAABHBgAAAAAAAEgGAAAAAAAAAAAAAEgGAAAAAAAASQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARQYAAAAAAABFBgAAAAAAAAAAAAAAAPC/"
				],
				[
					316,
					1,
					"insert",
					{
						"characters": " T:"
					},
					"AwAAAEkGAAAAAAAASgYAAAAAAAAAAAAASgYAAAAAAABLBgAAAAAAAAAAAABLBgAAAAAAAEwGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASQYAAAAAAABJBgAAAAAAAAAAAAAAAPC/"
				],
				[
					317,
					1,
					"insert",
					{
						"characters": " O"
					},
					"AgAAAEwGAAAAAAAATQYAAAAAAAAAAAAATQYAAAAAAABOBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAYAAAAAAABMBgAAAAAAAAAAAAAAAPC/"
				],
				[
					318,
					1,
					"left_delete",
					null,
					"AQAAAE0GAAAAAAAATQYAAAAAAAABAAAATw",
					"AQAAAAAAAAABAAAATgYAAAAAAABOBgAAAAAAAAAAAAAAAPC/"
				],
				[
					319,
					1,
					"insert",
					{
						"characters": "_OB"
					},
					"AwAAAE0GAAAAAAAATgYAAAAAAAAAAAAATgYAAAAAAABPBgAAAAAAAAAAAABPBgAAAAAAAFAGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQYAAAAAAABNBgAAAAAAAAAAAAAAAPC/"
				],
				[
					320,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_Object\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"_Object\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"_Object\",\"range\":{\"end\":{\"character\":12,\"line\":90},\"start\":{\"character\":9,\"line\":90}}},\"documentation\":{\"value\":\"the supreme _Object trait\\nthat its derived types should\\nimplement like all the __functions__ from python\",\"kind\":\"markdown\"},\"kind\":8},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							227,
							319,
							3
						],
						"trigger": "_Object"
					},
					"AgAAAE0GAAAAAAAATQYAAAAAAAADAAAAX09CTQYAAAAAAABUBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUAYAAAAAAABQBgAAAAAAAAAAAAAAAPC/"
				],
				[
					321,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFQGAAAAAAAAVQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVAYAAAAAAABUBgAAAAAAAAAAAAAAAPC/"
				],
				[
					330,
					1,
					"reindent",
					null,
					"AQAAAFcGAAAAAAAAWwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwYAAAAAAABXBgAAAAAAAAAAAAAAAPC/"
				],
				[
					331,
					1,
					"insert",
					{
						"characters": "pub"
					},
					"AwAAAFsGAAAAAAAAXAYAAAAAAAAAAAAAXAYAAAAAAABdBgAAAAAAAAAAAABdBgAAAAAAAF4GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWwYAAAAAAABbBgAAAAAAAAAAAAAAAPC/"
				],
				[
					332,
					1,
					"insert",
					{
						"characters": " new"
					},
					"BAAAAF4GAAAAAAAAXwYAAAAAAAAAAAAAXwYAAAAAAABgBgAAAAAAAAAAAABgBgAAAAAAAGEGAAAAAAAAAAAAAGEGAAAAAAAAYgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgYAAAAAAABeBgAAAAAAAAAAAAAAAPC/"
				],
				[
					333,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAF8GAAAAAAAAXwYAAAAAAAADAAAAbmV3",
					"AQAAAAAAAAABAAAAYgYAAAAAAABiBgAAAAAAAAAAAAAAAPC/"
				],
				[
					334,
					1,
					"insert",
					{
						"characters": "fn"
					},
					"AgAAAF8GAAAAAAAAYAYAAAAAAAAAAAAAYAYAAAAAAABhBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwYAAAAAAABfBgAAAAAAAAAAAAAAAPC/"
				],
				[
					335,
					1,
					"insert",
					{
						"characters": " new"
					},
					"BAAAAGEGAAAAAAAAYgYAAAAAAAAAAAAAYgYAAAAAAABjBgAAAAAAAAAAAABjBgAAAAAAAGQGAAAAAAAAAAAAAGQGAAAAAAAAZQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYQYAAAAAAABhBgAAAAAAAAAAAAAAAPC/"
				],
				[
					336,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAGUGAAAAAAAAZwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQYAAAAAAABlBgAAAAAAAAAAAAAAAPC/"
				],
				[
					338,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGcGAAAAAAAAaAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZwYAAAAAAABnBgAAAAAAAAAAAAAAAPC/"
				],
				[
					339,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAGgGAAAAAAAAagYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAYAAAAAAABoBgAAAAAAAAAAAAAAAPC/"
				],
				[
					340,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAGkGAAAAAAAAagYAAAAAAAAAAAAAagYAAAAAAABuBgAAAAAAAAAAAABuBgAAAAAAAG8GAAAAAAAAAAAAAG8GAAAAAAAAcwYAAAAAAAAAAAAAagYAAAAAAABqBgAAAAAAAAQAAAAgICAgagYAAAAAAAByBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQYAAAAAAABpBgAAAAAAAAAAAAAAAPC/"
				],
				[
					341,
					1,
					"insert",
					{
						"characters": "List"
					},
					"BAAAAHIGAAAAAAAAcwYAAAAAAAAAAAAAcwYAAAAAAAB0BgAAAAAAAAAAAAB0BgAAAAAAAHUGAAAAAAAAAAAAAHUGAAAAAAAAdgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgYAAAAAAAByBgAAAAAAAAAAAAAAAPC/"
				],
				[
					342,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHYGAAAAAAAAdwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgYAAAAAAAB2BgAAAAAAAAAAAAAAAPC/"
				],
				[
					351,
					1,
					"insert",
					{
						"characters": "_>"
					},
					"AgAAAGgGAAAAAAAAaQYAAAAAAAAAAAAAaQYAAAAAAABqBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAYAAAAAAABoBgAAAAAAAAAAAAAAAPC/"
				],
				[
					352,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGoGAAAAAAAAawYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagYAAAAAAABqBgAAAAAAAAAAAAAAAPC/"
				],
				[
					353,
					3,
					"left_delete",
					null,
					"AwAAAGoGAAAAAAAAagYAAAAAAAABAAAAIGkGAAAAAAAAaQYAAAAAAAABAAAAPmgGAAAAAAAAaAYAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAAawYAAAAAAABrBgAAAAAAAAAAAAAAAPC/"
				],
				[
					354,
					1,
					"insert",
					{
						"characters": "->"
					},
					"AgAAAGgGAAAAAAAAaQYAAAAAAAAAAAAAaQYAAAAAAABqBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaAYAAAAAAABoBgAAAAAAAAAAAAAAAPC/"
				],
				[
					355,
					1,
					"insert",
					{
						"characters": " Self"
					},
					"BQAAAGoGAAAAAAAAawYAAAAAAAAAAAAAawYAAAAAAABsBgAAAAAAAAAAAABsBgAAAAAAAG0GAAAAAAAAAAAAAG0GAAAAAAAAbgYAAAAAAAAAAAAAbgYAAAAAAABvBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagYAAAAAAABqBgAAAAAAAAAAAAAAAPC/"
				],
				[
					356,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAG8GAAAAAAAAcAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwYAAAAAAABvBgAAAAAAAAAAAAAAAPC/"
				],
				[
					358,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAH8GAAAAAAAAgQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwYAAAAAAAB/BgAAAAAAAAAAAAAAUHRA"
				],
				[
					359,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAIAGAAAAAAAAgQYAAAAAAAAAAAAAgQYAAAAAAACJBgAAAAAAAAAAAACJBgAAAAAAAIoGAAAAAAAAAAAAAIoGAAAAAAAAkgYAAAAAAAAAAAAAgQYAAAAAAACBBgAAAAAAAAgAAAAgICAgICAgIIEGAAAAAAAAjQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAYAAAAAAACABgAAAAAAAAAAAAAAAPC/"
				],
				[
					360,
					1,
					"insert",
					{
						"characters": "_li"
					},
					"AwAAAI0GAAAAAAAAjgYAAAAAAAAAAAAAjgYAAAAAAACPBgAAAAAAAAAAAACPBgAAAAAAAJAGAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQYAAAAAAACNBgAAAAAAAAAAAAAAAPC/"
				],
				[
					361,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_list\",\"preselect\":true,\"detail\":\"VecDeque<T, Global>\",\"sortText\":\"fffffffa\",\"label\":\"_list\",\"additionalTextEdits\":[],\"deprecated\":false,\"textEdit\":{\"newText\":\"_list\",\"range\":{\"end\":{\"character\":15,\"line\":94},\"start\":{\"character\":12,\"line\":94}}},\"documentation\":{\"value\":\"_list which holds all the python objects together\",\"kind\":\"markdown\"},\"kind\":5},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							263,
							360,
							3
						],
						"trigger": "_list"
					},
					"AgAAAI0GAAAAAAAAjQYAAAAAAAADAAAAX2xpjQYAAAAAAACSBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAYAAAAAAACQBgAAAAAAAAAAAAAAAPC/"
				],
				[
					362,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAJIGAAAAAAAAkwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgYAAAAAAACSBgAAAAAAAAAAAAAAAPC/"
				],
				[
					363,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJMGAAAAAAAAlAYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwYAAAAAAACTBgAAAAAAAAAAAAAAAPC/"
				],
				[
					366,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BgAAAHEGAAAAAAAAcgYAAAAAAAAAAAAAcgYAAAAAAAB2BgAAAAAAAAAAAAB2BgAAAAAAAHoGAAAAAAAAAAAAAHoGAAAAAAAAewYAAAAAAAAAAAAAewYAAAAAAAB8BgAAAAAAAAAAAAB8BgAAAAAAAH0GAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQYAAAAAAABxBgAAAAAAAP///////+9/"
				],
				[
					367,
					1,
					"insert",
					{
						"characters": " _"
					},
					"AgAAAH0GAAAAAAAAfgYAAAAAAAAAAAAAfgYAAAAAAAB/BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQYAAAAAAAB9BgAAAAAAAAAAAAAAAPC/"
				],
				[
					368,
					1,
					"insert",
					{
						"characters": "list"
					},
					"BAAAAH8GAAAAAAAAgAYAAAAAAAAAAAAAgAYAAAAAAACBBgAAAAAAAAAAAACBBgAAAAAAAIIGAAAAAAAAAAAAAIIGAAAAAAAAgwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwYAAAAAAAB/BgAAAAAAAAAAAAAAAPC/"
				],
				[
					369,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAIMGAAAAAAAAhAYAAAAAAAAAAAAAhAYAAAAAAACFBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwYAAAAAAACDBgAAAAAAAAAAAAAAAPC/"
				],
				[
					370,
					1,
					"left_delete",
					null,
					"AQAAAIQGAAAAAAAAhAYAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAhQYAAAAAAACFBgAAAAAAAAAAAAAAAPC/"
				],
				[
					371,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIQGAAAAAAAAhQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAYAAAAAAACEBgAAAAAAAAAAAAAAAPC/"
				],
				[
					372,
					1,
					"left_delete",
					null,
					"AQAAAIQGAAAAAAAAhAYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAhQYAAAAAAACFBgAAAAAAAAAAAAAAAPC/"
				],
				[
					373,
					1,
					"insert",
					{
						"characters": "="
					},
					"AQAAAIQGAAAAAAAAhQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAYAAAAAAACEBgAAAAAAAAAAAAAAAPC/"
				],
				[
					374,
					1,
					"insert",
					{
						"characters": " Vec"
					},
					"BAAAAIUGAAAAAAAAhgYAAAAAAAAAAAAAhgYAAAAAAACHBgAAAAAAAAAAAACHBgAAAAAAAIgGAAAAAAAAAAAAAIgGAAAAAAAAiQYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQYAAAAAAACFBgAAAAAAAAAAAAAAAPC/"
				],
				[
					376,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"VecDeque\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"VecDeque\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"VecDeque\",\"range\":{\"end\":{\"character\":23,\"line\":93},\"start\":{\"character\":20,\"line\":93}}},\"documentation\":{\"value\":\"A double-ended queue implemented with a growable ring buffer.\\n\\nThe \\\"default\\\" usage of this type as a queue is to use [`push_back`] to add to\\nthe queue, and [`pop_front`] to remove from the queue. [`extend`] and [`append`]\\npush onto the back in this manner, and iterating over `VecDeque` goes front\\nto back.\\n\\nA `VecDeque` with a known list of items can be initialized from an array:\\n\\n```rust\\nuse std::collections::VecDeque;\\n\\nlet deq = VecDeque::from([-1, 0, 1]);\\n```\\n\\nSince `VecDeque` is a ring buffer, its elements are not necessarily contiguous\\nin memory. If you want to access the elements as a single slice, such as for\\nefficient sorting, you can use [`make_contiguous`]. It rotates the `VecDeque`\\nso that its elements do not wrap, and returns a mutable slice to the\\nnow-contiguous element sequence.\\n\\n[`push_back`]: VecDeque::push_back\\n[`pop_front`]: VecDeque::pop_front\\n[`extend`]: VecDeque::extend\\n[`append`]: VecDeque::append\\n[`make_contiguous`]: VecDeque::make_contiguous\",\"kind\":\"markdown\"},\"kind\":22},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							277,
							374,
							4
						],
						"trigger": "VecDeque"
					},
					"AgAAAIYGAAAAAAAAhgYAAAAAAAADAAAAVmVjhgYAAAAAAACOBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQYAAAAAAACJBgAAAAAAAAAAAAAAAPC/"
				],
				[
					377,
					1,
					"insert",
					{
						"characters": "::new"
					},
					"BQAAAI4GAAAAAAAAjwYAAAAAAAAAAAAAjwYAAAAAAACQBgAAAAAAAAAAAACQBgAAAAAAAJEGAAAAAAAAAAAAAJEGAAAAAAAAkgYAAAAAAAAAAAAAkgYAAAAAAACTBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgYAAAAAAACOBgAAAAAAAAAAAAAAAPC/"
				],
				[
					378,
					2,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AgAAAJMGAAAAAAAAlQYAAAAAAAAAAAAAlAYAAAAAAACWBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwYAAAAAAACTBgAAAAAAAAAAAAAAAPC/"
				],
				[
					380,
					1,
					"left_delete",
					null,
					"AQAAAJUGAAAAAAAAlQYAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAlgYAAAAAAACWBgAAAAAAAAAAAAAAAPC/"
				],
				[
					381,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAJQGAAAAAAAAlAYAAAAAAAABAAAAKJQGAAAAAAAAlAYAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAlQYAAAAAAACVBgAAAAAAAAAAAAAAAPC/"
				],
				[
					382,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJQGAAAAAAAAlgYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAYAAAAAAACUBgAAAAAAAAAAAAAAAPC/"
				],
				[
					384,
					2,
					"left_delete",
					null,
					"AgAAAJUGAAAAAAAAlQYAAAAAAAABAAAAKZQGAAAAAAAAlAYAAAAAAAABAAAAKA",
					"AQAAAAAAAAABAAAAlgYAAAAAAACWBgAAAAAAAAAAAAAAAPC/"
				],
				[
					385,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAAJQGAAAAAAAAlQYAAAAAAAAAAAAAlQYAAAAAAACWBgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAYAAAAAAACUBgAAAAAAAAAAAAAAAPC/"
				],
				[
					387,
					1,
					"trim_trailing_white_space",
					null,
					"AQAAALgGAAAAAAAAuAYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAlgYAAAAAAACWBgAAAAAAAAAAAAAAAPC/"
				],
				[
					392,
					1,
					"insert",
					{
						"characters": " _"
					},
					"AgAAALgGAAAAAAAAuQYAAAAAAAAAAAAAuQYAAAAAAAC6BgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAYAAAAAAAC4BgAAAAAAAAAAAAAAQH1A"
				],
				[
					393,
					3,
					"left_delete",
					null,
					"AwAAALkGAAAAAAAAuQYAAAAAAAABAAAAX7gGAAAAAAAAuAYAAAAAAAABAAAAILcGAAAAAAAAtwYAAAAAAAABAAAAOg",
					"AQAAAAAAAAABAAAAugYAAAAAAAC6BgAAAAAAAAAAAAAAAPC/"
				],
				[
					412,
					1,
					"insert",
					{
						"characters": "new"
					},
					"AwAAAIUIAAAAAAAAhggAAAAAAAAAAAAAhggAAAAAAACHCAAAAAAAAAAAAACHCAAAAAAAAIgIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQgAAAAAAACFCAAAAAAAAAAAAAAAAPC/"
				],
				[
					413,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAIgIAAAAAAAAiggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAgAAAAAAACICAAAAAAAAAAAAAAAAPC/"
				],
				[
					415,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAIoIAAAAAAAAiwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiggAAAAAAACKCAAAAAAAAAAAAAAAAPC/"
				],
				[
					476,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"CgAAAMgGAAAAAAAAywYAAAAAAAAAAAAAwgYAAAAAAADFBgAAAAAAAAAAAAC4BgAAAAAAALsGAAAAAAAAAAAAAKYGAAAAAAAAqQYAAAAAAAAAAAAAlwYAAAAAAACaBgAAAAAAAAAAAAByBgAAAAAAAHUGAAAAAAAAAAAAAFcGAAAAAAAAWgYAAAAAAAAAAAAAVQYAAAAAAABYBgAAAAAAAAAAAABEBgAAAAAAAEcGAAAAAAAAAAAAADQGAAAAAAAANwYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAygYAAAAAAAA0BgAAAAAAAAAAAAAAAPC/"
				],
				[
					485,
					1,
					"reindent",
					null,
					"AQAAAIwIAAAAAAAAkAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAgAAAAAAACMCAAAAAAAAAAAAAAAAPC/"
				],
				[
					501,
					4,
					"delete_word",
					{
						"forward": false
					},
					"BQAAAKoIAAAAAAAAqggAAAAAAAADAAAAKCk7jAgAAAAAAACMCAAAAAAAAAQAAAAgICAgowgAAAAAAACjCAAAAAAAAAMAAABuZXehCAAAAAAAAKEIAAAAAAAAAgAAADo6nQgAAAAAAACdCAAAAAAAAAQAAABMaXN0",
					"AQAAAAAAAAABAAAArQgAAAAAAACtCAAAAAAAAP///////+9/"
				],
				[
					502,
					1,
					"insert",
					{
						"characters": "v"
					},
					"AQAAAJ0IAAAAAAAAnggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQgAAAAAAACdCAAAAAAAAAAAAAAAAPC/"
				],
				[
					503,
					1,
					"left_delete",
					null,
					"AQAAAJ0IAAAAAAAAnQgAAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAAnggAAAAAAACeCAAAAAAAAAAAAAAAAPC/"
				],
				[
					504,
					1,
					"insert",
					{
						"characters": "Vec"
					},
					"AwAAAJ0IAAAAAAAAnggAAAAAAAAAAAAAnggAAAAAAACfCAAAAAAAAAAAAACfCAAAAAAAAKAIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQgAAAAAAACdCAAAAAAAAAAAAAAAAPC/"
				],
				[
					506,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"VecDeque\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"VecDeque\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"VecDeque\",\"range\":{\"end\":{\"character\":19,\"line\":126},\"start\":{\"character\":16,\"line\":126}}},\"documentation\":{\"value\":\"A double-ended queue implemented with a growable ring buffer.\\n\\nThe \\\"default\\\" usage of this type as a queue is to use [`push_back`] to add to\\nthe queue, and [`pop_front`] to remove from the queue. [`extend`] and [`append`]\\npush onto the back in this manner, and iterating over `VecDeque` goes front\\nto back.\\n\\nA `VecDeque` with a known list of items can be initialized from an array:\\n\\n```rust\\nuse std::collections::VecDeque;\\n\\nlet deq = VecDeque::from([-1, 0, 1]);\\n```\\n\\nSince `VecDeque` is a ring buffer, its elements are not necessarily contiguous\\nin memory. If you want to access the elements as a single slice, such as for\\nefficient sorting, you can use [`make_contiguous`]. It rotates the `VecDeque`\\nso that its elements do not wrap, and returns a mutable slice to the\\nnow-contiguous element sequence.\\n\\n[`push_back`]: VecDeque::push_back\\n[`pop_front`]: VecDeque::pop_front\\n[`extend`]: VecDeque::extend\\n[`append`]: VecDeque::append\\n[`make_contiguous`]: VecDeque::make_contiguous\",\"kind\":\"markdown\"},\"kind\":22},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							342,
							504,
							3
						],
						"trigger": "VecDeque"
					},
					"AgAAAJ0IAAAAAAAAnQgAAAAAAAADAAAAVmVjnQgAAAAAAAClCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAgAAAAAAACgCAAAAAAAAAAAAAAAAPC/"
				],
				[
					507,
					1,
					"insert",
					{
						"characters": "::"
					},
					"AgAAAKUIAAAAAAAApggAAAAAAAAAAAAApggAAAAAAACnCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQgAAAAAAAClCAAAAAAAAAAAAAAAAPC/"
				],
				[
					508,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"insertTextFormat\":2,\"filterText\":\"new\",\"preselect\":true,\"detail\":\"fn() -> VecDeque<T, Global>\",\"sortText\":\"fffffffa\",\"label\":\"new()\",\"additionalTextEdits\":[],\"deprecated\":false,\"textEdit\":{\"newText\":\"new()$0\",\"range\":{\"end\":{\"character\":26,\"line\":126},\"start\":{\"character\":26,\"line\":126}}},\"documentation\":{\"value\":\"Creates an empty `VecDeque`.\\n\\n# Examples\\n\\n```rust\\nuse std::collections::VecDeque;\\n\\nlet vector: VecDeque<u32> = VecDeque::new();\\n```\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": true,
						"query_change_id":
						[
							344,
							507,
							2
						],
						"trigger": "new"
					},
					"AQAAAKcIAAAAAAAArAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApwgAAAAAAACnCAAAAAAAAAAAAAAAAPC/"
				],
				[
					511,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAJoIAAAAAAAAmwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmggAAAAAAACaCAAAAAAAAAAAAAAAAPC/"
				],
				[
					512,
					1,
					"insert",
					{
						"characters": " Ve"
					},
					"AwAAAJsIAAAAAAAAnAgAAAAAAAAAAAAAnAgAAAAAAACdCAAAAAAAAAAAAACdCAAAAAAAAJ4IAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmwgAAAAAAACbCAAAAAAAAAAAAAAAAPC/"
				],
				[
					514,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"insertTextFormat\":2,\"filterText\":\"VecDeque\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"VecDeque<â€¦>\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"VecDeque<$0>\",\"range\":{\"end\":{\"character\":17,\"line\":126},\"start\":{\"character\":15,\"line\":126}}},\"documentation\":{\"value\":\"A double-ended queue implemented with a growable ring buffer.\\n\\nThe \\\"default\\\" usage of this type as a queue is to use [`push_back`] to add to\\nthe queue, and [`pop_front`] to remove from the queue. [`extend`] and [`append`]\\npush onto the back in this manner, and iterating over `VecDeque` goes front\\nto back.\\n\\nA `VecDeque` with a known list of items can be initialized from an array:\\n\\n```rust\\nuse std::collections::VecDeque;\\n\\nlet deq = VecDeque::from([-1, 0, 1]);\\n```\\n\\nSince `VecDeque` is a ring buffer, its elements are not necessarily contiguous\\nin memory. If you want to access the elements as a single slice, such as for\\nefficient sorting, you can use [`make_contiguous`]. It rotates the `VecDeque`\\nso that its elements do not wrap, and returns a mutable slice to the\\nnow-contiguous element sequence.\\n\\n[`push_back`]: VecDeque::push_back\\n[`pop_front`]: VecDeque::pop_front\\n[`extend`]: VecDeque::extend\\n[`append`]: VecDeque::append\\n[`make_contiguous`]: VecDeque::make_contiguous\",\"kind\":\"markdown\"},\"kind\":22},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							349,
							512,
							3
						],
						"trigger": "VecDeque"
					},
					"AgAAAJwIAAAAAAAAnAgAAAAAAAACAAAAVmWcCAAAAAAAAKYIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnggAAAAAAACeCAAAAAAAAAAAAAAAAPC/"
				],
				[
					515,
					1,
					"insert",
					{
						"characters": "_ob"
					},
					"AwAAAKUIAAAAAAAApggAAAAAAAAAAAAApggAAAAAAACnCAAAAAAAAAAAAACnCAAAAAAAAKgIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQgAAAAAAAClCAAAAAAAAAAAAAAAAPC/"
				],
				[
					516,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_Object\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"_Object (use python::_Object)\",\"data\":{\"imports\":[{\"full_import_path\":\"python::_Object\",\"imported_name\":\"_Object\"}],\"position\":{\"position\":{\"character\":27,\"line\":126},\"textDocument\":{\"uri\":\"file:///home/alexzander/Alexzander__/programming/rust/python/examples/object_trait.rs\"}}},\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"_Object\",\"range\":{\"end\":{\"character\":27,\"line\":126},\"start\":{\"character\":24,\"line\":126}}},\"documentation\":{\"value\":\"the supreme _Object trait\\nthat its derived types should\\nimplement like all the __functions__ from python\",\"kind\":\"markdown\"},\"kind\":8},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							351,
							515,
							3
						],
						"trigger": "_Object"
					},
					"AgAAAKUIAAAAAAAApQgAAAAAAAADAAAAX29ipQgAAAAAAACsCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqAgAAAAAAACoCAAAAAAAAAAAAAAAAPC/"
				],
				[
					517,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							[
								[
									4,
									24
								],
								[
									4,
									24
								],
								"\n",
								null
							],
							[
								[
									4,
									24
								],
								[
									4,
									24
								],
								"\n",
								null
							],
							[
								[
									4,
									24
								],
								[
									4,
									24
								],
								"use python::_Object;",
								null
							]
						]
					},
					"AwAAAEgAAAAAAAAAXAAAAAAAAAAAAAAASAAAAAAAAABJAAAAAAAAAAAAAABIAAAAAAAAAEkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAgAAAAAAACsCAAAAAAAAAAAAAAAAPC/"
				],
				[
					526,
					1,
					"insert",
					{
						"characters": "l"
					},
					"AQAAANUIAAAAAAAA1ggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QgAAAAAAADVCAAAAAAAAAAAAAAAAPC/"
				],
				[
					527,
					1,
					"left_delete",
					null,
					"AQAAANUIAAAAAAAA1QgAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAA1ggAAAAAAADWCAAAAAAAAAAAAAAAAPC/"
				],
				[
					528,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANUIAAAAAAAA1ggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QgAAAAAAADVCAAAAAAAAAAAAAAAAPC/"
				],
				[
					540,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAALsIAAAAAAAAuwgAAAAAAAAHAAAAX09iamVjdA",
					"AQAAAAAAAAABAAAAwggAAAAAAADCCAAAAAAAAAAAAAAAAPC/"
				],
				[
					541,
					1,
					"insert",
					{
						"characters": "T"
					},
					"AQAAALsIAAAAAAAAvAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuwgAAAAAAAC7CAAAAAAAAAAAAAAAAPC/"
				],
				[
					554,
					1,
					"insert",
					{
						"characters": " where"
					},
					"BgAAAM8IAAAAAAAA0AgAAAAAAAAAAAAA0AgAAAAAAADRCAAAAAAAAAAAAADRCAAAAAAAANIIAAAAAAAAAAAAANIIAAAAAAAA0wgAAAAAAAAAAAAA0wgAAAAAAADUCAAAAAAAAAAAAADUCAAAAAAAANUIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzwgAAAAAAADPCAAAAAAAAAAAAAAAAPC/"
				],
				[
					555,
					1,
					"insert",
					{
						"characters": " T:"
					},
					"AwAAANUIAAAAAAAA1ggAAAAAAAAAAAAA1ggAAAAAAADXCAAAAAAAAAAAAADXCAAAAAAAANgIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QgAAAAAAADVCAAAAAAAAAAAAAAAAPC/"
				],
				[
					556,
					1,
					"insert",
					{
						"characters": " _ob"
					},
					"BAAAANgIAAAAAAAA2QgAAAAAAAAAAAAA2QgAAAAAAADaCAAAAAAAAAAAAADaCAAAAAAAANsIAAAAAAAAAAAAANsIAAAAAAAA3AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2AgAAAAAAADYCAAAAAAAAAAAAAAAAPC/"
				],
				[
					557,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_Object\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"_Object (use python::_Object)\",\"data\":{\"imports\":[{\"full_import_path\":\"python::_Object\",\"imported_name\":\"_Object\"}],\"position\":{\"position\":{\"character\":57,\"line\":128},\"textDocument\":{\"uri\":\"file:///home/alexzander/Alexzander__/programming/rust/python/examples/object_trait.rs\"}}},\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"_Object\",\"range\":{\"end\":{\"character\":57,\"line\":128},\"start\":{\"character\":54,\"line\":128}}},\"documentation\":{\"value\":\"the supreme _Object trait\\nthat its derived types should\\nimplement like all the __functions__ from python\",\"kind\":\"markdown\"},\"kind\":8},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							375,
							556,
							4
						],
						"trigger": "_Object"
					},
					"AgAAANkIAAAAAAAA2QgAAAAAAAADAAAAX29i2QgAAAAAAADgCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AgAAAAAAADcCAAAAAAAAAAAAAAAAPC/"
				],
				[
					569,
					5,
					"delete_word",
					{
						"forward": true
					},
					"BQAAAM8IAAAAAAAAzwgAAAAAAAAGAAAAIHdoZXJlzwgAAAAAAADPCAAAAAAAAAIAAAAgVM8IAAAAAAAAzwgAAAAAAAABAAAAOs8IAAAAAAAAzwgAAAAAAAAIAAAAIF9PYmplY3TPCAAAAAAAAM8IAAAAAAAAAQAAADs",
					"AQAAAAAAAAABAAAAzwgAAAAAAADPCAAAAAAAAAAAAAAAAPC/"
				],
				[
					570,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAM8IAAAAAAAA0AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzwgAAAAAAADPCAAAAAAAAAAAAAAAAPC/"
				],
				[
					590,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"CgAAAPkGAAAAAAAA+QYAAAAAAAADAAAALy8g8AYAAAAAAADwBgAAAAAAAAMAAAAvLyDjBgAAAAAAAOMGAAAAAAAAAwAAAC8vIM4GAAAAAAAAzgYAAAAAAAADAAAALy8gvAYAAAAAAAC8BgAAAAAAAAMAAAAvLyCUBgAAAAAAAJQGAAAAAAAAAwAAAC8vIHYGAAAAAAAAdgYAAAAAAAADAAAALy8gcQYAAAAAAABxBgAAAAAAAAMAAAAvLyBdBgAAAAAAAF0GAAAAAAAAAwAAAC8vIEoGAAAAAAAASgYAAAAAAAADAAAALy8g",
					"AQAAAAAAAAABAAAA/QYAAAAAAABKBgAAAAAAAAAAAAAAAPC/"
				],
				[
					604,
					9,
					"delete_word",
					{
						"forward": false
					},
					"CQAAAK8IAAAAAAAArwgAAAAAAAADAAAAKCk7rAgAAAAAAACsCAAAAAAAAAMAAABuZXeqCAAAAAAAAKoIAAAAAAAAAgAAADo6oggAAAAAAACiCAAAAAAAAAgAAABWZWNEZXF1ZaAIAAAAAAAAoAgAAAAAAAACAAAAPSCeCAAAAAAAAJ4IAAAAAAAAAgAAAD4gnQgAAAAAAACdCAAAAAAAAAEAAABUnAgAAAAAAACcCAAAAAAAAAEAAAA8lAgAAAAAAACUCAAAAAAAAAgAAABWZWNEZXF1ZQ",
					"AQAAAAAAAAABAAAAsggAAAAAAACyCAAAAAAAAP///////+9/"
				],
				[
					605,
					2,
					"left_delete",
					null,
					"AgAAAJMIAAAAAAAAkwgAAAAAAAABAAAAIJIIAAAAAAAAkggAAAAAAAABAAAAOg",
					"AQAAAAAAAAABAAAAlAgAAAAAAACUCAAAAAAAAAAAAAAAAPC/"
				],
				[
					606,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAJIIAAAAAAAAkwgAAAAAAAAAAAAAkwgAAAAAAACUCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkggAAAAAAACSCAAAAAAAAAAAAAAAAPC/"
				],
				[
					607,
					1,
					"insert",
					{
						"characters": " Lista:"
					},
					"BwAAAJQIAAAAAAAAlQgAAAAAAAAAAAAAlQgAAAAAAACWCAAAAAAAAAAAAACWCAAAAAAAAJcIAAAAAAAAAAAAAJcIAAAAAAAAmAgAAAAAAAAAAAAAmAgAAAAAAACZCAAAAAAAAAAAAACZCAAAAAAAAJoIAAAAAAAAAAAAAJoIAAAAAAAAmwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAgAAAAAAACUCAAAAAAAAAAAAAAAAPC/"
				],
				[
					608,
					2,
					"left_delete",
					null,
					"AgAAAJoIAAAAAAAAmggAAAAAAAABAAAAOpkIAAAAAAAAmQgAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAmwgAAAAAAACbCAAAAAAAAAAAAAAAAPC/"
				],
				[
					609,
					1,
					"insert",
					{
						"characters": "::new"
					},
					"BQAAAJkIAAAAAAAAmggAAAAAAAAAAAAAmggAAAAAAACbCAAAAAAAAAAAAACbCAAAAAAAAJwIAAAAAAAAAAAAAJwIAAAAAAAAnQgAAAAAAAAAAAAAnQgAAAAAAACeCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQgAAAAAAACZCAAAAAAAAAAAAAAAAPC/"
				],
				[
					610,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJ4IAAAAAAAAoAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnggAAAAAAACeCAAAAAAAAAAAAAAAAPC/"
				],
				[
					612,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKAIAAAAAAAAoQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAgAAAAAAACgCAAAAAAAAAAAAAAAAPC/"
				],
				[
					624,
					1,
					"cut",
					null,
					"AQAAAEoAAAAAAAAASgAAAAAAAAAVAAAAdXNlIHB5dGhvbjo6X09iamVjdDsK",
					"AQAAAAAAAAABAAAAXgAAAAAAAABeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					638,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAH0IAAAAAAAAfggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQgAAAAAAAB9CAAAAAAAAAAAAAAAAPC/"
				],
				[
					639,
					1,
					"insert",
					{
						"characters": " List"
					},
					"BQAAAH4IAAAAAAAAfwgAAAAAAAAAAAAAfwgAAAAAAACACAAAAAAAAAAAAACACAAAAAAAAIEIAAAAAAAAAAAAAIEIAAAAAAAAgggAAAAAAAAAAAAAgggAAAAAAACDCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfggAAAAAAAB+CAAAAAAAAAAAAAAAAPC/"
				],
				[
					640,
					1,
					"insert",
					{
						"characters": "<>"
					},
					"AgAAAIMIAAAAAAAAhAgAAAAAAAAAAAAAhAgAAAAAAACFCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwgAAAAAAACDCAAAAAAAAAAAAAAAAPC/"
				],
				[
					642,
					1,
					"insert",
					{
						"characters": "Box<>"
					},
					"BQAAAIQIAAAAAAAAhQgAAAAAAAAAAAAAhQgAAAAAAACGCAAAAAAAAAAAAACGCAAAAAAAAIcIAAAAAAAAAAAAAIcIAAAAAAAAiAgAAAAAAAAAAAAAiAgAAAAAAACJCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAgAAAAAAACECAAAAAAAAAAAAAAAAPC/"
				],
				[
					644,
					1,
					"insert",
					{
						"characters": "dyn"
					},
					"AwAAAIgIAAAAAAAAiQgAAAAAAAAAAAAAiQgAAAAAAACKCAAAAAAAAAAAAACKCAAAAAAAAIsIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAgAAAAAAACICAAAAAAAAAAAAAAAAPC/"
				],
				[
					645,
					1,
					"insert",
					{
						"characters": " _ob"
					},
					"BAAAAIsIAAAAAAAAjAgAAAAAAAAAAAAAjAgAAAAAAACNCAAAAAAAAAAAAACNCAAAAAAAAI4IAAAAAAAAAAAAAI4IAAAAAAAAjwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwgAAAAAAACLCAAAAAAAAAAAAAAAAPC/"
				],
				[
					646,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_Object\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"_Object (use python::_Object)\",\"data\":{\"imports\":[{\"full_import_path\":\"python::_Object\",\"imported_name\":\"_Object\"}],\"position\":{\"position\":{\"character\":31,\"line\":127},\"textDocument\":{\"uri\":\"file:///home/alexzander/Alexzander__/programming/rust/python/examples/object_trait.rs\"}}},\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"_Object\",\"range\":{\"end\":{\"character\":31,\"line\":127},\"start\":{\"character\":28,\"line\":127}}},\"documentation\":{\"value\":\"the supreme _Object trait\\nthat its derived types should\\nimplement like all the __functions__ from python\",\"kind\":\"markdown\"},\"kind\":8},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							424,
							645,
							4
						],
						"trigger": "_Object"
					},
					"AgAAAIwIAAAAAAAAjAgAAAAAAAADAAAAX29ijAgAAAAAAACTCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwgAAAAAAACPCAAAAAAAAAAAAAAAAPC/"
				],
				[
					647,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							[
								[
									4,
									24
								],
								[
									4,
									24
								],
								"\n",
								null
							],
							[
								[
									4,
									24
								],
								[
									4,
									24
								],
								"\n",
								null
							],
							[
								[
									4,
									24
								],
								[
									4,
									24
								],
								"use python::_Object;",
								null
							]
						]
					},
					"AwAAAEgAAAAAAAAAXAAAAAAAAAAAAAAASAAAAAAAAABJAAAAAAAAAAAAAABIAAAAAAAAAEkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwgAAAAAAACTCAAAAAAAAAAAAAAAAPC/"
				],
				[
					670,
					1,
					"cut",
					null,
					"AQAAAEoAAAAAAAAASgAAAAAAAAAVAAAAdXNlIHB5dGhvbjo6X09iamVjdDsK",
					"AQAAAAAAAAABAAAAXgAAAAAAAABeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					699,
					1,
					"delete_word",
					{
						"forward": true
					},
					"AQAAAIUIAAAAAAAAhQgAAAAAAAADAAAAQm94",
					"AQAAAAAAAAABAAAAhQgAAAAAAACFCAAAAAAAAAAAAAAAAPC/"
				],
				[
					700,
					1,
					"right_delete",
					null,
					"AQAAAIUIAAAAAAAAhQgAAAAAAAABAAAAPA",
					"AQAAAAAAAAABAAAAhQgAAAAAAACFCAAAAAAAAAAAAAAAAPC/"
				],
				[
					701,
					1,
					"delete_word",
					{
						"forward": true
					},
					"AQAAAIUIAAAAAAAAhQgAAAAAAAADAAAAZHlu",
					"AQAAAAAAAAABAAAAhQgAAAAAAACFCAAAAAAAAAAAAAAAAPC/"
				],
				[
					702,
					1,
					"right_delete",
					null,
					"AQAAAIUIAAAAAAAAhQgAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAhQgAAAAAAACFCAAAAAAAAAAAAAAAAPC/"
				],
				[
					704,
					1,
					"right_delete",
					null,
					"AQAAAIwIAAAAAAAAjAgAAAAAAAABAAAAPg",
					"AQAAAAAAAAABAAAAjAgAAAAAAACMCAAAAAAAAAAAAAAAAPC/"
				],
				[
					726,
					4,
					"delete_word",
					{
						"forward": false
					},
					"BAAAAIwIAAAAAAAAjAgAAAAAAAACAAAAPiCFCAAAAAAAAIUIAAAAAAAABwAAAF9PYmplY3SECAAAAAAAAIQIAAAAAAAAAQAAADyACAAAAAAAAIAIAAAAAAAABAAAAExpc3Q",
					"AQAAAAAAAAABAAAAjggAAAAAAACOCAAAAAAAAAAAAAAAAPC/"
				],
				[
					727,
					2,
					"left_delete",
					null,
					"AgAAAH8IAAAAAAAAfwgAAAAAAAABAAAAIH4IAAAAAAAAfggAAAAAAAABAAAAOg",
					"AQAAAAAAAAABAAAAgAgAAAAAAACACAAAAAAAAAAAAAAAAPC/"
				],
				[
					728,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH4IAAAAAAAAfwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfggAAAAAAAB+CAAAAAAAAAAAAAAAAPC/"
				],
				[
					737,
					1,
					"insert",
					{
						"characters": "<Float>"
					},
					"BwAAAIUIAAAAAAAAhggAAAAAAAAAAAAAhggAAAAAAACHCAAAAAAAAAAAAACHCAAAAAAAAIgIAAAAAAAAAAAAAIgIAAAAAAAAiQgAAAAAAAAAAAAAiQgAAAAAAACKCAAAAAAAAAAAAACKCAAAAAAAAIsIAAAAAAAAAAAAAIsIAAAAAAAAjAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQgAAAAAAACFCAAAAAAAAAAAAAAAAPC/"
				],
				[
					750,
					1,
					"insert",
					{
						"characters": "::"
					},
					"AgAAAIUIAAAAAAAAhggAAAAAAAAAAAAAhggAAAAAAACHCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQgAAAAAAACFCAAAAAAAAAAAAAAAAPC/"
				],
				[
					762,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAI0IAAAAAAAAjggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQgAAAAAAACNCAAAAAAAAAAAAAAAAPC/"
				],
				[
					763,
					1,
					"left_delete",
					null,
					"AQAAAI0IAAAAAAAAjQgAAAAAAAABAAAAPg",
					"AQAAAAAAAAABAAAAjggAAAAAAACOCAAAAAAAAAAAAAAAAPC/"
				],
				[
					764,
					1,
					"insert",
					{
						"characters": "<>"
					},
					"AgAAAI0IAAAAAAAAjggAAAAAAAAAAAAAjggAAAAAAACPCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQgAAAAAAACNCAAAAAAAAAAAAAAAAPC/"
				],
				[
					766,
					1,
					"insert",
					{
						"characters": "f32"
					},
					"AwAAAI4IAAAAAAAAjwgAAAAAAAAAAAAAjwgAAAAAAACQCAAAAAAAAAAAAACQCAAAAAAAAJEIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjggAAAAAAACOCAAAAAAAAAAAAAAAAPC/"
				],
				[
					779,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAIwBAAAAAAAAjQEAAAAAAAAAAAAAjQEAAAAAAACOAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAEAAAAAAACMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					781,
					1,
					"insert",
					{
						"characters": "oub"
					},
					"AwAAAI0BAAAAAAAAjgEAAAAAAAAAAAAAjgEAAAAAAACPAQAAAAAAAAAAAACPAQAAAAAAAJABAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQEAAAAAAACNAQAAAAAAAAAAAAAAAAAA"
				],
				[
					782,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAI0BAAAAAAAAjQEAAAAAAAADAAAAb3Vi",
					"AQAAAAAAAAABAAAAkAEAAAAAAACQAQAAAAAAAAAAAAAAAPC/"
				],
				[
					783,
					1,
					"insert",
					{
						"characters": "pub"
					},
					"AwAAAI0BAAAAAAAAjgEAAAAAAAAAAAAAjgEAAAAAAACPAQAAAAAAAAAAAACPAQAAAAAAAJABAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQEAAAAAAACNAQAAAAAAAAAAAAAAAPC/"
				],
				[
					784,
					1,
					"insert",
					{
						"characters": " r"
					},
					"AgAAAJABAAAAAAAAkQEAAAAAAAAAAAAAkQEAAAAAAACSAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAEAAAAAAACQAQAAAAAAAAAAAAAAAPC/"
				],
				[
					787,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAABoBAAAAAAAAGgEAAAAAAAAEAAAAcHViIA",
					"AQAAAAAAAAABAAAAHgEAAAAAAAAeAQAAAAAAAAAAAAAAAPC/"
				],
				[
					794,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAAI0BAAAAAAAAjQEAAAAAAAABAAAAcokBAAAAAAAAiQEAAAAAAAAEAAAAcHViIA",
					"AQAAAAAAAAABAAAAjgEAAAAAAACOAQAAAAAAAP///////+9/"
				],
				[
					795,
					1,
					"insert",
					{
						"characters": "trait"
					},
					"BQAAAIkBAAAAAAAAigEAAAAAAAAAAAAAigEAAAAAAACLAQAAAAAAAAAAAACLAQAAAAAAAIwBAAAAAAAAAAAAAIwBAAAAAAAAjQEAAAAAAAAAAAAAjQEAAAAAAACOAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQEAAAAAAACJAQAAAAAAAAAAAAAAAPC/"
				],
				[
					796,
					1,
					"insert",
					{
						"characters": " Append"
					},
					"BwAAAI4BAAAAAAAAjwEAAAAAAAAAAAAAjwEAAAAAAACQAQAAAAAAAAAAAACQAQAAAAAAAJEBAAAAAAAAAAAAAJEBAAAAAAAAkgEAAAAAAAAAAAAAkgEAAAAAAACTAQAAAAAAAAAAAACTAQAAAAAAAJQBAAAAAAAAAAAAAJQBAAAAAAAAlQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgEAAAAAAACOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					797,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJUBAAAAAAAAlgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQEAAAAAAACVAQAAAAAAAAAAAAAAAPC/"
				],
				[
					798,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJYBAAAAAAAAmAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlgEAAAAAAACWAQAAAAAAAAAAAAAAAPC/"
				],
				[
					799,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAJcBAAAAAAAAmAEAAAAAAAAAAAAAmAEAAAAAAACZAQAAAAAAAAAAAACYAQAAAAAAAJwBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwEAAAAAAACXAQAAAAAAAAAAAAAAAPC/"
				],
				[
					800,
					1,
					"insert",
					{
						"characters": "fn"
					},
					"AgAAAJwBAAAAAAAAnQEAAAAAAAAAAAAAnQEAAAAAAACeAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAEAAAAAAACcAQAAAAAAAAAAAAAAAPC/"
				],
				[
					801,
					1,
					"insert",
					{
						"characters": " append_bac"
					},
					"CwAAAJ4BAAAAAAAAnwEAAAAAAAAAAAAAnwEAAAAAAACgAQAAAAAAAAAAAACgAQAAAAAAAKEBAAAAAAAAAAAAAKEBAAAAAAAAogEAAAAAAAAAAAAAogEAAAAAAACjAQAAAAAAAAAAAACjAQAAAAAAAKQBAAAAAAAAAAAAAKQBAAAAAAAApQEAAAAAAAAAAAAApQEAAAAAAACmAQAAAAAAAAAAAACmAQAAAAAAAKcBAAAAAAAAAAAAAKcBAAAAAAAAqAEAAAAAAAAAAAAAqAEAAAAAAACpAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAngEAAAAAAACeAQAAAAAAAAAAAAAAAPC/"
				],
				[
					802,
					1,
					"insert",
					{
						"characters": "k"
					},
					"AQAAAKkBAAAAAAAAqgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQEAAAAAAACpAQAAAAAAAAAAAAAAAPC/"
				],
				[
					803,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKoBAAAAAAAArAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqgEAAAAAAACqAQAAAAAAAAAAAAAAAPC/"
				],
				[
					804,
					1,
					"insert",
					{
						"characters": "&Self"
					},
					"BQAAAKsBAAAAAAAArAEAAAAAAAAAAAAArAEAAAAAAACtAQAAAAAAAAAAAACtAQAAAAAAAK4BAAAAAAAAAAAAAK4BAAAAAAAArwEAAAAAAAAAAAAArwEAAAAAAACwAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqwEAAAAAAACrAQAAAAAAAAAAAAAAAPC/"
				],
				[
					805,
					3,
					"left_delete",
					null,
					"AwAAAK8BAAAAAAAArwEAAAAAAAABAAAAZq4BAAAAAAAArgEAAAAAAAABAAAAbK0BAAAAAAAArQEAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAsAEAAAAAAACwAQAAAAAAAAAAAAAAAPC/"
				],
				[
					806,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAK0BAAAAAAAArgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQEAAAAAAACtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					807,
					2,
					"left_delete",
					null,
					"AgAAAK0BAAAAAAAArQEAAAAAAAABAAAAc6wBAAAAAAAArAEAAAAAAAABAAAAUw",
					"AQAAAAAAAAABAAAArgEAAAAAAACuAQAAAAAAAAAAAAAAAPC/"
				],
				[
					808,
					1,
					"insert",
					{
						"characters": "slef"
					},
					"BAAAAKwBAAAAAAAArQEAAAAAAAAAAAAArQEAAAAAAACuAQAAAAAAAAAAAACuAQAAAAAAAK8BAAAAAAAAAAAAAK8BAAAAAAAAsAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAEAAAAAAACsAQAAAAAAAAAAAAAAAPC/"
				],
				[
					810,
					5,
					"left_delete",
					null,
					"BQAAALABAAAAAAAAsAEAAAAAAAABAAAAKa8BAAAAAAAArwEAAAAAAAABAAAAZq4BAAAAAAAArgEAAAAAAAABAAAAZa0BAAAAAAAArQEAAAAAAAABAAAAbKwBAAAAAAAArAEAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAAsQEAAAAAAACxAQAAAAAAAAAAAAAAAPC/"
				],
				[
					811,
					1,
					"insert",
					{
						"characters": "self)"
					},
					"BQAAAKwBAAAAAAAArQEAAAAAAAAAAAAArQEAAAAAAACuAQAAAAAAAAAAAACuAQAAAAAAAK8BAAAAAAAAAAAAAK8BAAAAAAAAsAEAAAAAAAAAAAAAsAEAAAAAAACxAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAEAAAAAAACsAQAAAAAAAAAAAAAAAPC/"
				],
				[
					812,
					1,
					"insert",
					{
						"characters": " -"
					},
					"AgAAALEBAAAAAAAAsgEAAAAAAAAAAAAAsgEAAAAAAACzAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQEAAAAAAACxAQAAAAAAAAAAAAAAAPC/"
				],
				[
					813,
					1,
					"insert",
					{
						"characters": " ."
					},
					"AgAAALMBAAAAAAAAtAEAAAAAAAAAAAAAtAEAAAAAAAC1AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAswEAAAAAAACzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					814,
					2,
					"left_delete",
					null,
					"AgAAALQBAAAAAAAAtAEAAAAAAAABAAAALrMBAAAAAAAAswEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAtQEAAAAAAAC1AQAAAAAAAAAAAAAAAPC/"
				],
				[
					815,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAALMBAAAAAAAAtAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAswEAAAAAAACzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					816,
					1,
					"insert",
					{
						"characters": " &mu"
					},
					"BAAAALQBAAAAAAAAtQEAAAAAAAAAAAAAtQEAAAAAAAC2AQAAAAAAAAAAAAC2AQAAAAAAALcBAAAAAAAAAAAAALcBAAAAAAAAuAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAEAAAAAAAC0AQAAAAAAAAAAAAAAAPC/"
				],
				[
					817,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAALgBAAAAAAAAuQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAEAAAAAAAC4AQAAAAAAAAAAAAAAAPC/"
				],
				[
					818,
					1,
					"insert",
					{
						"characters": " Self"
					},
					"BQAAALkBAAAAAAAAugEAAAAAAAAAAAAAugEAAAAAAAC7AQAAAAAAAAAAAAC7AQAAAAAAALwBAAAAAAAAAAAAALwBAAAAAAAAvQEAAAAAAAAAAAAAvQEAAAAAAAC+AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQEAAAAAAAC5AQAAAAAAAAAAAAAAAPC/"
				],
				[
					822,
					1,
					"right_delete",
					null,
					"AQAAAL4BAAAAAAAAvgEAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAvgEAAAAAAAC+AQAAAAAAAAAAAAAA4H5A"
				],
				[
					823,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAL4BAAAAAAAAvwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvgEAAAAAAAC+AQAAAAAAAAAAAAAAAPC/"
				],
				[
					828,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"BAAAAL8BAAAAAAAAwAEAAAAAAAAAAAAAwAEAAAAAAADEAQAAAAAAAAAAAADAAQAAAAAAAMABAAAAAAAABAAAACAgICDAAQAAAAAAAMABAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvwEAAAAAAAC/AQAAAAAAAAAAAAAAAPC/"
				],
				[
					843,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAO0FAAAAAAAA7QUAAAAAAAAEAAAAcHViIA",
					"AQAAAAAAAAABAAAA8QUAAAAAAADxBQAAAAAAAAAAAAAAAPC/"
				],
				[
					852,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAANoHAAAAAAAA2wcAAAAAAAAAAAAA2wcAAAAAAADcBwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2gcAAAAAAADaBwAAAAAAAAAAAAAAAPC/"
				],
				[
					854,
					1,
					"insert",
					{
						"characters": "impl"
					},
					"BAAAANsHAAAAAAAA3AcAAAAAAAAAAAAA3AcAAAAAAADdBwAAAAAAAAAAAADdBwAAAAAAAN4HAAAAAAAAAAAAAN4HAAAAAAAA3wcAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2wcAAAAAAADbBwAAAAAAAAAAAAAAAAAA"
				],
				[
					857,
					1,
					"insert",
					{
						"characters": "<T>"
					},
					"AwAAAJUBAAAAAAAAlgEAAAAAAAAAAAAAlgEAAAAAAACXAQAAAAAAAAAAAACXAQAAAAAAAJgBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlQEAAAAAAACVAQAAAAAAAAAAAAAAAPC/"
				],
				[
					859,
					1,
					"left_delete",
					null,
					"AQAAAJgBAAAAAAAAmAEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAmQEAAAAAAACZAQAAAAAAAAAAAAAAAPC/"
				],
				[
					860,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAJgBAAAAAAAAmQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAEAAAAAAACYAQAAAAAAAAAAAAAAAPC/"
				],
				[
					861,
					1,
					"left_delete",
					null,
					"AQAAAJgBAAAAAAAAmAEAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAmQEAAAAAAACZAQAAAAAAAAAAAAAAAPC/"
				],
				[
					862,
					1,
					"insert",
					{
						"characters": "w"
					},
					"AQAAAJgBAAAAAAAAmQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAEAAAAAAACYAQAAAAAAAAAAAAAAAPC/"
				],
				[
					863,
					1,
					"left_delete",
					null,
					"AQAAAJgBAAAAAAAAmAEAAAAAAAABAAAAdw",
					"AQAAAAAAAAABAAAAmQEAAAAAAACZAQAAAAAAAAAAAAAAAPC/"
				],
				[
					864,
					1,
					"insert",
					{
						"characters": "\nwhere"
					},
					"BgAAAJgBAAAAAAAAmQEAAAAAAAAAAAAAmQEAAAAAAACaAQAAAAAAAAAAAACaAQAAAAAAAJsBAAAAAAAAAAAAAJsBAAAAAAAAnAEAAAAAAAAAAAAAnAEAAAAAAACdAQAAAAAAAAAAAACdAQAAAAAAAJ4BAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAEAAAAAAACYAQAAAAAAAAAAAAAAAPC/"
				],
				[
					865,
					1,
					"insert",
					{
						"characters": " TL:"
					},
					"BAAAAJ4BAAAAAAAAnwEAAAAAAAAAAAAAnwEAAAAAAACgAQAAAAAAAAAAAACgAQAAAAAAAKEBAAAAAAAAAAAAAKEBAAAAAAAAogEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAngEAAAAAAACeAQAAAAAAAAAAAAAAAPC/"
				],
				[
					866,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKIBAAAAAAAAowEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogEAAAAAAACiAQAAAAAAAAAAAAAAAPC/"
				],
				[
					867,
					3,
					"left_delete",
					null,
					"AwAAAKIBAAAAAAAAogEAAAAAAAABAAAAIKEBAAAAAAAAoQEAAAAAAAABAAAAOqABAAAAAAAAoAEAAAAAAAABAAAATA",
					"AQAAAAAAAAABAAAAowEAAAAAAACjAQAAAAAAAAAAAAAAAPC/"
				],
				[
					868,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAKABAAAAAAAAoQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAEAAAAAAACgAQAAAAAAAAAAAAAAAPC/"
				],
				[
					869,
					1,
					"insert",
					{
						"characters": " _ob"
					},
					"BAAAAKEBAAAAAAAAogEAAAAAAAAAAAAAogEAAAAAAACjAQAAAAAAAAAAAACjAQAAAAAAAKQBAAAAAAAAAAAAAKQBAAAAAAAApQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoQEAAAAAAAChAQAAAAAAAAAAAAAAAPC/"
				],
				[
					870,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_Object\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"_Object (use python::_Object)\",\"data\":{\"imports\":[{\"full_import_path\":\"python::_Object\",\"imported_name\":\"_Object\"}],\"position\":{\"position\":{\"character\":12,\"line\":23},\"textDocument\":{\"uri\":\"file:///home/alexzander/Alexzander__/programming/rust/python/examples/object_trait.rs\"}}},\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"_Object\",\"range\":{\"end\":{\"character\":12,\"line\":23},\"start\":{\"character\":9,\"line\":23}}},\"documentation\":{\"value\":\"the supreme _Object trait\\nthat its derived types should\\nimplement like all the __functions__ from python\",\"kind\":\"markdown\"},\"kind\":8},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							553,
							869,
							4
						],
						"trigger": "_Object"
					},
					"AgAAAKIBAAAAAAAAogEAAAAAAAADAAAAX29iogEAAAAAAACpAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQEAAAAAAAClAQAAAAAAAAAAAAAAAPC/"
				],
				[
					871,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							[
								[
									4,
									24
								],
								[
									4,
									24
								],
								"\n",
								null
							],
							[
								[
									4,
									24
								],
								[
									4,
									24
								],
								"\n",
								null
							],
							[
								[
									4,
									24
								],
								[
									4,
									24
								],
								"use python::_Object;",
								null
							]
						]
					},
					"AwAAAEgAAAAAAAAAXAAAAAAAAAAAAAAASAAAAAAAAABJAAAAAAAAAAAAAABIAAAAAAAAAEkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqQEAAAAAAACpAQAAAAAAAAAAAAAAAPC/"
				],
				[
					880,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAL8BAAAAAAAAwAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvwEAAAAAAAC/AQAAAAAAAAAAAAAAAGpA"
				],
				[
					886,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAANoBAAAAAAAA2wEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2gEAAAAAAADaAQAAAAAAAAAAAAAAAPC/"
				],
				[
					887,
					1,
					"insert",
					{
						"characters": " Obi"
					},
					"BAAAANsBAAAAAAAA3AEAAAAAAAAAAAAA3AEAAAAAAADdAQAAAAAAAAAAAADdAQAAAAAAAN4BAAAAAAAAAAAAAN4BAAAAAAAA3wEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2wEAAAAAAADbAQAAAAAAAAAAAAAAAPC/"
				],
				[
					888,
					3,
					"left_delete",
					null,
					"AwAAAN4BAAAAAAAA3gEAAAAAAAABAAAAad0BAAAAAAAA3QEAAAAAAAABAAAAYtwBAAAAAAAA3AEAAAAAAAABAAAATw",
					"AQAAAAAAAAABAAAA3wEAAAAAAADfAQAAAAAAAAAAAAAAAPC/"
				],
				[
					889,
					1,
					"insert",
					{
						"characters": "_iobj"
					},
					"BQAAANwBAAAAAAAA3QEAAAAAAAAAAAAA3QEAAAAAAADeAQAAAAAAAAAAAADeAQAAAAAAAN8BAAAAAAAAAAAAAN8BAAAAAAAA4AEAAAAAAAAAAAAA4AEAAAAAAADhAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AEAAAAAAADcAQAAAAAAAAAAAAAAAPC/"
				],
				[
					890,
					3,
					"left_delete",
					null,
					"AwAAAOABAAAAAAAA4AEAAAAAAAABAAAAat8BAAAAAAAA3wEAAAAAAAABAAAAYt4BAAAAAAAA3gEAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAA4QEAAAAAAADhAQAAAAAAAAAAAAAAAPC/"
				],
				[
					891,
					1,
					"insert",
					{
						"characters": "o"
					},
					"AQAAAN4BAAAAAAAA3wEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3gEAAAAAAADeAQAAAAAAAAAAAAAAAPC/"
				],
				[
					892,
					2,
					"left_delete",
					null,
					"AgAAAN4BAAAAAAAA3gEAAAAAAAABAAAAb90BAAAAAAAA3QEAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAA3wEAAAAAAADfAQAAAAAAAAAAAAAAAPC/"
				],
				[
					893,
					1,
					"insert",
					{
						"characters": "object:"
					},
					"BwAAAN0BAAAAAAAA3gEAAAAAAAAAAAAA3gEAAAAAAADfAQAAAAAAAAAAAADfAQAAAAAAAOABAAAAAAAAAAAAAOABAAAAAAAA4QEAAAAAAAAAAAAA4QEAAAAAAADiAQAAAAAAAAAAAADiAQAAAAAAAOMBAAAAAAAAAAAAAOMBAAAAAAAA5AEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3QEAAAAAAADdAQAAAAAAAAAAAAAAAPC/"
				],
				[
					894,
					1,
					"insert",
					{
						"characters": " T"
					},
					"AgAAAOQBAAAAAAAA5QEAAAAAAAAAAAAA5QEAAAAAAADmAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5AEAAAAAAADkAQAAAAAAAAAAAAAAAPC/"
				],
				[
					909,
					1,
					"insert",
					{
						"characters": " Ap"
					},
					"AwAAABUIAAAAAAAAFggAAAAAAAAAAAAAFggAAAAAAAAXCAAAAAAAAAAAAAAXCAAAAAAAABgIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQgAAAAAAAAVCAAAAAAAAAAAAAAAAPC/"
				],
				[
					910,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"Append\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"Append\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"Append\",\"range\":{\"end\":{\"character\":7,\"line\":124},\"start\":{\"character\":5,\"line\":124}}},\"kind\":8},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							583,
							909,
							3
						],
						"trigger": "Append"
					},
					"AgAAABYIAAAAAAAAFggAAAAAAAACAAAAQXAWCAAAAAAAABwIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGAgAAAAAAAAYCAAAAAAAAAAAAAAAAPC/"
				],
				[
					913,
					1,
					"insert",
					{
						"characters": "<T>"
					},
					"AwAAABUIAAAAAAAAFggAAAAAAAAAAAAAFggAAAAAAAAXCAAAAAAAAAAAAAAXCAAAAAAAABgIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQgAAAAAAAAVCAAAAAAAAAAAAAAAAPC/"
				],
				[
					915,
					1,
					"insert",
					{
						"characters": "<T>"
					},
					"AwAAAB8IAAAAAAAAIAgAAAAAAAAAAAAAIAgAAAAAAAAhCAAAAAAAAAAAAAAhCAAAAAAAACIIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwgAAAAAAAAfCAAAAAAAAP///////+9/"
				],
				[
					916,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAACIIAAAAAAAAIwgAAAAAAAAAAAAAIwgAAAAAAAAkCAAAAAAAAAAAAAAkCAAAAAAAACUIAAAAAAAAAAAAACUIAAAAAAAAJggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIggAAAAAAAAiCAAAAAAAAAAAAAAAAPC/"
				],
				[
					917,
					1,
					"insert",
					{
						"characters": " List<T>"
					},
					"CAAAACYIAAAAAAAAJwgAAAAAAAAAAAAAJwgAAAAAAAAoCAAAAAAAAAAAAAAoCAAAAAAAACkIAAAAAAAAAAAAACkIAAAAAAAAKggAAAAAAAAAAAAAKggAAAAAAAArCAAAAAAAAAAAAAArCAAAAAAAACwIAAAAAAAAAAAAACwIAAAAAAAALQgAAAAAAAAAAAAALQgAAAAAAAAuCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJggAAAAAAAAmCAAAAAAAAAAAAAAAAPC/"
				],
				[
					918,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAC4IAAAAAAAALwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALggAAAAAAAAuCAAAAAAAAAAAAAAAAPC/"
				],
				[
					919,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAC8IAAAAAAAAMQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwgAAAAAAAAvCAAAAAAAAAAAAAAAAPC/"
				],
				[
					920,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAADAIAAAAAAAAMQgAAAAAAAAAAAAAMQgAAAAAAAAyCAAAAAAAAAAAAAAxCAAAAAAAADUIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMAgAAAAAAAAwCAAAAAAAAAAAAAAAAPC/"
				],
				[
					924,
					1,
					"left_delete",
					null,
					"AgAAAC4IAAAAAAAALggAAAAAAAABAAAAIDAIAAAAAAAAMAgAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAALwgAAAAAAAAvCAAAAAAAAAAAAAAAAPC/"
				],
				[
					925,
					1,
					"insert",
					{
						"characters": "\nwhjere"
					},
					"BwAAAC4IAAAAAAAALwgAAAAAAAAAAAAALwgAAAAAAAAwCAAAAAAAAAAAAAAwCAAAAAAAADEIAAAAAAAAAAAAADEIAAAAAAAAMggAAAAAAAAAAAAAMggAAAAAAAAzCAAAAAAAAAAAAAAzCAAAAAAAADQIAAAAAAAAAAAAADQIAAAAAAAANQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALggAAAAAAAAuCAAAAAAAAAAAAAAAAPC/"
				],
				[
					926,
					4,
					"left_delete",
					null,
					"BAAAADQIAAAAAAAANAgAAAAAAAABAAAAZTMIAAAAAAAAMwgAAAAAAAABAAAAcjIIAAAAAAAAMggAAAAAAAABAAAAZTEIAAAAAAAAMQgAAAAAAAABAAAAag",
					"AQAAAAAAAAABAAAANQgAAAAAAAA1CAAAAAAAAAAAAAAAAPC/"
				],
				[
					927,
					1,
					"insert",
					{
						"characters": "ere"
					},
					"AwAAADEIAAAAAAAAMggAAAAAAAAAAAAAMggAAAAAAAAzCAAAAAAAAAAAAAAzCAAAAAAAADQIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQgAAAAAAAAxCAAAAAAAAAAAAAAAAPC/"
				],
				[
					928,
					1,
					"insert",
					{
						"characters": " TL:"
					},
					"BAAAADQIAAAAAAAANQgAAAAAAAAAAAAANQgAAAAAAAA2CAAAAAAAAAAAAAA2CAAAAAAAADcIAAAAAAAAAAAAADcIAAAAAAAAOAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAgAAAAAAAA0CAAAAAAAAAAAAAAAAPC/"
				],
				[
					929,
					2,
					"left_delete",
					null,
					"AgAAADcIAAAAAAAANwgAAAAAAAABAAAAOjYIAAAAAAAANggAAAAAAAABAAAATA",
					"AQAAAAAAAAABAAAAOAgAAAAAAAA4CAAAAAAAAAAAAAAAAPC/"
				],
				[
					930,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAADYIAAAAAAAANwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANggAAAAAAAA2CAAAAAAAAAAAAAAAAPC/"
				],
				[
					931,
					1,
					"insert",
					{
						"characters": " O"
					},
					"AgAAADcIAAAAAAAAOAgAAAAAAAAAAAAAOAgAAAAAAAA5CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwgAAAAAAAA3CAAAAAAAAAAAAAAAAPC/"
				],
				[
					932,
					1,
					"left_delete",
					null,
					"AQAAADgIAAAAAAAAOAgAAAAAAAABAAAATw",
					"AQAAAAAAAAABAAAAOQgAAAAAAAA5CAAAAAAAAAAAAAAAAPC/"
				],
				[
					933,
					1,
					"insert",
					{
						"characters": "_+"
					},
					"AgAAADgIAAAAAAAAOQgAAAAAAAAAAAAAOQgAAAAAAAA6CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAgAAAAAAAA4CAAAAAAAAAAAAAAAAPC/"
				],
				[
					934,
					1,
					"left_delete",
					null,
					"AQAAADkIAAAAAAAAOQgAAAAAAAABAAAAKw",
					"AQAAAAAAAAABAAAAOggAAAAAAAA6CAAAAAAAAAAAAAAAAPC/"
				],
				[
					935,
					1,
					"insert",
					{
						"characters": "Ob"
					},
					"AgAAADkIAAAAAAAAOggAAAAAAAAAAAAAOggAAAAAAAA7CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQgAAAAAAAA5CAAAAAAAAAAAAAAAAPC/"
				],
				[
					936,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_Object\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"_Object (use python::_Object)\",\"data\":{\"imports\":[{\"full_import_path\":\"python::_Object\",\"imported_name\":\"_Object\"}],\"position\":{\"position\":{\"character\":12,\"line\":125},\"textDocument\":{\"uri\":\"file:///home/alexzander/Alexzander__/programming/rust/python/examples/object_trait.rs\"}}},\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"_Object\",\"range\":{\"end\":{\"character\":12,\"line\":125},\"start\":{\"character\":9,\"line\":125}}},\"documentation\":{\"value\":\"the supreme _Object trait\\nthat its derived types should\\nimplement like all the __functions__ from python\",\"kind\":\"markdown\"},\"kind\":8},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							609,
							935,
							2
						],
						"trigger": "_Object"
					},
					"AgAAADgIAAAAAAAAOAgAAAAAAAADAAAAX09iOAgAAAAAAAA/CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwgAAAAAAAA7CAAAAAAAAAAAAAAAAPC/"
				],
				[
					939,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAD8IAAAAAAAAQAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwgAAAAAAAA/CAAAAAAAAAAAAAAAAGpA"
				],
				[
					940,
					1,
					"left_delete",
					null,
					"AQAAAD8IAAAAAAAAPwgAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAQAgAAAAAAABACAAAAAAAAAAAAAAAAPC/"
				],
				[
					941,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAD8IAAAAAAAAQAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPwgAAAAAAAA/CAAAAAAAAAAAAAAAAPC/"
				],
				[
					947,
					1,
					"reindent",
					null,
					"AQAAAEIIAAAAAAAARggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQggAAAAAAABCCAAAAAAAAAAAAAAAAAAA"
				],
				[
					948,
					1,
					"insert",
					{
						"characters": "fn"
					},
					"AgAAAEYIAAAAAAAARwgAAAAAAAAAAAAARwgAAAAAAABICAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARggAAAAAAABGCAAAAAAAAAAAAAAAAPC/"
				],
				[
					949,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEgIAAAAAAAASQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASAgAAAAAAABICAAAAAAAAAAAAAAAAPC/"
				],
				[
					950,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"insertTextFormat\":2,\"filterText\":\"append_back\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"fn append_back(..)\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"fn append_back(&self, _object: T) -> &mut Self {\\n    $0\\n}\",\"range\":{\"end\":{\"character\":7,\"line\":127},\"start\":{\"character\":4,\"line\":127}}},\"kind\":2},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": true,
						"query_change_id":
						[
							619,
							949,
							1
						],
						"trigger": "append_back"
					},
					"AgAAAEYIAAAAAAAARggAAAAAAAADAAAAZm4gRggAAAAAAACFCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASQgAAAAAAABJCAAAAAAAAAAAAAAAAPC/"
				],
				[
					958,
					1,
					"insert",
					{
						"characters": "self."
					},
					"BQAAAH8IAAAAAAAAgAgAAAAAAAAAAAAAgAgAAAAAAACBCAAAAAAAAAAAAACBCAAAAAAAAIIIAAAAAAAAAAAAAIIIAAAAAAAAgwgAAAAAAAAAAAAAgwgAAAAAAACECAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwgAAAAAAAB/CAAAAAAAAAAAAAAAAFpA"
				],
				[
					960,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_list\",\"additionalTextEdits\":[],\"detail\":\"VecDeque<T, Global>\",\"sortText\":\"fffffffd\",\"label\":\"_list\",\"deprecated\":false,\"textEdit\":{\"newText\":\"_list\",\"range\":{\"end\":{\"character\":13,\"line\":128},\"start\":{\"character\":13,\"line\":128}}},\"documentation\":{\"value\":\"_list which holds all the python objects together\",\"kind\":\"markdown\"},\"kind\":5},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": true,
						"query_change_id":
						[
							623,
							958,
							5
						],
						"trigger": "_list"
					},
					"AQAAAIQIAAAAAAAAiQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhAgAAAAAAACECAAAAAAAAAAAAAAAAPC/"
				],
				[
					961,
					1,
					"insert",
					{
						"characters": ".a"
					},
					"AgAAAIkIAAAAAAAAiggAAAAAAAAAAAAAiggAAAAAAACLCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQgAAAAAAACJCAAAAAAAAAAAAAAAAPC/"
				],
				[
					962,
					1,
					"left_delete",
					null,
					"AQAAAIoIAAAAAAAAiggAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAiwgAAAAAAACLCAAAAAAAAAAAAAAAAPC/"
				],
				[
					963,
					1,
					"insert",
					{
						"characters": "pus"
					},
					"AwAAAIoIAAAAAAAAiwgAAAAAAAAAAAAAiwgAAAAAAACMCAAAAAAAAAAAAACMCAAAAAAAAI0IAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiggAAAAAAACKCAAAAAAAAAAAAAAAAPC/"
				],
				[
					965,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"command\":{\"command\":\"editor.action.triggerParameterHints\",\"title\":\"triggerParameterHints\"},\"insertTextFormat\":2,\"filterText\":\"push_back\",\"additionalTextEdits\":[],\"detail\":\"fn(&mut self, T)\",\"sortText\":\"fffffffd\",\"label\":\"push_back(â€¦)\",\"deprecated\":false,\"textEdit\":{\"newText\":\"push_back(${1:value})$0\",\"range\":{\"end\":{\"character\":22,\"line\":128},\"start\":{\"character\":19,\"line\":128}}},\"documentation\":{\"value\":\"Appends an element to the back of the `VecDeque`.\\n\\n# Examples\\n\\n```rust\\nuse std::collections::VecDeque;\\n\\nlet mut buf = VecDeque::new();\\nbuf.push_back(1);\\nbuf.push_back(3);\\nassert_eq!(3, *buf.back().unwrap());\\n```\",\"kind\":\"markdown\"},\"kind\":2},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							627,
							963,
							3
						],
						"trigger": "push_back"
					},
					"AgAAAIoIAAAAAAAAiggAAAAAAAADAAAAcHVziggAAAAAAACaCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQgAAAAAAACNCAAAAAAAAAAAAAAAAPC/"
				],
				[
					967,
					1,
					"insert",
					{
						"characters": "="
					},
					"AgAAAJQIAAAAAAAAlQgAAAAAAAAAAAAAlQgAAAAAAACVCAAAAAAAAAUAAAB2YWx1ZQ",
					"AQAAAAAAAAABAAAAlAgAAAAAAACZCAAAAAAAAAAAAAAAAPC/"
				],
				[
					968,
					1,
					"left_delete",
					null,
					"AQAAAJQIAAAAAAAAlAgAAAAAAAABAAAAPQ",
					"AQAAAAAAAAABAAAAlQgAAAAAAACVCAAAAAAAAAAAAAAAAPC/"
				],
				[
					971,
					1,
					"insert",
					{
						"characters": "_ob"
					},
					"AwAAAJQIAAAAAAAAlQgAAAAAAAAAAAAAlQgAAAAAAACWCAAAAAAAAAAAAACWCAAAAAAAAJcIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAgAAAAAAACUCAAAAAAAAAAAAAAAAPC/"
				],
				[
					972,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_object\",\"preselect\":true,\"detail\":\"T\",\"sortText\":\"fffffff8\",\"label\":\"_object\",\"additionalTextEdits\":[],\"deprecated\":false,\"textEdit\":{\"newText\":\"_object\",\"range\":{\"end\":{\"character\":32,\"line\":128},\"start\":{\"character\":29,\"line\":128}}},\"kind\":6},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							633,
							971,
							3
						],
						"trigger": "_object"
					},
					"AgAAAJQIAAAAAAAAlAgAAAAAAAADAAAAX29ilAgAAAAAAACbCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwgAAAAAAACXCAAAAAAAAAAAAAAAAPC/"
				],
				[
					974,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJwIAAAAAAAAnQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAgAAAAAAACcCAAAAAAAAAAAAAAAAPC/"
				],
				[
					981,
					1,
					"left_delete",
					null,
					"AQAAAJwIAAAAAAAAnAgAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAAnQgAAAAAAACdCAAAAAAAAAAAAAAA4H5A"
				],
				[
					982,
					1,
					"insert",
					{
						"characters": "\nself"
					},
					"BgAAAJwIAAAAAAAAnQgAAAAAAAAAAAAAnQgAAAAAAAClCAAAAAAAAAAAAAClCAAAAAAAAKYIAAAAAAAAAAAAAKYIAAAAAAAApwgAAAAAAAAAAAAApwgAAAAAAACoCAAAAAAAAAAAAACoCAAAAAAAAKkIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAgAAAAAAACcCAAAAAAAAAAAAAAAAPC/"
				],
				[
					997,
					1,
					"insert",
					{
						"characters": "mut"
					},
					"AwAAAFYIAAAAAAAAVwgAAAAAAAAAAAAAVwgAAAAAAABYCAAAAAAAAAAAAABYCAAAAAAAAFkIAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVggAAAAAAABWCAAAAAAAAAAAAAAAAPC/"
				],
				[
					998,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFkIAAAAAAAAWggAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQgAAAAAAABZCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1011,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAKAIAAAAAAAAoQgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAoAgAAAAAAACgCAAAAAAAAAAAAAAAAPC/"
				],
				[
					1028,
					1,
					"insert",
					{
						"characters": "mu"
					},
					"AgAAANUBAAAAAAAA1gEAAAAAAAAAAAAA1gEAAAAAAADXAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QEAAAAAAADVAQAAAAAAAAAAAAAAAPC/"
				],
				[
					1029,
					2,
					"left_delete",
					null,
					"AgAAANYBAAAAAAAA1gEAAAAAAAABAAAAddUBAAAAAAAA1QEAAAAAAAABAAAAbQ",
					"AQAAAAAAAAABAAAA1wEAAAAAAADXAQAAAAAAAAAAAAAAAPC/"
				],
				[
					1031,
					1,
					"insert",
					{
						"characters": "mut"
					},
					"AwAAANYBAAAAAAAA1wEAAAAAAAAAAAAA1wEAAAAAAADYAQAAAAAAAAAAAADYAQAAAAAAANkBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1gEAAAAAAADWAQAAAAAAAAAAAAAAAPC/"
				],
				[
					1032,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANkBAAAAAAAA2gEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QEAAAAAAADZAQAAAAAAAAAAAAAAAPC/"
				],
				[
					1053,
					1,
					"cut",
					null,
					"AQAAAEoAAAAAAAAASgAAAAAAAAAVAAAAdXNlIHB5dGhvbjo6X09iamVjdDsK",
					"AQAAAAAAAAABAAAAXgAAAAAAAABeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					1064,
					1,
					"insert",
					{
						"characters": "\tlist"
					},
					"BQAAAJsJAAAAAAAAngkAAAAAAAAAAAAAngkAAAAAAACfCQAAAAAAAAAAAACfCQAAAAAAAKAJAAAAAAAAAAAAAKAJAAAAAAAAoQkAAAAAAAAAAAAAoQkAAAAAAACiCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmwkAAAAAAACbCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1065,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAKIJAAAAAAAAowkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogkAAAAAAACiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1066,
					1,
					"left_delete",
					null,
					"AQAAAKIJAAAAAAAAogkAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAowkAAAAAAACjCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1067,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAAKIJAAAAAAAAowkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogkAAAAAAACiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1068,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAJ4JAAAAAAAAngkAAAAAAAAFAAAAbGlzdGE",
					"AQAAAAAAAAABAAAAowkAAAAAAACjCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1071,
					1,
					"insert",
					{
						"characters": "\nlista."
					},
					"CAAAAJkJAAAAAAAAmgkAAAAAAAAAAAAAmgkAAAAAAACeCQAAAAAAAAAAAACeCQAAAAAAAJ8JAAAAAAAAAAAAAJ8JAAAAAAAAoAkAAAAAAAAAAAAAoAkAAAAAAAChCQAAAAAAAAAAAAChCQAAAAAAAKIJAAAAAAAAAAAAAKIJAAAAAAAAowkAAAAAAAAAAAAAowkAAAAAAACkCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQkAAAAAAACZCQAAAAAAAP///////+9/"
				],
				[
					1074,
					1,
					"insert",
					{
						"characters": "mut"
					},
					"AwAAAHcJAAAAAAAAeAkAAAAAAAAAAAAAeAkAAAAAAAB5CQAAAAAAAAAAAAB5CQAAAAAAAHoJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwkAAAAAAAB3CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1075,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHoJAAAAAAAAewkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAegkAAAAAAAB6CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1077,
					1,
					"insert",
					{
						"characters": "ap"
					},
					"AgAAAKgJAAAAAAAAqQkAAAAAAAAAAAAAqQkAAAAAAACqCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqAkAAAAAAACoCQAAAAAAAAAAAAAAgGNA"
				],
				[
					1078,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"command\":{\"command\":\"editor.action.triggerParameterHints\",\"title\":\"triggerParameterHints\"},\"insertTextFormat\":2,\"filterText\":\"append_back\",\"additionalTextEdits\":[],\"detail\":\"fn(&mut self, T) -> &mut Self\",\"deprecated\":false,\"label\":\"append_back(â€¦) (as Append)\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"append_back(${1:object})$0\",\"range\":{\"end\":{\"character\":12,\"line\":145},\"start\":{\"character\":10,\"line\":145}}},\"kind\":2},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							694,
							1077,
							2
						],
						"trigger": "append_back"
					},
					"AgAAAKgJAAAAAAAAqAkAAAAAAAACAAAAYXCoCQAAAAAAALsJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqgkAAAAAAACqCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1080,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAALQJAAAAAAAAtAkAAAAAAAAGAAAAb2JqZWN0",
					"AQAAAAAAAAABAAAAtAkAAAAAAAC6CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1081,
					1,
					"insert",
					{
						"characters": "Float::new"
					},
					"CgAAALQJAAAAAAAAtQkAAAAAAAAAAAAAtQkAAAAAAAC2CQAAAAAAAAAAAAC2CQAAAAAAALcJAAAAAAAAAAAAALcJAAAAAAAAuAkAAAAAAAAAAAAAuAkAAAAAAAC5CQAAAAAAAAAAAAC5CQAAAAAAALoJAAAAAAAAAAAAALoJAAAAAAAAuwkAAAAAAAAAAAAAuwkAAAAAAAC8CQAAAAAAAAAAAAC8CQAAAAAAAL0JAAAAAAAAAAAAAL0JAAAAAAAAvgkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAkAAAAAAAC0CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1082,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"command\":{\"command\":\"editor.action.triggerParameterHints\",\"title\":\"triggerParameterHints\"},\"insertTextFormat\":2,\"filterText\":\"new\",\"additionalTextEdits\":[],\"detail\":\"fn(T) -> Float<T>\",\"sortText\":\"fffffffd\",\"label\":\"new(â€¦)\",\"deprecated\":false,\"textEdit\":{\"newText\":\"new(${1:float})$0\",\"range\":{\"end\":{\"character\":32,\"line\":145},\"start\":{\"character\":29,\"line\":145}}},\"documentation\":{\"value\":\"constructor\\ncreates a Float object from any float (f32, f64)\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							697,
							1081,
							10
						],
						"trigger": "new"
					},
					"AgAAALsJAAAAAAAAuwkAAAAAAAADAAAAbmV3uwkAAAAAAADFCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvgkAAAAAAAC+CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1084,
					1,
					"insert",
					{
						"characters": "123f64"
					},
					"BwAAAL8JAAAAAAAAwAkAAAAAAAAAAAAAwAkAAAAAAADACQAAAAAAAAUAAABmbG9hdMAJAAAAAAAAwQkAAAAAAAAAAAAAwQkAAAAAAADCCQAAAAAAAAAAAADCCQAAAAAAAMMJAAAAAAAAAAAAAMMJAAAAAAAAxAkAAAAAAAAAAAAAxAkAAAAAAADFCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvwkAAAAAAADECQAAAAAAAAAAAAAAAPC/"
				],
				[
					1087,
					1,
					"trim_trailing_white_space",
					null,
					"AQAAAMkJAAAAAAAAyQkAAAAAAAADAAAAICAg",
					"AQAAAAAAAAABAAAAlgkAAAAAAACWCQAAAAAAAAAAAAAAsH9A"
				],
				[
					1092,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMcJAAAAAAAAyAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwkAAAAAAADHCQAAAAAAAP///////+9/"
				],
				[
					1119,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAJAJAAAAAAAAkAkAAAAAAAADAAAAZjMy",
					"AQAAAAAAAAABAAAAkwkAAAAAAACTCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1120,
					1,
					"insert",
					{
						"characters": "Sized"
					},
					"BQAAAJAJAAAAAAAAkQkAAAAAAAAAAAAAkQkAAAAAAACSCQAAAAAAAAAAAACSCQAAAAAAAJMJAAAAAAAAAAAAAJMJAAAAAAAAlAkAAAAAAAAAAAAAlAkAAAAAAACVCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAkAAAAAAACQCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1132,
					1,
					"insert",
					{
						"characters": "dyn"
					},
					"AwAAAJAJAAAAAAAAkQkAAAAAAAAAAAAAkQkAAAAAAACSCQAAAAAAAAAAAACSCQAAAAAAAJMJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkAkAAAAAAACQCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1133,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJMJAAAAAAAAlAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwkAAAAAAACTCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1143,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAAJQJAAAAAAAAlAkAAAAAAAAFAAAAU2l6ZWSQCQAAAAAAAJAJAAAAAAAABAAAAGR5biA",
					"AQAAAAAAAAABAAAAmQkAAAAAAACZCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1151,
					2,
					"right_delete",
					null,
					"AgAAAI8JAAAAAAAAjwkAAAAAAAABAAAAPI8JAAAAAAAAjwkAAAAAAAABAAAAPg",
					"AQAAAAAAAAABAAAAjwkAAAAAAACPCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1163,
					9,
					"right_delete",
					null,
					"CQAAAIkJAAAAAAAAiQkAAAAAAAABAAAAPIkJAAAAAAAAiQkAAAAAAAABAAAARokJAAAAAAAAiQkAAAAAAAABAAAAbIkJAAAAAAAAiQkAAAAAAAABAAAAb4kJAAAAAAAAiQkAAAAAAAABAAAAYYkJAAAAAAAAiQkAAAAAAAABAAAAdIkJAAAAAAAAiQkAAAAAAAABAAAAPokJAAAAAAAAiQkAAAAAAAABAAAAOokJAAAAAAAAiQkAAAAAAAABAAAAOg",
					"AQAAAAAAAAABAAAAiQkAAAAAAACJCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1170,
					1,
					"duplicate_line",
					null,
					"AQAAALsJAAAAAAAA5gkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAugkAAAAAAAC6CQAAAAAAAP///////+9/"
				],
				[
					1177,
					2,
					"left_delete",
					null,
					"AgAAAOEJAAAAAAAA4QkAAAAAAAABAAAANOAJAAAAAAAA4AkAAAAAAAABAAAANg",
					"AQAAAAAAAAABAAAA4gkAAAAAAADiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1178,
					1,
					"insert",
					{
						"characters": "32"
					},
					"AgAAAOAJAAAAAAAA4QkAAAAAAAAAAAAA4QkAAAAAAADiCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4AkAAAAAAADgCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1196,
					2,
					"left_delete",
					null,
					"AgAAALYJAAAAAAAAtgkAAAAAAAABAAAANLUJAAAAAAAAtQkAAAAAAAABAAAANg",
					"AQAAAAAAAAABAAAAtwkAAAAAAAC3CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1197,
					1,
					"insert",
					{
						"characters": "32"
					},
					"AgAAALUJAAAAAAAAtgkAAAAAAAAAAAAAtgkAAAAAAAC3CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQkAAAAAAAC1CQAAAAAAAAAAAAAAAPC/"
				],
				[
					1199,
					2,
					"left_delete",
					null,
					"AgAAAOEJAAAAAAAA4QkAAAAAAAABAAAAMuAJAAAAAAAA4AkAAAAAAAABAAAAMw",
					"AQAAAAAAAAABAAAA4gkAAAAAAADiCQAAAAAAAAAAAAAAsH9A"
				],
				[
					1200,
					1,
					"insert",
					{
						"characters": "64"
					},
					"AgAAAOAJAAAAAAAA4QkAAAAAAAAAAAAA4QkAAAAAAADiCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4AkAAAAAAADgCQAAAAAAAAAAAAAAAPC/"
				],
				[
					1270,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAJkBAAAAAAAAmgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQEAAAAAAACZAQAAAAAAAAAAAAAAAPC/"
				],
				[
					1271,
					1,
					"insert",
					{
						"characters": " Sized"
					},
					"BgAAAJoBAAAAAAAAmwEAAAAAAAAAAAAAmwEAAAAAAACcAQAAAAAAAAAAAACcAQAAAAAAAJ0BAAAAAAAAAAAAAJ0BAAAAAAAAngEAAAAAAAAAAAAAngEAAAAAAACfAQAAAAAAAAAAAACfAQAAAAAAAKABAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgEAAAAAAACaAQAAAAAAAAAAAAAAAPC/"
				],
				[
					1273,
					1,
					"cut",
					null,
					"AQAAAKEBAAAAAAAAoQEAAAAAAAARAAAAd2hlcmUgVDogX09iamVjdAo",
					"AQAAAAAAAAABAAAAsQEAAAAAAACxAQAAAAAAAAAAAAAA4HFA"
				],
				[
					1284,
					2,
					"left_delete",
					null,
					"AgAAAMIBAAAAAAAAwgEAAAAAAAAJAAAAb2JqZWN0OiBUwQEAAAAAAADBAQAAAAAAAAEAAABf",
					"AQAAAAAAAAABAAAAwgEAAAAAAADLAQAAAAAAAAAAAAAAAPC/"
				],
				[
					1285,
					1,
					"insert",
					{
						"characters": "_:"
					},
					"AgAAAMEBAAAAAAAAwgEAAAAAAAAAAAAAwgEAAAAAAADDAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwQEAAAAAAADBAQAAAAAAAAAAAAAAAPC/"
				],
				[
					1286,
					1,
					"insert",
					{
						"characters": " T"
					},
					"AgAAAMMBAAAAAAAAxAEAAAAAAAAAAAAAxAEAAAAAAADFAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwwEAAAAAAADDAQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/list/append.rs",
			"settings":
			{
				"buffer_size": 2809,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					13,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAANUAAAAAAAAA1gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QAAAAAAAADVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANYAAAAAAAAA1wAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1gAAAAAAAADWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					2,
					"left_delete",
					null,
					"AgAAANYAAAAAAAAA1gAAAAAAAAABAAAAINUAAAAAAAAA1QAAAAAAAAABAAAAKw",
					"AQAAAAAAAAABAAAA1wAAAAAAAADXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAANUAAAAAAAAA1gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QAAAAAAAADVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": " _Ob"
					},
					"BAAAANYAAAAAAAAA1wAAAAAAAAAAAAAA1wAAAAAAAADYAAAAAAAAAAAAAADYAAAAAAAAANkAAAAAAAAAAAAAANkAAAAAAAAA2gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1gAAAAAAAADWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANoAAAAAAAAA2wAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2gAAAAAAAADaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"left_delete",
					null,
					"AQAAANoAAAAAAAAA2gAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA2wAAAAAAAADbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "je"
					},
					"AgAAANoAAAAAAAAA2wAAAAAAAAAAAAAA2wAAAAAAAADcAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2gAAAAAAAADaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_Object\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"_Object (use crate::_Object)\",\"data\":{\"imports\":[{\"full_import_path\":\"crate::_Object\",\"imported_name\":\"_Object\"}],\"position\":{\"position\":{\"character\":34,\"line\":13},\"textDocument\":{\"uri\":\"file:///home/alexzander/Alexzander__/programming/rust/python/src/list/append.rs\"}}},\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"_Object\",\"range\":{\"end\":{\"character\":34,\"line\":13},\"start\":{\"character\":29,\"line\":13}}},\"documentation\":{\"value\":\"the supreme _Object trait\\nthat its derived types should\\nimplement like all the __functions__ from python\",\"kind\":\"markdown\"},\"kind\":8},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							32,
							62,
							2
						],
						"trigger": "_Object"
					},
					"AgAAANcAAAAAAAAA1wAAAAAAAAAFAAAAX09iamXXAAAAAAAAAN4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AAAAAAAAADcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							[
								[
									3,
									0
								],
								[
									3,
									0
								],
								"use crate::_Object;",
								null
							],
							[
								[
									3,
									0
								],
								[
									3,
									0
								],
								"\n",
								null
							]
						]
					},
					"AgAAADUAAAAAAAAANgAAAAAAAAAAAAAANQAAAAAAAABIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3gAAAAAAAADeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPIAAAAAAAAA8wAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8gAAAAAAAADyAAAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAGAKAAAAAAAAYQoAAAAAAAAAAAAAYQoAAAAAAABiCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYAoAAAAAAABgCgAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "impl"
					},
					"BAAAAGIKAAAAAAAAYwoAAAAAAAAAAAAAYwoAAAAAAABkCgAAAAAAAAAAAABkCgAAAAAAAGUKAAAAAAAAAAAAAGUKAAAAAAAAZgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYgoAAAAAAABiCgAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": " App"
					},
					"BAAAAGYKAAAAAAAAZwoAAAAAAAAAAAAAZwoAAAAAAABoCgAAAAAAAAAAAABoCgAAAAAAAGkKAAAAAAAAAAAAAGkKAAAAAAAAagoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgoAAAAAAABmCgAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"Append\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"Append\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"Append\",\"range\":{\"end\":{\"character\":8,\"line\":118},\"start\":{\"character\":5,\"line\":118}}},\"documentation\":{\"value\":\"append function for List\\ncan append any data type\",\"kind\":\"markdown\"},\"kind\":8},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							42,
							83,
							4
						],
						"trigger": "Append"
					},
					"AgAAAGcKAAAAAAAAZwoAAAAAAAADAAAAQXBwZwoAAAAAAABtCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagoAAAAAAABqCgAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": "<Ob"
					},
					"AwAAAG0KAAAAAAAAbgoAAAAAAAAAAAAAbgoAAAAAAABvCgAAAAAAAAAAAABvCgAAAAAAAHAKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQoAAAAAAABtCgAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": " j"
					},
					"AgAAAHAKAAAAAAAAcQoAAAAAAAAAAAAAcQoAAAAAAAByCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAoAAAAAAABwCgAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					2,
					"left_delete",
					null,
					"AgAAAHEKAAAAAAAAcQoAAAAAAAABAAAAanAKAAAAAAAAcAoAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAcgoAAAAAAAByCgAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAHAKAAAAAAAAcQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAoAAAAAAABwCgAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"left_delete",
					null,
					"AQAAAHAKAAAAAAAAcAoAAAAAAAABAAAAYg",
					"AQAAAAAAAAABAAAAcQoAAAAAAABxCgAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": "j"
					},
					"AQAAAHAKAAAAAAAAcQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAoAAAAAAABwCgAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"Object\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"Object\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"Object\",\"range\":{\"end\":{\"character\":15,\"line\":118},\"start\":{\"character\":12,\"line\":118}}},\"documentation\":{\"value\":\"supreme enum\",\"kind\":\"markdown\"},\"kind\":13},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							49,
							90,
							1
						],
						"trigger": "Object"
					},
					"AgAAAG4KAAAAAAAAbgoAAAAAAAADAAAAT2JqbgoAAAAAAAB0CgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcQoAAAAAAABxCgAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": ">"
					},
					"AQAAAHQKAAAAAAAAdQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAoAAAAAAAB0CgAAAAAAAP///////+9/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAAHUKAAAAAAAAdgoAAAAAAAAAAAAAdgoAAAAAAAB3CgAAAAAAAAAAAAB3CgAAAAAAAHgKAAAAAAAAAAAAAHgKAAAAAAAAeQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQoAAAAAAAB1CgAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": " List"
					},
					"BQAAAHkKAAAAAAAAegoAAAAAAAAAAAAAegoAAAAAAAB7CgAAAAAAAAAAAAB7CgAAAAAAAHwKAAAAAAAAAAAAAHwKAAAAAAAAfQoAAAAAAAAAAAAAfQoAAAAAAAB+CgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQoAAAAAAAB5CgAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH4KAAAAAAAAfwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgoAAAAAAAB+CgAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAH8KAAAAAAAAgQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwoAAAAAAAB/CgAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAIAKAAAAAAAAgQoAAAAAAAAAAAAAgQoAAAAAAACCCgAAAAAAAAAAAACBCgAAAAAAAIUKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAoAAAAAAACACgAAAAAAAAAAAAAAAPC/"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "fn"
					},
					"AgAAAIUKAAAAAAAAhgoAAAAAAAAAAAAAhgoAAAAAAACHCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhQoAAAAAAACFCgAAAAAAAAAAAAAAAEpA"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": " a"
					},
					"AgAAAIcKAAAAAAAAiAoAAAAAAAAAAAAAiAoAAAAAAACJCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwoAAAAAAACHCgAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"insertTextFormat\":2,\"filterText\":\"append_back\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"fn append_back(..)\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"fn append_back(&mut self, _: Object) -> &mut Self {\\n    $0\\n}\",\"range\":{\"end\":{\"character\":8,\"line\":119},\"start\":{\"character\":4,\"line\":119}}},\"documentation\":{\"value\":\"Performs append\",\"kind\":\"markdown\"},\"kind\":2},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							66,
							107,
							2
						],
						"trigger": "append_back"
					},
					"AgAAAIUKAAAAAAAAhQoAAAAAAAAEAAAAZm4gYYUKAAAAAAAAxwoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQoAAAAAAACJCgAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAALkKAAAAAAAAuQoAAAAAAAAIAAAAICAgICAgICA",
					"AQAAAAAAAAABAAAAwQoAAAAAAADBCgAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					1,
					"paste",
					null,
					"AQAAALkKAAAAAAAA+AoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQoAAAAAAAC5CgAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"left_delete",
					null,
					"AQAAAJ8KAAAAAAAAnwoAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAAoAoAAAAAAACgCgAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "obhject"
					},
					"BwAAAJ8KAAAAAAAAoAoAAAAAAAAAAAAAoAoAAAAAAAChCgAAAAAAAAAAAAChCgAAAAAAAKIKAAAAAAAAAAAAAKIKAAAAAAAAowoAAAAAAAAAAAAAowoAAAAAAACkCgAAAAAAAAAAAACkCgAAAAAAAKUKAAAAAAAAAAAAAKUKAAAAAAAApgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwoAAAAAAACfCgAAAAAAAAAAAAAAAPC/"
				],
				[
					127,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAJ8KAAAAAAAAnwoAAAAAAAAHAAAAb2JoamVjdA",
					"AQAAAAAAAAABAAAApgoAAAAAAACmCgAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": "object"
					},
					"BgAAAJ8KAAAAAAAAoAoAAAAAAAAAAAAAoAoAAAAAAAChCgAAAAAAAAAAAAChCgAAAAAAAKIKAAAAAAAAAAAAAKIKAAAAAAAAowoAAAAAAAAAAAAAowoAAAAAAACkCgAAAAAAAAAAAACkCgAAAAAAAKUKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwoAAAAAAACfCgAAAAAAAAAAAAAAAPC/"
				],
				[
					131,
					4,
					"delete_word",
					{
						"forward": true
					},
					"BAAAANwKAAAAAAAA3AoAAAAAAAAFAAAAYmplY3TcCgAAAAAAANwKAAAAAAAAAgAAADo63AoAAAAAAADcCgAAAAAAAAQAAABMaXN03AoAAAAAAADcCgAAAAAAAAEAAAAo",
					"AQAAAAAAAAABAAAA3AoAAAAAAADcCgAAAAAAAAAAAAAAAPC/"
				],
				[
					133,
					1,
					"right_delete",
					null,
					"AQAAANsKAAAAAAAA2woAAAAAAAABAAAATw",
					"AQAAAAAAAAABAAAA2woAAAAAAADbCgAAAAAAAAAAAAAAAPC/"
				],
				[
					134,
					1,
					"delete_word",
					{
						"forward": true
					},
					"AQAAANsKAAAAAAAA2woAAAAAAAAFAAAAX2xpc3Q",
					"AQAAAAAAAAABAAAA2woAAAAAAADbCgAAAAAAAAAAAAAAAPC/"
				],
				[
					135,
					1,
					"right_delete",
					null,
					"AQAAANsKAAAAAAAA2woAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAA2woAAAAAAADbCgAAAAAAAAAAAAAAAPC/"
				],
				[
					136,
					1,
					"insert",
					{
						"characters": "object"
					},
					"BgAAANsKAAAAAAAA3AoAAAAAAAAAAAAA3AoAAAAAAADdCgAAAAAAAAAAAADdCgAAAAAAAN4KAAAAAAAAAAAAAN4KAAAAAAAA3woAAAAAAAAAAAAA3woAAAAAAADgCgAAAAAAAAAAAADgCgAAAAAAAOEKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2woAAAAAAADbCgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/list/extend.rs",
			"settings":
			{
				"buffer_size": 788,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\npub"
					},
					"BQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"insert",
					{
						"characters": " trait"
					},
					"BgAAAAUAAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAAsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQAAAAAAAAAFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"insert",
					{
						"characters": " Extendf"
					},
					"CAAAAAsAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA4AAAAAAAAAAAAAAA4AAAAAAAAADwAAAAAAAAAAAAAADwAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABEAAAAAAAAAAAAAABEAAAAAAAAAEgAAAAAAAAAAAAAAEgAAAAAAAAATAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACwAAAAAAAAALAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"left_delete",
					null,
					"AQAAABIAAAAAAAAAEgAAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAAEwAAAAAAAAATAAAAAAAAAAAAAAAAAPC/"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": "<T>"
					},
					"AwAAABIAAAAAAAAAEwAAAAAAAAAAAAAAEwAAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAAABUAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEgAAAAAAAAASAAAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": " where"
					},
					"BgAAABUAAAAAAAAAFgAAAAAAAAAAAAAAFgAAAAAAAAAXAAAAAAAAAAAAAAAXAAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAGQAAAAAAAAAAAAAAGQAAAAAAAAAaAAAAAAAAAAAAAAAaAAAAAAAAABsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQAAAAAAAAAVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAABsAAAAAAAAAHAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGwAAAAAAAAAbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAABsAAAAAAAAAGwAAAAAAAAABAAAAChYAAAAAAAAAFgAAAAAAAAAFAAAAd2hlcmU",
					"AQAAAAAAAAABAAAAHAAAAAAAAAAcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					1,
					"left_delete",
					null,
					"AQAAABUAAAAAAAAAFQAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAFgAAAAAAAAAWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAABUAAAAAAAAAFgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQAAAAAAAAAVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": " Sized"
					},
					"BgAAABYAAAAAAAAAFwAAAAAAAAAAAAAAFwAAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABkAAAAAAAAAAAAAABkAAAAAAAAAGgAAAAAAAAAAAAAAGgAAAAAAAAAbAAAAAAAAAAAAAAAbAAAAAAAAABwAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgAAAAAAAAAWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAABwAAAAAAAAAHQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHAAAAAAAAAAcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAB0AAAAAAAAAHwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHQAAAAAAAAAdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAB4AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAgAAAAAAAAAAAAAAAfAAAAAAAAACMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgAAAAAAAAAeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"right_delete",
					null,
					"AgAAABUAAAAAAAAAFQAAAAAAAAABAAAAOh4AAAAAAAAAHgAAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAFQAAAAAAAAAVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " where"
					},
					"BgAAABUAAAAAAAAAFgAAAAAAAAAAAAAAFgAAAAAAAAAXAAAAAAAAAAAAAAAXAAAAAAAAABgAAAAAAAAAAAAAABgAAAAAAAAAGQAAAAAAAAAAAAAAGQAAAAAAAAAaAAAAAAAAAAAAAAAaAAAAAAAAABsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFQAAAAAAAAAVAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " T:"
					},
					"AwAAABsAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGwAAAAAAAAAbAAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAABwAAAAAAAAAHAAAAAAAAAABAAAAVBYAAAAAAAAAFgAAAAAAAAAGAAAAd2hlcmUg",
					"AQAAAAAAAAABAAAAHQAAAAAAAAAdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"left_delete",
					null,
					"AQAAABUAAAAAAAAAFQAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAFgAAAAAAAAAWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "+"
					},
					"AQAAAB0AAAAAAAAAHgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHQAAAAAAAAAdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " )"
					},
					"AgAAAB4AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgAAAAAAAAAeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					48,
					1,
					"left_delete",
					null,
					"AQAAAB8AAAAAAAAAHwAAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					1,
					"insert",
					{
						"characters": "_ob"
					},
					"AwAAAB8AAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwAAAAAAAAAfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					50,
					2,
					"left_delete",
					null,
					"AgAAACEAAAAAAAAAIQAAAAAAAAABAAAAYiAAAAAAAAAAIAAAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAIgAAAAAAAAAiAAAAAAAAAAAAAAAAAPC/"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "OB"
					},
					"AgAAACAAAAAAAAAAIQAAAAAAAAAAAAAAIQAAAAAAAAAiAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "\nuse"
					},
					"BAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHpA"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": " create"
					},
					"BwAAAAQAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAACwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					4,
					"left_delete",
					null,
					"BAAAAAoAAAAAAAAACgAAAAAAAAABAAAAZQkAAAAAAAAACQAAAAAAAAABAAAAdAgAAAAAAAAACAAAAAAAAAABAAAAYQcAAAAAAAAABwAAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAACwAAAAAAAAALAAAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": "ate::_ob"
					},
					"CAAAAAcAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAPAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwAAAAAAAAAHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwGZA"
				],
				[
					67,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_Object\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"_Object\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"_Object\",\"range\":{\"end\":{\"character\":14,\"line\":2},\"start\":{\"character\":11,\"line\":2}}},\"documentation\":{\"value\":\"the supreme _Object trait\\nthat its derived types should\\nimplement like all the __functions__ from python\",\"kind\":\"markdown\"},\"kind\":8},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							44,
							65,
							0
						],
						"trigger": "_Object"
					},
					"AgAAAA0AAAAAAAAADQAAAAAAAAADAAAAX29iDQAAAAAAAAAUAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABQAAAAAAAAAFQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAAAAAAAAAAUAAAAAAAAAAAAAAAAQG1A"
				],
				[
					79,
					1,
					"left_delete",
					null,
					"AQAAADYAAAAAAAAANgAAAAAAAAABAAAAQg",
					"AQAAAAAAAAABAAAANwAAAAAAAAA3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAADYAAAAAAAAANwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANgAAAAAAAAA2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_Object\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"_Object\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"_Object\",\"range\":{\"end\":{\"character\":32,\"line\":4},\"start\":{\"character\":29,\"line\":4}}},\"documentation\":{\"value\":\"the supreme _Object trait\\nthat its derived types should\\nimplement like all the __functions__ from python\",\"kind\":\"markdown\"},\"kind\":8},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							54,
							80,
							1
						],
						"trigger": "_Object"
					},
					"AgAAADQAAAAAAAAANAAAAAAAAAADAAAAX09iNAAAAAAAAAA7AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwAAAAAAAAA3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADsAAAAAAAAAPAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwAAAAAAAAA7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"reindent",
					null,
					"AQAAAD4AAAAAAAAAQgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPgAAAAAAAAA+AAAAAAAAAAAAAAAAEH5A"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "fn"
					},
					"AgAAAEIAAAAAAAAAQwAAAAAAAAAAAAAAQwAAAAAAAABEAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgAAAAAAAABCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					93,
					1,
					"insert",
					{
						"characters": " extend"
					},
					"BwAAAEQAAAAAAAAARQAAAAAAAAAAAAAARQAAAAAAAABGAAAAAAAAAAAAAABGAAAAAAAAAEcAAAAAAAAAAAAAAEcAAAAAAAAASAAAAAAAAAAAAAAASAAAAAAAAABJAAAAAAAAAAAAAABJAAAAAAAAAEoAAAAAAAAAAAAAAEoAAAAAAAAASwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAAAAAAAAABEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					94,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEsAAAAAAAAATQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwAAAAAAAABLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					95,
					1,
					"insert",
					{
						"characters": "&mut"
					},
					"BAAAAEwAAAAAAAAATQAAAAAAAAAAAAAATQAAAAAAAABOAAAAAAAAAAAAAABOAAAAAAAAAE8AAAAAAAAAAAAAAE8AAAAAAAAAUAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAAAAAAAAABMAAAAAAAAAAAAAAAAAPC/"
				],
				[
					96,
					1,
					"insert",
					{
						"characters": " S"
					},
					"AgAAAFAAAAAAAAAAUQAAAAAAAAAAAAAAUQAAAAAAAABSAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUAAAAAAAAABQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					97,
					1,
					"left_delete",
					null,
					"AQAAAFEAAAAAAAAAUQAAAAAAAAABAAAAUw",
					"AQAAAAAAAAABAAAAUgAAAAAAAABSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					98,
					1,
					"insert",
					{
						"characters": "self,"
					},
					"BQAAAFEAAAAAAAAAUgAAAAAAAAAAAAAAUgAAAAAAAABTAAAAAAAAAAAAAABTAAAAAAAAAFQAAAAAAAAAAAAAAFQAAAAAAAAAVQAAAAAAAAAAAAAAVQAAAAAAAABWAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQAAAAAAAABRAAAAAAAAAAAAAAAAAPC/"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFYAAAAAAAAAVwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVgAAAAAAAABWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": "_:"
					},
					"AgAAAFcAAAAAAAAAWAAAAAAAAAAAAAAAWAAAAAAAAABZAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwAAAAAAAABXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					101,
					1,
					"insert",
					{
						"characters": " T"
					},
					"AgAAAFkAAAAAAAAAWgAAAAAAAAAAAAAAWgAAAAAAAABbAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQAAAAAAAABZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFwAAAAAAAAAXQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAAAAAAAAABcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAF0AAAAAAAAAXwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQAAAAAAAABdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					105,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAF4AAAAAAAAAXwAAAAAAAAAAAAAAXwAAAAAAAABjAAAAAAAAAAAAAABjAAAAAAAAAGQAAAAAAAAAAAAAAGQAAAAAAAAAaAAAAAAAAAAAAAAAXwAAAAAAAABfAAAAAAAAAAQAAAAgICAgXwAAAAAAAABnAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgAAAAAAAABeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "_>"
					},
					"AwAAAF0AAAAAAAAAXgAAAAAAAAAAAAAAYAAAAAAAAABgAAAAAAAAAAgAAAAgICAgICAgIF4AAAAAAAAAXwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQAAAAAAAABdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					110,
					2,
					"left_delete",
					null,
					"AgAAAF4AAAAAAAAAXgAAAAAAAAABAAAAPl0AAAAAAAAAXQAAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAAXwAAAAAAAABfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": "_>"
					},
					"AgAAAF0AAAAAAAAAXgAAAAAAAAAAAAAAXgAAAAAAAABfAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQAAAAAAAABdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF8AAAAAAAAAYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwAAAAAAAABfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					3,
					"left_delete",
					null,
					"AwAAAF8AAAAAAAAAXwAAAAAAAAABAAAAIF4AAAAAAAAAXgAAAAAAAAABAAAAPl0AAAAAAAAAXQAAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAAYAAAAAAAAABgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": "->"
					},
					"AgAAAF0AAAAAAAAAXgAAAAAAAAAAAAAAXgAAAAAAAABfAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQAAAAAAAABdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAAF8AAAAAAAAAYAAAAAAAAAAAAAAAYAAAAAAAAABhAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXwAAAAAAAABfAAAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"left_delete",
					null,
					"AQAAAGAAAAAAAAAAYAAAAAAAAAABAAAAKg",
					"AQAAAAAAAAABAAAAYQAAAAAAAABhAAAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "&mut"
					},
					"BAAAAGAAAAAAAAAAYQAAAAAAAAAAAAAAYQAAAAAAAABiAAAAAAAAAAAAAABiAAAAAAAAAGMAAAAAAAAAAAAAAGMAAAAAAAAAZAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYAAAAAAAAABgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": " Self"
					},
					"BQAAAGQAAAAAAAAAZQAAAAAAAAAAAAAAZQAAAAAAAABmAAAAAAAAAAAAAABmAAAAAAAAAGcAAAAAAAAAAAAAAGcAAAAAAAAAaAAAAAAAAAAAAAAAaAAAAAAAAABpAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAAAAAAAAABkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGkAAAAAAAAAagAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQAAAAAAAABpAAAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					4,
					"delete_word",
					{
						"forward": false
					},
					"BAAAAHEAAAAAAAAAcQAAAAAAAAABAAAAfW0AAAAAAAAAbQAAAAAAAAAEAAAAICAgIGwAAAAAAAAAbAAAAAAAAAABAAAACmsAAAAAAAAAawAAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAcgAAAAAAAAByAAAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					2,
					"left_delete",
					null,
					"AgAAAGoAAAAAAAAAagAAAAAAAAABAAAAe2kAAAAAAAAAaQAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAawAAAAAAAABrAAAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAGkAAAAAAAAAagAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAaQAAAAAAAABpAAAAAAAAAAAAAAAAAPC/"
				],
				[
					162,
					1,
					"insert",
					{
						"characters": "\n\n\n"
					},
					"AwAAAGwAAAAAAAAAbQAAAAAAAAAAAAAAbQAAAAAAAABuAAAAAAAAAAAAAABuAAAAAAAAAG8AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAAAAAAAAABsAAAAAAAAAAAAAAAA4IFA"
				],
				[
					167,
					1,
					"insert",
					{
						"characters": "use"
					},
					"AwAAAG8AAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAABxAAAAAAAAAAAAAABxAAAAAAAAAHIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwAAAAAAAABvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert",
					{
						"characters": " super::Li"
					},
					"CgAAAHIAAAAAAAAAcwAAAAAAAAAAAAAAcwAAAAAAAAB0AAAAAAAAAAAAAAB0AAAAAAAAAHUAAAAAAAAAAAAAAHUAAAAAAAAAdgAAAAAAAAAAAAAAdgAAAAAAAAB3AAAAAAAAAAAAAAB3AAAAAAAAAHgAAAAAAAAAAAAAAHgAAAAAAAAAeQAAAAAAAAAAAAAAeQAAAAAAAAB6AAAAAAAAAAAAAAB6AAAAAAAAAHsAAAAAAAAAAAAAAHsAAAAAAAAAfAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgAAAAAAAAByAAAAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"List\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"List\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"List\",\"range\":{\"end\":{\"character\":13,\"line\":9},\"start\":{\"character\":11,\"line\":9}}},\"documentation\":{\"value\":\"the main component\\n\\ncontens structure of good docs\\n[short sentence explaining what it is]\\n\\n[more detailed explanation]\\n\\n[at least one code example that users can copy/paste to try it]\\n\\n[even more advanced explanations if necessary]\",\"kind\":\"markdown\"},\"kind\":22},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							105,
							168,
							10
						],
						"trigger": "List"
					},
					"AgAAAHoAAAAAAAAAegAAAAAAAAACAAAATGl6AAAAAAAAAH4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfAAAAAAAAAB8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					170,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAH4AAAAAAAAAfwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgAAAAAAAAB+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": "\n\n\nimpl"
					},
					"BwAAAH8AAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAACBAAAAAAAAAAAAAACBAAAAAAAAAIIAAAAAAAAAAAAAAIIAAAAAAAAAgwAAAAAAAAAAAAAAgwAAAAAAAACEAAAAAAAAAAAAAACEAAAAAAAAAIUAAAAAAAAAAAAAAIUAAAAAAAAAhgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfwAAAAAAAAB/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": " Ex"
					},
					"AwAAAIYAAAAAAAAAhwAAAAAAAAAAAAAAhwAAAAAAAACIAAAAAAAAAAAAAACIAAAAAAAAAIkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhgAAAAAAAACGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"Extend\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"Extend\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"Extend\",\"range\":{\"end\":{\"character\":7,\"line\":12},\"start\":{\"character\":5,\"line\":12}}},\"kind\":8},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							109,
							176,
							3
						],
						"trigger": "Extend"
					},
					"AgAAAIcAAAAAAAAAhwAAAAAAAAACAAAARXiHAAAAAAAAAI0AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQAAAAAAAACJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"insert",
					{
						"characters": "<List>"
					},
					"BgAAAI0AAAAAAAAAjgAAAAAAAAAAAAAAjgAAAAAAAACPAAAAAAAAAAAAAACPAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAkQAAAAAAAAAAAAAAkQAAAAAAAACSAAAAAAAAAAAAAACSAAAAAAAAAJMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQAAAAAAAACNAAAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAAJMAAAAAAAAAlAAAAAAAAAAAAAAAlAAAAAAAAACVAAAAAAAAAAAAAACVAAAAAAAAAJYAAAAAAAAAAAAAAJYAAAAAAAAAlwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwAAAAAAAACTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					180,
					1,
					"insert",
					{
						"characters": " List"
					},
					"BQAAAJcAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACZAAAAAAAAAAAAAACZAAAAAAAAAJoAAAAAAAAAAAAAAJoAAAAAAAAAmwAAAAAAAAAAAAAAmwAAAAAAAACcAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlwAAAAAAAACXAAAAAAAAAAAAAAAAAPC/"
				],
				[
					181,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJwAAAAAAAAAnQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAAAAAAAAACcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					182,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAJ0AAAAAAAAAnwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQAAAAAAAACdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					183,
					1,
					"left_delete",
					null,
					"AQAAAJ0AAAAAAAAAnQAAAAAAAAABAAAAWw",
					"AQAAAAAAAAABAAAAngAAAAAAAACeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					184,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAJ0AAAAAAAAAnwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQAAAAAAAACdAAAAAAAAAAAAAAAAAPC/"
				],
				[
					185,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAJ4AAAAAAAAAnwAAAAAAAAAAAAAAnwAAAAAAAACgAAAAAAAAAAAAAACfAAAAAAAAAKMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAngAAAAAAAACeAAAAAAAAAAAAAAAAAPC/"
				],
				[
					191,
					1,
					"left_delete",
					null,
					"AgAAAKUAAAAAAAAApQAAAAAAAAABAAAAXZ8AAAAAAAAAnwAAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAApgAAAAAAAACmAAAAAAAAAAAAAAAAAEpA"
				],
				[
					197,
					1,
					"reindent",
					null,
					"AQAAAJ8AAAAAAAAAowAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwAAAAAAAACfAAAAAAAAAAAAAAAAACpA"
				],
				[
					198,
					1,
					"insert",
					{
						"characters": "fn"
					},
					"AgAAAKMAAAAAAAAApAAAAAAAAAAAAAAApAAAAAAAAAClAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowAAAAAAAACjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					199,
					1,
					"insert",
					{
						"characters": " ex"
					},
					"AwAAAKUAAAAAAAAApgAAAAAAAAAAAAAApgAAAAAAAACnAAAAAAAAAAAAAACnAAAAAAAAAKgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQAAAAAAAAClAAAAAAAAAAAAAAAAAPC/"
				],
				[
					200,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"insertTextFormat\":2,\"filterText\":\"extend\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"fn extend(..)\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"fn extend(&mut self, _: List) -> &mut Self {\\n    $0\\n}\",\"range\":{\"end\":{\"character\":9,\"line\":13},\"start\":{\"character\":4,\"line\":13}}},\"kind\":2},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							124,
							199,
							3
						],
						"trigger": "extend"
					},
					"AgAAAKMAAAAAAAAAowAAAAAAAAAFAAAAZm4gZXijAAAAAAAAAN4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqAAAAAAAAACoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					206,
					1,
					"trim_trailing_white_space",
					null,
					"AQAAANAAAAAAAAAA0AAAAAAAAAAIAAAAICAgICAgICA",
					"AQAAAAAAAAABAAAAvAAAAAAAAAC8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					214,
					1,
					"left_delete",
					null,
					"AQAAALgAAAAAAAAAuAAAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAAuQAAAAAAAAC5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					215,
					1,
					"insert",
					{
						"characters": "_list"
					},
					"BQAAALgAAAAAAAAAuQAAAAAAAAAAAAAAuQAAAAAAAAC6AAAAAAAAAAAAAAC6AAAAAAAAALsAAAAAAAAAAAAAALsAAAAAAAAAvAAAAAAAAAAAAAAAvAAAAAAAAAC9AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAAAAAAAAAC4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					218,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAALgAAAAAAAAAuAAAAAAAAAAFAAAAX2xpc3Q",
					"AQAAAAAAAAABAAAAvQAAAAAAAAC9AAAAAAAAAAAAAAAAYHhA"
				],
				[
					219,
					1,
					"insert",
					{
						"characters": "_ciont"
					},
					"BgAAALgAAAAAAAAAuQAAAAAAAAAAAAAAuQAAAAAAAAC6AAAAAAAAAAAAAAC6AAAAAAAAALsAAAAAAAAAAAAAALsAAAAAAAAAvAAAAAAAAAAAAAAAvAAAAAAAAAC9AAAAAAAAAAAAAAC9AAAAAAAAAL4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAAAAAAAAAC4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					220,
					5,
					"left_delete",
					null,
					"BQAAAL0AAAAAAAAAvQAAAAAAAAABAAAAdLwAAAAAAAAAvAAAAAAAAAABAAAAbrsAAAAAAAAAuwAAAAAAAAABAAAAb7oAAAAAAAAAugAAAAAAAAABAAAAabkAAAAAAAAAuQAAAAAAAAABAAAAYw",
					"AQAAAAAAAAABAAAAvgAAAAAAAAC+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					221,
					1,
					"insert",
					{
						"characters": "iterable"
					},
					"CAAAALkAAAAAAAAAugAAAAAAAAAAAAAAugAAAAAAAAC7AAAAAAAAAAAAAAC7AAAAAAAAALwAAAAAAAAAAAAAALwAAAAAAAAAvQAAAAAAAAAAAAAAvQAAAAAAAAC+AAAAAAAAAAAAAAC+AAAAAAAAAL8AAAAAAAAAAAAAAL8AAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADBAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuQAAAAAAAAC5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					222,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAALgAAAAAAAAAuAAAAAAAAAAJAAAAX2l0ZXJhYmxl",
					"AQAAAAAAAAABAAAAwQAAAAAAAADBAAAAAAAAAAAAAAAAAPC/"
				],
				[
					223,
					1,
					"insert",
					{
						"characters": "_container"
					},
					"CgAAALgAAAAAAAAAuQAAAAAAAAAAAAAAuQAAAAAAAAC6AAAAAAAAAAAAAAC6AAAAAAAAALsAAAAAAAAAAAAAALsAAAAAAAAAvAAAAAAAAAAAAAAAvAAAAAAAAAC9AAAAAAAAAAAAAAC9AAAAAAAAAL4AAAAAAAAAAAAAAL4AAAAAAAAAvwAAAAAAAAAAAAAAvwAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAMEAAAAAAAAAAAAAAMEAAAAAAAAAwgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAAAAAAAAAC4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					233,
					1,
					"reindent",
					null,
					"AQAAANkAAAAAAAAA4QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QAAAAAAAADZAAAAAAAAAAAAAAAAcHxA"
				],
				[
					234,
					1,
					"insert",
					{
						"characters": "for"
					},
					"AwAAAOEAAAAAAAAA4gAAAAAAAAAAAAAA4gAAAAAAAADjAAAAAAAAAAAAAADjAAAAAAAAAOQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QAAAAAAAADhAAAAAAAAAAAAAAAAAPC/"
				],
				[
					235,
					1,
					"insert",
					{
						"characters": " _ob"
					},
					"BAAAAOQAAAAAAAAA5QAAAAAAAAAAAAAA5QAAAAAAAADmAAAAAAAAAAAAAADmAAAAAAAAAOcAAAAAAAAAAAAAAOcAAAAAAAAA6AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5AAAAAAAAADkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					236,
					1,
					"insert",
					{
						"characters": "jerc"
					},
					"BAAAAOgAAAAAAAAA6QAAAAAAAAAAAAAA6QAAAAAAAADqAAAAAAAAAAAAAADqAAAAAAAAAOsAAAAAAAAAAAAAAOsAAAAAAAAA7AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6AAAAAAAAADoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					237,
					3,
					"left_delete",
					null,
					"AwAAAOsAAAAAAAAA6wAAAAAAAAABAAAAY+oAAAAAAAAA6gAAAAAAAAABAAAAcukAAAAAAAAA6QAAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAA7AAAAAAAAADsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					238,
					1,
					"insert",
					{
						"characters": "et"
					},
					"AgAAAOkAAAAAAAAA6gAAAAAAAAAAAAAA6gAAAAAAAADrAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6QAAAAAAAADpAAAAAAAAAAAAAAAAAPC/"
				],
				[
					239,
					1,
					"left_delete",
					null,
					"AQAAAOoAAAAAAAAA6gAAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAA6wAAAAAAAADrAAAAAAAAAAAAAAAAAPC/"
				],
				[
					240,
					1,
					"insert",
					{
						"characters": "ct"
					},
					"AgAAAOoAAAAAAAAA6wAAAAAAAAAAAAAA6wAAAAAAAADsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA6gAAAAAAAADqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					241,
					1,
					"insert",
					{
						"characters": " in"
					},
					"AwAAAOwAAAAAAAAA7QAAAAAAAAAAAAAA7QAAAAAAAADuAAAAAAAAAAAAAADuAAAAAAAAAO8AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7AAAAAAAAADsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					242,
					1,
					"insert",
					{
						"characters": " _conta"
					},
					"BwAAAO8AAAAAAAAA8AAAAAAAAAAAAAAA8AAAAAAAAADxAAAAAAAAAAAAAADxAAAAAAAAAPIAAAAAAAAAAAAAAPIAAAAAAAAA8wAAAAAAAAAAAAAA8wAAAAAAAAD0AAAAAAAAAAAAAAD0AAAAAAAAAPUAAAAAAAAAAAAAAPUAAAAAAAAA9gAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7wAAAAAAAADvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					243,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_container\",\"preselect\":true,\"detail\":\"List\",\"sortText\":\"fffffff8\",\"label\":\"&mut _container\",\"additionalTextEdits\":[],\"deprecated\":false,\"textEdit\":{\"newText\":\"&mut _container\",\"range\":{\"end\":{\"character\":29,\"line\":14},\"start\":{\"character\":23,\"line\":14}}},\"kind\":6},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							157,
							242,
							7
						],
						"trigger": "_container"
					},
					"AgAAAPAAAAAAAAAA8AAAAAAAAAAGAAAAX2NvbnRh8AAAAAAAAAD/AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA9gAAAAAAAAD2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					244,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAP8AAAAAAAAAAAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wAAAAAAAAD/AAAAAAAAAAAAAAAAAPC/"
				],
				[
					246,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"_list\",\"additionalTextEdits\":[],\"detail\":\"VecDeque<Object, Global>\",\"sortText\":\"fffffffd\",\"label\":\"_list\",\"deprecated\":false,\"textEdit\":{\"newText\":\"_list\",\"range\":{\"end\":{\"character\":39,\"line\":14},\"start\":{\"character\":39,\"line\":14}}},\"documentation\":{\"value\":\"_list which holds all the python objects together\",\"kind\":\"markdown\"},\"kind\":5},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": true,
						"query_change_id":
						[
							159,
							244,
							1
						],
						"trigger": "_list"
					},
					"AQAAAAABAAAAAAAABQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAPC/"
				],
				[
					249,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAUBAAAAAAAABgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABQEAAAAAAAAFAQAAAAAAAAAAAAAA4IFA"
				],
				[
					250,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAAYBAAAAAAAACAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgEAAAAAAAAGAQAAAAAAAAAAAAAAAPC/"
				],
				[
					251,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"BgAAAAcBAAAAAAAACAEAAAAAAAAAAAAACAEAAAAAAAAQAQAAAAAAAAAAAAAQAQAAAAAAABEBAAAAAAAAAAAAABEBAAAAAAAAGQEAAAAAAAAAAAAACAEAAAAAAAAIAQAAAAAAAAgAAAAgICAgICAgIAgBAAAAAAAAFAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwEAAAAAAAAHAQAAAAAAAAAAAAAAAPC/"
				],
				[
					261,
					1,
					"delete_word",
					{
						"forward": true
					},
					"AgAAAPAAAAAAAAAA8AAAAAAAAAABAAAAJgcBAAAAAAAABwEAAAAAAAAMAAAAICAgICAgICAgICAg",
					"AQAAAAAAAAABAAAA8AAAAAAAAADwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					262,
					4,
					"right_delete",
					null,
					"BAAAAPAAAAAAAAAA8AAAAAAAAAABAAAAbfAAAAAAAAAA8AAAAAAAAAABAAAAdfAAAAAAAAAA8AAAAAAAAAABAAAAdPAAAAAAAAAA8AAAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAA8AAAAAAAAADwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					270,
					1,
					"reindent",
					null,
					"AQAAAAMBAAAAAAAADwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAwEAAAAAAAADAQAAAAAAAAAAAAAAsHJA"
				],
				[
					271,
					1,
					"insert",
					{
						"characters": "self.ap"
					},
					"BwAAAA8BAAAAAAAAEAEAAAAAAAAAAAAAEAEAAAAAAAARAQAAAAAAAAAAAAARAQAAAAAAABIBAAAAAAAAAAAAABIBAAAAAAAAEwEAAAAAAAAAAAAAEwEAAAAAAAAUAQAAAAAAAAAAAAAUAQAAAAAAABUBAAAAAAAAAAAAABUBAAAAAAAAFgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADwEAAAAAAAAPAQAAAAAAAAAAAAAAAPC/"
				],
				[
					272,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAABYBAAAAAAAAGAEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgEAAAAAAAAWAQAAAAAAAAAAAAAAAPC/"
				],
				[
					273,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAABYBAAAAAAAAFgEAAAAAAAABAAAAWxYBAAAAAAAAFgEAAAAAAAABAAAAXQ",
					"AQAAAAAAAAABAAAAFwEAAAAAAAAXAQAAAAAAAAAAAAAAAPC/"
				],
				[
					274,
					2,
					"left_delete",
					null,
					"AgAAABUBAAAAAAAAFQEAAAAAAAABAAAAcBQBAAAAAAAAFAEAAAAAAAABAAAAYQ",
					"AQAAAAAAAAABAAAAFgEAAAAAAAAWAQAAAAAAAAAAAAAAAPC/"
				],
				[
					275,
					1,
					"insert",
					{
						"characters": "ap"
					},
					"AgAAABQBAAAAAAAAFQEAAAAAAAAAAAAAFQEAAAAAAAAWAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAEAAAAAAAAUAQAAAAAAAAAAAAAAAPC/"
				],
				[
					277,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"command\":{\"command\":\"editor.action.triggerParameterHints\",\"title\":\"triggerParameterHints\"},\"filterText\":\"append_back\",\"deprecated\":false,\"data\":{\"imports\":[{\"full_import_path\":\"crate::Append\",\"imported_name\":\"Append\"}],\"position\":{\"position\":{\"character\":19,\"line\":15},\"textDocument\":{\"uri\":\"file:///home/alexzander/Alexzander__/programming/rust/python/src/list/extend.rs\"}}},\"documentation\":{\"value\":\"Performs append\",\"kind\":\"markdown\"},\"kind\":2,\"insertTextFormat\":2,\"additionalTextEdits\":[],\"detail\":\"fn(&mut self, T) -> &mut Self\",\"textEdit\":{\"newText\":\"append_back(${1:_})$0\",\"range\":{\"end\":{\"character\":19,\"line\":15},\"start\":{\"character\":17,\"line\":15}}},\"label\":\"append_back(â€¦) (use crate::Append)\",\"sortText\":\"fffffffd\"},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							181,
							275,
							2
						],
						"trigger": "append_back"
					},
					"AgAAABQBAAAAAAAAFAEAAAAAAAACAAAAYXAUAQAAAAAAACIBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFgEAAAAAAAAWAQAAAAAAAAAAAAAAAPC/"
				],
				[
					278,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							[
								[
									2,
									4
								],
								[
									2,
									9
								],
								"crate",
								null
							],
							[
								[
									2,
									9
								],
								[
									2,
									11
								],
								"",
								null
							],
							[
								[
									2,
									11
								],
								[
									2,
									18
								],
								"",
								null
							],
							[
								[
									2,
									18
								],
								[
									2,
									18
								],
								"::",
								null
							],
							[
								[
									2,
									18
								],
								[
									2,
									18
								],
								"{_Object, Append}",
								null
							]
						]
					},
					"BQAAABQAAAAAAAAAJQAAAAAAAAAAAAAAFAAAAAAAAAAWAAAAAAAAAAAAAAANAAAAAAAAAA0AAAAAAAAABwAAAF9PYmplY3QLAAAAAAAAAAsAAAAAAAAAAgAAADo6BgAAAAAAAAALAAAAAAAAAAUAAABjcmF0ZQ",
					"AQAAAAAAAAABAAAAIAEAAAAAAAAhAQAAAAAAAAAAAAAAAPC/"
				],
				[
					283,
					1,
					"left_delete",
					null,
					"AQAAACoBAAAAAAAAKgEAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAAKwEAAAAAAAArAQAAAAAAAAAAAAAAAPC/"
				],
				[
					284,
					1,
					"insert",
					{
						"characters": "_object"
					},
					"BwAAACoBAAAAAAAAKwEAAAAAAAAAAAAAKwEAAAAAAAAsAQAAAAAAAAAAAAAsAQAAAAAAAC0BAAAAAAAAAAAAAC0BAAAAAAAALgEAAAAAAAAAAAAALgEAAAAAAAAvAQAAAAAAAAAAAAAvAQAAAAAAADABAAAAAAAAAAAAADABAAAAAAAAMQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgEAAAAAAAAqAQAAAAAAAAAAAAAAAPC/"
				],
				[
					291,
					1,
					"insert",
					{
						"characters": "\nself"
					},
					"BgAAADwBAAAAAAAAPQEAAAAAAAAAAAAAPQEAAAAAAABFAQAAAAAAAAAAAABFAQAAAAAAAEYBAAAAAAAAAAAAAEYBAAAAAAAARwEAAAAAAAAAAAAARwEAAAAAAABIAQAAAAAAAAAAAABIAQAAAAAAAEkBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAEAAAAAAAA8AQAAAAAAAAAAAAAAEH5A"
				],
				[
					304,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADIBAAAAAAAAMwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgEAAAAAAAAyAQAAAAAAAAAAAAAAAPC/"
				],
				[
					329,
					1,
					"insert",
					{
						"characters": "\n///"
					},
					"BAAAACAAAAAAAAAAIQAAAAAAAAAAAAAAIQAAAAAAAAAiAAAAAAAAAAAAAAAiAAAAAAAAACMAAAAAAAAAAAAAACMAAAAAAAAAJAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIAAAAAAAAAAgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					332,
					1,
					"insert",
					{
						"characters": "\n///"
					},
					"BQAAAEsAAAAAAAAATAAAAAAAAAAAAAAATAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAFEAAAAAAAAAAAAAAFEAAAAAAAAAUgAAAAAAAAAAAAAAUgAAAAAAAABTAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwAAAAAAAABLAAAAAAAAAP///////+9/"
				],
				[
					334,
					1,
					"insert",
					{
						"characters": " extend"
					},
					"BwAAACQAAAAAAAAAJQAAAAAAAAAAAAAAJQAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACcAAAAAAAAAAAAAACcAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAApAAAAAAAAAAAAAAApAAAAAAAAACoAAAAAAAAAAAAAACoAAAAAAAAAKwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAAAAAAAAAAkAAAAAAAAAAAAAAAAwFZA"
				],
				[
					335,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAACsAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAtAAAAAAAAAAAAAAAtAAAAAAAAAC4AAAAAAAAAAAAAAC4AAAAAAAAALwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwAAAAAAAAArAAAAAAAAAAAAAAAAAPC/"
				],
				[
					336,
					1,
					"insert",
					{
						"characters": " current"
					},
					"CAAAAC8AAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAAxAAAAAAAAAAAAAAAxAAAAAAAAADIAAAAAAAAAAAAAADIAAAAAAAAAMwAAAAAAAAAAAAAAMwAAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADUAAAAAAAAAAAAAADUAAAAAAAAANgAAAAAAAAAAAAAANgAAAAAAAAA3AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwAAAAAAAAAvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					337,
					1,
					"insert",
					{
						"characters": " list"
					},
					"BQAAADcAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA5AAAAAAAAAAAAAAA5AAAAAAAAADoAAAAAAAAAAAAAADoAAAAAAAAAOwAAAAAAAAAAAAAAOwAAAAAAAAA8AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwAAAAAAAAA3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					338,
					1,
					"insert",
					{
						"characters": " with"
					},
					"BQAAADwAAAAAAAAAPQAAAAAAAAAAAAAAPQAAAAAAAAA+AAAAAAAAAAAAAAA+AAAAAAAAAD8AAAAAAAAAAAAAAD8AAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABBAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAAAAAAAAAA8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					339,
					1,
					"insert",
					{
						"characters": " anything"
					},
					"CQAAAEEAAAAAAAAAQgAAAAAAAAAAAAAAQgAAAAAAAABDAAAAAAAAAAAAAABDAAAAAAAAAEQAAAAAAAAAAAAAAEQAAAAAAAAARQAAAAAAAAAAAAAARQAAAAAAAABGAAAAAAAAAAAAAABGAAAAAAAAAEcAAAAAAAAAAAAAAEcAAAAAAAAASAAAAAAAAAAAAAAASAAAAAAAAABJAAAAAAAAAAAAAABJAAAAAAAAAEoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQAAAAAAAABBAAAAAAAAAAAAAAAAAPC/"
				],
				[
					341,
					1,
					"insert",
					{
						"characters": " extend"
					},
					"BwAAAHkAAAAAAAAAegAAAAAAAAAAAAAAegAAAAAAAAB7AAAAAAAAAAAAAAB7AAAAAAAAAHwAAAAAAAAAAAAAAHwAAAAAAAAAfQAAAAAAAAAAAAAAfQAAAAAAAAB+AAAAAAAAAAAAAAB+AAAAAAAAAH8AAAAAAAAAAAAAAH8AAAAAAAAAgAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeQAAAAAAAAB5AAAAAAAAAAAAAAAAqIBA"
				],
				[
					342,
					1,
					"insert",
					{
						"characters": " function"
					},
					"CQAAAIAAAAAAAAAAgQAAAAAAAAAAAAAAgQAAAAAAAACCAAAAAAAAAAAAAACCAAAAAAAAAIMAAAAAAAAAAAAAAIMAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACFAAAAAAAAAAAAAACFAAAAAAAAAIYAAAAAAAAAAAAAAIYAAAAAAAAAhwAAAAAAAAAAAAAAhwAAAAAAAACIAAAAAAAAAAAAAACIAAAAAAAAAIkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					355,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAEwBAAAAAAAATQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAEAAAAAAABMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					356,
					1,
					"left_delete",
					null,
					"AQAAAEwBAAAAAAAATAEAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAATQEAAAAAAABNAQAAAAAAAAAAAAAAAPC/"
				],
				[
					357,
					1,
					"insert",
					{
						"characters": ".iter"
					},
					"BQAAAEwBAAAAAAAATQEAAAAAAAAAAAAATQEAAAAAAABOAQAAAAAAAAAAAABOAQAAAAAAAE8BAAAAAAAAAAAAAE8BAAAAAAAAUAEAAAAAAAAAAAAAUAEAAAAAAABRAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAEAAAAAAABMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					358,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"insertTextFormat\":2,\"filterText\":\"iter\",\"additionalTextEdits\":[],\"detail\":\"fn(&self) -> Iter<T>\",\"sortText\":\"fffffffd\",\"label\":\"iter()\",\"deprecated\":false,\"textEdit\":{\"newText\":\"iter()$0\",\"range\":{\"end\":{\"character\":44,\"line\":16},\"start\":{\"character\":40,\"line\":16}}},\"documentation\":{\"value\":\"Returns a front-to-back iterator.\\n\\n# Examples\\n\\n```rust\\nuse std::collections::VecDeque;\\n\\nlet mut buf = VecDeque::new();\\nbuf.push_back(5);\\nbuf.push_back(3);\\nbuf.push_back(4);\\nlet b: &[_] = &[&5, &3, &4];\\nlet c: Vec<&i32> = buf.iter().collect();\\nassert_eq!(&c[..], b);\\n```\",\"kind\":\"markdown\"},\"kind\":2},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							224,
							357,
							5
						],
						"trigger": "iter"
					},
					"AgAAAE0BAAAAAAAATQEAAAAAAAAEAAAAaXRlck0BAAAAAAAAUwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQEAAAAAAABRAQAAAAAAAAAAAAAAAPC/"
				],
				[
					372,
					1,
					"delete_word",
					{
						"forward": true
					},
					"AQAAAE0BAAAAAAAATQEAAAAAAAAEAAAAaXRlcg",
					"AQAAAAAAAAABAAAATQEAAAAAAABNAQAAAAAAAAAAAAAAAPC/"
				],
				[
					375,
					3,
					"right_delete",
					null,
					"AwAAAEwBAAAAAAAATAEAAAAAAAABAAAALkwBAAAAAAAATAEAAAAAAAABAAAAKEwBAAAAAAAATAEAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAATAEAAAAAAABMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					386,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAJQBAAAAAAAAlQEAAAAAAAAAAAAAlQEAAAAAAACWAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAEAAAAAAACUAQAAAAAAAAAAAAAAsH9A"
				],
				[
					392,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAJQBAAAAAAAAlQEAAAAAAAAAAAAAlQEAAAAAAACWAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAEAAAAAAACUAQAAAAAAAAAAAAAAAPC/"
				],
				[
					393,
					1,
					"paste",
					null,
					"AQAAAJYBAAAAAAAAXAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlgEAAAAAAACWAQAAAAAAAAAAAAAAAPC/"
				],
				[
					403,
					1,
					"insert",
					{
						"characters": "&sr"
					},
					"BAAAAKIBAAAAAAAAowEAAAAAAAAAAAAAowEAAAAAAACjAQAAAAAAAAQAAABMaXN0owEAAAAAAACkAQAAAAAAAAAAAACkAQAAAAAAAKUBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogEAAAAAAACmAQAAAAAAAAAAAAAAAPC/"
				],
				[
					404,
					1,
					"left_delete",
					null,
					"AQAAAKQBAAAAAAAApAEAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAApQEAAAAAAAClAQAAAAAAAAAAAAAAAPC/"
				],
				[
					405,
					1,
					"insert",
					{
						"characters": "tr"
					},
					"AgAAAKQBAAAAAAAApQEAAAAAAAAAAAAApQEAAAAAAACmAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAEAAAAAAACkAQAAAAAAAAAAAAAAAPC/"
				],
				[
					412,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAANgBAAAAAAAA2AEAAAAAAAAEAAAATGlzdA",
					"AQAAAAAAAAABAAAA3AEAAAAAAADcAQAAAAAAAAAAAAAAAPC/"
				],
				[
					413,
					1,
					"insert",
					{
						"characters": "&str"
					},
					"BAAAANgBAAAAAAAA2QEAAAAAAAAAAAAA2QEAAAAAAADaAQAAAAAAAAAAAADaAQAAAAAAANsBAAAAAAAAAAAAANsBAAAAAAAA3AEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2AEAAAAAAADYAQAAAAAAAAAAAAAAAPC/"
				],
				[
					416,
					1,
					"delete_word",
					{
						"forward": true
					},
					"AQAAAMwBAAAAAAAAzAEAAAAAAAAKAAAAX2NvbnRhaW5lcg",
					"AQAAAAAAAAABAAAAzAEAAAAAAADMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					417,
					1,
					"insert",
					{
						"characters": "_str"
					},
					"BAAAAMwBAAAAAAAAzQEAAAAAAAAAAAAAzQEAAAAAAADOAQAAAAAAAAAAAADOAQAAAAAAAM8BAAAAAAAAAAAAAM8BAAAAAAAA0AEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzAEAAAAAAADMAQAAAAAAAAAAAAAAAPC/"
				],
				[
					432,
					1,
					"insert",
					{
						"characters": "_str>"
					},
					"BgAAAP4BAAAAAAAA/wEAAAAAAAAAAAAA/wEAAAAAAAD/AQAAAAAAAAoAAABfY29udGFpbmVy/wEAAAAAAAAAAgAAAAAAAAAAAAAAAgAAAAAAAAECAAAAAAAAAAAAAAECAAAAAAAAAgIAAAAAAAAAAAAAAgIAAAAAAAADAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gEAAAAAAAAIAgAAAAAAAAAAAAAAAPC/"
				],
				[
					433,
					1,
					"left_delete",
					null,
					"AQAAAAICAAAAAAAAAgIAAAAAAAABAAAAPg",
					"AQAAAAAAAAABAAAAAwIAAAAAAAADAgAAAAAAAAAAAAAAAPC/"
				],
				[
					434,
					1,
					"insert",
					{
						"characters": ".chars()"
					},
					"CAAAAAICAAAAAAAAAwIAAAAAAAAAAAAAAwIAAAAAAAAEAgAAAAAAAAAAAAAEAgAAAAAAAAUCAAAAAAAAAAAAAAUCAAAAAAAABgIAAAAAAAAAAAAABgIAAAAAAAAHAgAAAAAAAAAAAAAHAgAAAAAAAAgCAAAAAAAAAAAAAAgCAAAAAAAACQIAAAAAAAAAAAAACQIAAAAAAAAKAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgIAAAAAAAACAgAAAAAAAAAAAAAAAPC/"
				],
				[
					435,
					6,
					"right_delete",
					null,
					"BgAAAAoCAAAAAAAACgIAAAAAAAABAAAALgoCAAAAAAAACgIAAAAAAAABAAAAXwoCAAAAAAAACgIAAAAAAAABAAAAbAoCAAAAAAAACgIAAAAAAAABAAAAaQoCAAAAAAAACgIAAAAAAAABAAAAcwoCAAAAAAAACgIAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAACgIAAAAAAAAKAgAAAAAAAAAAAAAAAPC/"
				],
				[
					446,
					1,
					"left_delete",
					null,
					"AQAAAPkBAAAAAAAA+QEAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAA+gEAAAAAAAD6AQAAAAAAAAAAAAAAAPC/"
				],
				[
					447,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAPMBAAAAAAAA8wEAAAAAAAAGAAAAX29iamVj",
					"AQAAAAAAAAABAAAA+QEAAAAAAAD5AQAAAAAAAAAAAAAAAPC/"
				],
				[
					448,
					1,
					"insert",
					{
						"characters": "_char"
					},
					"BQAAAPMBAAAAAAAA9AEAAAAAAAAAAAAA9AEAAAAAAAD1AQAAAAAAAAAAAAD1AQAAAAAAAPYBAAAAAAAAAAAAAPYBAAAAAAAA9wEAAAAAAAAAAAAA9wEAAAAAAAD4AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8wEAAAAAAADzAQAAAAAAAAAAAAAAAPC/"
				],
				[
					454,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAACgCAAAAAAAAKAIAAAAAAAAHAAAAX29iamVjdA",
					"AQAAAAAAAAABAAAALwIAAAAAAAAvAgAAAAAAAAAAAAAAAPC/"
				],
				[
					455,
					1,
					"insert",
					{
						"characters": "_char"
					},
					"BQAAACgCAAAAAAAAKQIAAAAAAAAAAAAAKQIAAAAAAAAqAgAAAAAAAAAAAAAqAgAAAAAAACsCAAAAAAAAAAAAACsCAAAAAAAALAIAAAAAAAAAAAAALAIAAAAAAAAtAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAIAAAAAAAAoAgAAAAAAAAAAAAAAAPC/"
				],
				[
					479,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAE4CAAAAAAAATwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATgIAAAAAAABOAgAAAAAAAAAAAAAAAPC/"
				],
				[
					480,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line.sublime-macro"
					},
					"AQAAAE8CAAAAAAAAUAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATwIAAAAAAABPAgAAAAAAAAAAAAAAAPC/"
				],
				[
					481,
					1,
					"paste",
					null,
					"AQAAAFACAAAAAAAACAMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUAIAAAAAAABQAgAAAAAAAAAAAAAAAPC/"
				],
				[
					500,
					1,
					"insert",
					{
						"characters": "String"
					},
					"DgAAAIwCAAAAAAAAjQIAAAAAAAAAAAAAjQIAAAAAAACNAgAAAAAAAAQAAAAmc3RyXAIAAAAAAABdAgAAAAAAAAAAAABdAgAAAAAAAF0CAAAAAAAABAAAACZzdHKKAgAAAAAAAIsCAAAAAAAAAAAAAF0CAAAAAAAAXgIAAAAAAAAAAAAAjAIAAAAAAACNAgAAAAAAAAAAAABeAgAAAAAAAF8CAAAAAAAAAAAAAI4CAAAAAAAAjwIAAAAAAAAAAAAAXwIAAAAAAABgAgAAAAAAAAAAAACQAgAAAAAAAJECAAAAAAAAAAAAAGACAAAAAAAAYQIAAAAAAAAAAAAAkgIAAAAAAACTAgAAAAAAAAAAAABhAgAAAAAAAGICAAAAAAAAAAAAAA",
					"AQAAAAAAAAACAAAAXAIAAAAAAABgAgAAAAAAAAAAAAAAAPC/jAIAAAAAAACQAgAAAAAAAAAAAAAAAPC/"
				],
				[
					514,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							[
								[
									33,
									25
								],
								[
									33,
									29
								],
								"_string",
								506
							],
							[
								[
									34,
									21
								],
								[
									34,
									25
								],
								"_string",
								506
							]
						]
					},
					"AgAAALoCAAAAAAAAwQIAAAAAAAAEAAAAX3N0cogCAAAAAAAAjwIAAAAAAAAEAAAAX3N0cg",
					"AQAAAAAAAAABAAAAigIAAAAAAACKAgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/list/mod.rs",
			"settings":
			{
				"buffer_size": 156,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "\nmod"
					},
					"BAAAACcAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAApAAAAAAAAAAAAAAApAAAAAAAAACoAAAAAAAAAAAAAACoAAAAAAAAAKwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJwAAAAAAAAAnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " extend;"
					},
					"CAAAACsAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAtAAAAAAAAAAAAAAAtAAAAAAAAAC4AAAAAAAAAAAAAAC4AAAAAAAAALwAAAAAAAAAAAAAALwAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAzAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKwAAAAAAAAArAAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "\npuvb"
					},
					"BQAAAIMAAAAAAAAAhAAAAAAAAAAAAAAAhAAAAAAAAACFAAAAAAAAAAAAAACFAAAAAAAAAIYAAAAAAAAAAAAAAIYAAAAAAAAAhwAAAAAAAAAAAAAAhwAAAAAAAACIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAgwAAAAAAAACDAAAAAAAAAP///////+9/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " us"
					},
					"AwAAAIgAAAAAAAAAiQAAAAAAAAAAAAAAiQAAAAAAAACKAAAAAAAAAAAAAACKAAAAAAAAAIsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAAAAAAAAACIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAIkAAAAAAAAAiQAAAAAAAAACAAAAdXM",
					"AQAAAAAAAAABAAAAiwAAAAAAAACLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					2,
					"left_delete",
					null,
					"AgAAAIgAAAAAAAAAiAAAAAAAAAABAAAAIIcAAAAAAAAAhwAAAAAAAAABAAAAYg",
					"AQAAAAAAAAABAAAAiQAAAAAAAACJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAIcAAAAAAAAAiAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwAAAAAAAACHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					2,
					"left_delete",
					null,
					"AgAAAIcAAAAAAAAAhwAAAAAAAAABAAAAYoYAAAAAAAAAhgAAAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAAiAAAAAAAAACIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": "b"
					},
					"AQAAAIYAAAAAAAAAhwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhgAAAAAAAACGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " use"
					},
					"BAAAAIcAAAAAAAAAiAAAAAAAAAAAAAAAiAAAAAAAAACJAAAAAAAAAAAAAACJAAAAAAAAAIoAAAAAAAAAAAAAAIoAAAAAAAAAiwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwAAAAAAAACHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " ex"
					},
					"AwAAAIsAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACNAAAAAAAAAAAAAACNAAAAAAAAAI4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwAAAAAAAACLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"extend\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"extend\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"extend\",\"range\":{\"end\":{\"character\":10,\"line\":8},\"start\":{\"character\":8,\"line\":8}}},\"kind\":9},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							15,
							23,
							3
						],
						"trigger": "extend"
					},
					"AgAAAIwAAAAAAAAAjAAAAAAAAAACAAAAZXiMAAAAAAAAAJIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgAAAAAAAACOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "::"
					},
					"AgAAAJIAAAAAAAAAkwAAAAAAAAAAAAAAkwAAAAAAAACUAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgAAAAAAAACSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"Extend\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"Extend\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"Extend\",\"range\":{\"end\":{\"character\":16,\"line\":8},\"start\":{\"character\":16,\"line\":8}}},\"kind\":8},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": true,
						"query_change_id":
						[
							17,
							25,
							2
						],
						"trigger": "Extend"
					},
					"AQAAAJQAAAAAAAAAmgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlAAAAAAAAACUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAJoAAAAAAAAAmwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgAAAAAAAACaAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/object.rs",
			"settings":
			{
				"buffer_size": 1676,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					18,
					2,
					"cut",
					null,
					"AgAAAJkBAAAAAAAAmQEAAAAAAAAbAAAAICAgIC8vLyBweXRob24gbGVuKG9iamVjdCkKmQEAAAAAAACZAQAAAAAAACAAAAAgICAgZm4gX19sZW5fXygmc2VsZikgLT4gdXNpemU7Cg",
					"AQAAAAAAAAABAAAAswEAAAAAAACzAQAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/integer.rs",
			"settings":
			{
				"buffer_size": 2576,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					8,
					1,
					"insert",
					{
						"characters": "<T>"
					},
					"AwAAAEgJAAAAAAAASQkAAAAAAAAAAAAASQkAAAAAAABKCQAAAAAAAAAAAABKCQAAAAAAAEsJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABICQAAAAAAAEgJAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "<T>"
					},
					"AwAAAFMJAAAAAAAAVAkAAAAAAAAAAAAAVAkAAAAAAABVCQAAAAAAAAAAAABVCQAAAAAAAFYJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABTCQAAAAAAAFMJAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAF8JAAAAAAAAXwkAAAAAAAADAAAAaTMy",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiCQAAAAAAAGIJAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "T"
					},
					"AQAAAF8JAAAAAAAAYAkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABfCQAAAAAAAF8JAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"left_delete",
					null,
					"AQAAAGEJAAAAAAAAYQkAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABiCQAAAAAAAGIJAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "\nwhere:"
					},
					"BwAAAGEJAAAAAAAAYgkAAAAAAAAAAAAAYgkAAAAAAABjCQAAAAAAAAAAAABjCQAAAAAAAGQJAAAAAAAAAAAAAGQJAAAAAAAAZQkAAAAAAAAAAAAAZQkAAAAAAABmCQAAAAAAAAAAAABmCQAAAAAAAGcJAAAAAAAAAAAAAGcJAAAAAAAAaAkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABhCQAAAAAAAGEJAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " T"
					},
					"AgAAAGgJAAAAAAAAaQkAAAAAAAAAAAAAaQkAAAAAAABqCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABoCQAAAAAAAGgJAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					3,
					"left_delete",
					null,
					"AwAAAGkJAAAAAAAAaQkAAAAAAAABAAAAVGgJAAAAAAAAaAkAAAAAAAABAAAAIGcJAAAAAAAAZwkAAAAAAAABAAAAOg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqCQAAAAAAAGoJAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " T:"
					},
					"AwAAAGcJAAAAAAAAaAkAAAAAAAAAAAAAaAkAAAAAAABpCQAAAAAAAAAAAABpCQAAAAAAAGoJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABnCQAAAAAAAGcJAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": " Siz"
					},
					"BAAAAGoJAAAAAAAAawkAAAAAAAAAAAAAawkAAAAAAABsCQAAAAAAAAAAAABsCQAAAAAAAG0JAAAAAAAAAAAAAG0JAAAAAAAAbgkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABqCQAAAAAAAGoJAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"additionalTextEdits\":[],\"textEdit\":{\"range\":{\"end\":{\"character\":12,\"line\":119},\"start\":{\"character\":9,\"line\":119}},\"newText\":\"Sized\"},\"kind\":8,\"label\":\"Sized\",\"sortText\":\"fffffffd\",\"deprecated\":false,\"documentation\":{\"kind\":\"markdown\",\"value\":\"Types with a constant size known at compile time.\\n\\nAll type parameters have an implicit bound of `Sized`. The special syntax\\n`?Sized` can be used to remove this bound if it's not appropriate.\\n\\n```rust\\nstruct Foo<T>(T);\\nstruct Bar<T: ?Sized>(T);\\n\\n// struct FooUse(Foo<[i32]>); // error: Sized is not implemented for [i32]\\nstruct BarUse(Bar<[i32]>); // OK\\n```\\n\\nThe one exception is the implicit `Self` type of a trait. A trait does not\\nhave an implicit `Sized` bound as this is incompatible with [trait object]s\\nwhere, by definition, the trait needs to work with all possible implementors,\\nand thus could be any size.\\n\\nAlthough Rust will let you bind `Sized` to a trait, you won't\\nbe able to use it to form a trait object later:\\n\\n```rust\\ntrait Foo { }\\ntrait Bar: Sized { }\\n\\nstruct Impl;\\nimpl Foo for Impl { }\\nimpl Bar for Impl { }\\n\\nlet x: &dyn Foo = &Impl;    // OK\\n// let y: &dyn Bar = &Impl; // error: the trait `Bar` cannot\\n                            // be made into an object\\n```\\n\\n[trait object]: ../../book/ch17-02-trait-objects.html\"},\"filterText\":\"Sized\"},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							18,
							23,
							4
						],
						"trigger": "Sized"
					},
					"AgAAAGsJAAAAAAAAawkAAAAAAAADAAAAU2l6awkAAAAAAABwCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABuCQAAAAAAAG4JAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": " +"
					},
					"AgAAAHAJAAAAAAAAcQkAAAAAAAAAAAAAcQkAAAAAAAByCQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABwCQAAAAAAAHAJAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"insert",
					{
						"characters": " fmt::Di"
					},
					"CAAAAHIJAAAAAAAAcwkAAAAAAAAAAAAAcwkAAAAAAAB0CQAAAAAAAAAAAAB0CQAAAAAAAHUJAAAAAAAAAAAAAHUJAAAAAAAAdgkAAAAAAAAAAAAAdgkAAAAAAAB3CQAAAAAAAAAAAAB3CQAAAAAAAHgJAAAAAAAAAAAAAHgJAAAAAAAAeQkAAAAAAAAAAAAAeQkAAAAAAAB6CQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAByCQAAAAAAAHIJAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"additionalTextEdits\":[],\"textEdit\":{\"range\":{\"end\":{\"character\":24,\"line\":119},\"start\":{\"character\":22,\"line\":119}},\"newText\":\"Display\"},\"kind\":8,\"label\":\"Display\",\"sortText\":\"fffffffd\",\"deprecated\":false,\"documentation\":{\"kind\":\"markdown\",\"value\":\"Format trait for an empty format, `{}`.\\n\\n`Display` is similar to [`Debug`], but `Display` is for user-facing\\noutput, and so cannot be derived.\\n\\nFor more information on formatters, see [the module-level documentation][module].\\n\\n[module]: ../../std/fmt/index.html\\n\\n# Examples\\n\\nImplementing `Display` on a type:\\n\\n```rust\\nuse std::fmt;\\n\\nstruct Point {\\n    x: i32,\\n    y: i32,\\n}\\n\\nimpl fmt::Display for Point {\\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\\n        write!(f, \\\"({}, {})\\\", self.x, self.y)\\n    }\\n}\\n\\nlet origin = Point { x: 0, y: 0 };\\n\\nassert_eq!(format!(\\\"The origin is: {}\\\", origin), \\\"The origin is: (0, 0)\\\");\\n```\"},\"filterText\":\"Display\"},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							21,
							26,
							8
						],
						"trigger": "Display"
					},
					"AgAAAHgJAAAAAAAAeAkAAAAAAAACAAAARGl4CQAAAAAAAH8JAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB6CQAAAAAAAHoJAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAH8JAAAAAAAAgAkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB/CQAAAAAAAH8JAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAIAJAAAAAAAAgQkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACACQAAAAAAAIAJAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					2,
					"left_delete",
					null,
					"AgAAAIAJAAAAAAAAgAkAAAAAAAABAAAACn8JAAAAAAAAfwkAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACBCQAAAAAAAIEJAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAH8JAAAAAAAAgAkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB/CQAAAAAAAH8JAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"left_delete",
					null,
					"AQAAAGYKAAAAAAAAZgoAAAAAAAACAQAACgppbXBsIF9PYmplY3QgZm9yIEludDxpNjQ+IHsKICAgIGZuIF9fcmVwcl9fKCZzZWxmKSAtPiBTdHJpbmcgewogICAgICAgIGZvcm1hdCEoInt9Iiwgc2VsZi5faW50ZWdlcikKICAgIH0KCiAgICBmbiBfX2xlbl9fKCZzZWxmKSAtPiB1c2l6ZSB7CiAgICAgICAgc2VsZi5faW50ZWdlciBhcyB1c2l6ZQogICAgfQoKICAgIGZuIF9fc3RyX18oJnNlbGYpIC0+IFN0cmluZyB7CiAgICAgICAgZm9ybWF0ISgie30iLCBzZWxmLl9pbnRlZ2VyKQogICAgfQp9",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABmCgAAAAAAAGgLAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": "<T>"
					},
					"AwAAAB0LAAAAAAAAHgsAAAAAAAAAAAAAHgsAAAAAAAAfCwAAAAAAAAAAAAAfCwAAAAAAACALAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdCwAAAAAAAB0LAAAAAAAAAAAAAAAA8L8"
				],
				[
					49,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAADMLAAAAAAAAMwsAAAAAAAADAAAAaTMy",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2CwAAAAAAADYLAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "T"
					},
					"AQAAADMLAAAAAAAANAsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzCwAAAAAAADMLAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"left_delete",
					null,
					"AQAAADULAAAAAAAANQsAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2CwAAAAAAADYLAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "\nwhere"
					},
					"BgAAADULAAAAAAAANgsAAAAAAAAAAAAANgsAAAAAAAA3CwAAAAAAAAAAAAA3CwAAAAAAADgLAAAAAAAAAAAAADgLAAAAAAAAOQsAAAAAAAAAAAAAOQsAAAAAAAA6CwAAAAAAAAAAAAA6CwAAAAAAADsLAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA1CwAAAAAAADULAAAAAAAAAAAAAAAA8L8"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": " T:"
					},
					"AwAAADsLAAAAAAAAPAsAAAAAAAAAAAAAPAsAAAAAAAA9CwAAAAAAAAAAAAA9CwAAAAAAAD4LAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA7CwAAAAAAADsLAAAAAAAAAAAAAAAA8L8"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": " siz"
					},
					"BAAAAD4LAAAAAAAAPwsAAAAAAAAAAAAAPwsAAAAAAABACwAAAAAAAAAAAABACwAAAAAAAEELAAAAAAAAAAAAAEELAAAAAAAAQgsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA+CwAAAAAAAD4LAAAAAAAAAAAAAAAA8L8"
				],
				[
					56,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"additionalTextEdits\":[],\"textEdit\":{\"range\":{\"end\":{\"character\":12,\"line\":145},\"start\":{\"character\":9,\"line\":145}},\"newText\":\"Sized\"},\"kind\":8,\"label\":\"Sized\",\"sortText\":\"fffffffd\",\"deprecated\":false,\"documentation\":{\"kind\":\"markdown\",\"value\":\"Types with a constant size known at compile time.\\n\\nAll type parameters have an implicit bound of `Sized`. The special syntax\\n`?Sized` can be used to remove this bound if it's not appropriate.\\n\\n```rust\\nstruct Foo<T>(T);\\nstruct Bar<T: ?Sized>(T);\\n\\n// struct FooUse(Foo<[i32]>); // error: Sized is not implemented for [i32]\\nstruct BarUse(Bar<[i32]>); // OK\\n```\\n\\nThe one exception is the implicit `Self` type of a trait. A trait does not\\nhave an implicit `Sized` bound as this is incompatible with [trait object]s\\nwhere, by definition, the trait needs to work with all possible implementors,\\nand thus could be any size.\\n\\nAlthough Rust will let you bind `Sized` to a trait, you won't\\nbe able to use it to form a trait object later:\\n\\n```rust\\ntrait Foo { }\\ntrait Bar: Sized { }\\n\\nstruct Impl;\\nimpl Foo for Impl { }\\nimpl Bar for Impl { }\\n\\nlet x: &dyn Foo = &Impl;    // OK\\n// let y: &dyn Bar = &Impl; // error: the trait `Bar` cannot\\n                            // be made into an object\\n```\\n\\n[trait object]: ../../book/ch17-02-trait-objects.html\"},\"filterText\":\"Sized\"},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							41,
							55,
							4
						],
						"trigger": "Sized"
					},
					"AgAAAD8LAAAAAAAAPwsAAAAAAAADAAAAc2l6PwsAAAAAAABECwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCCwAAAAAAAEILAAAAAAAAAAAAAAAA8L8"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": " +"
					},
					"AgAAAEQLAAAAAAAARQsAAAAAAAAAAAAARQsAAAAAAABGCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABECwAAAAAAAEQLAAAAAAAAAAAAAAAA8L8"
				],
				[
					58,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAEYLAAAAAAAARwsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGCwAAAAAAAEYLAAAAAAAAAAAAAAAA8L8"
				],
				[
					59,
					3,
					"left_delete",
					null,
					"AwAAAEYLAAAAAAAARgsAAAAAAAABAAAAIEULAAAAAAAARQsAAAAAAAABAAAAK0QLAAAAAAAARAsAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABHCwAAAAAAAEcLAAAAAAAAAAAAAAAA8L8"
				],
				[
					64,
					1,
					"left_delete",
					null,
					"AQAAAEMLAAAAAAAAQwsAAAAAAAABAAAAZA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABECwAAAAAAAEQLAAAAAAAAAAAAAAAA8L8"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAEMLAAAAAAAARAsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDCwAAAAAAAEMLAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"left_delete",
					null,
					"AQAAAEMLAAAAAAAAQwsAAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABECwAAAAAAAEQLAAAAAAAAAAAAAAAA8L8"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAEMLAAAAAAAARAsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABDCwAAAAAAAEMLAAAAAAAAAAAAAAAA8L8"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": " +"
					},
					"AgAAAEQLAAAAAAAARQsAAAAAAAAAAAAARQsAAAAAAABGCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABECwAAAAAAAEQLAAAAAAAAAAAAAAAA8L8"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": " P"
					},
					"AgAAAEYLAAAAAAAARwsAAAAAAAAAAAAARwsAAAAAAABICwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABGCwAAAAAAAEYLAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": "ar"
					},
					"AgAAAEgLAAAAAAAASQsAAAAAAAAAAAAASQsAAAAAAABKCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABICwAAAAAAAEgLAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"left_delete",
					null,
					"AQAAAEkLAAAAAAAASQsAAAAAAAABAAAAcg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABKCwAAAAAAAEoLAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "r"
					},
					"AQAAAEkLAAAAAAAASgsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJCwAAAAAAAEkLAAAAAAAAAAAAAAAA8L8"
				],
				[
					73,
					1,
					"left_delete",
					null,
					"AQAAAEkLAAAAAAAASQsAAAAAAAABAAAAcg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABKCwAAAAAAAEoLAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"additionalTextEdits\":[],\"textEdit\":{\"range\":{\"end\":{\"character\":19,\"line\":145},\"start\":{\"character\":17,\"line\":145}},\"newText\":\"PartialEq\"},\"kind\":8,\"label\":\"PartialEq\",\"sortText\":\"fffffffd\",\"deprecated\":false,\"documentation\":{\"kind\":\"markdown\",\"value\":\"Trait for equality comparisons which are [partial equivalence\\nrelations](https://en.wikipedia.org/wiki/Partial_equivalence_relation).\\n\\n`x.eq(y)` can also be written `x == y`, and `x.ne(y)` can be written `x != y`.\\nWe use the easier-to-read infix notation in the remainder of this documentation.\\n\\nThis trait allows for partial equality, for types that do not have a full\\nequivalence relation. For example, in floating point numbers `NaN != NaN`,\\nso floating point types implement `PartialEq` but not [`trait@Eq`].\\n\\nImplementations must ensure that `eq` and `ne` are consistent with each other:\\n\\n- `a != b` if and only if `!(a == b)`\\n  (ensured by the default implementation).\\n\\nIf [`PartialOrd`] or [`Ord`] are also implemented for `Self` and `Rhs`, their methods must also\\nbe consistent with `PartialEq` (see the documentation of those traits for the exact\\nrequirements). It's easy to accidentally make them disagree by deriving some of the traits and\\nmanually implementing others.\\n\\nThe equality relation `==` must satisfy the following conditions\\n(for all `a`, `b`, `c` of type `A`, `B`, `C`):\\n\\n- **Symmetric**: if `A: PartialEq<B>` and `B: PartialEq<A>`, then **`a == b`\\n  implies `b == a`**; and\\n\\n- **Transitive**: if `A: PartialEq<B>` and `B: PartialEq<C>` and `A:\\n  PartialEq<C>`, then **`a == b` and `b == c` implies `a == c`**.\\n\\nNote that the `B: PartialEq<A>` (symmetric) and `A: PartialEq<C>`\\n(transitive) impls are not forced to exist, but these requirements apply\\nwhenever they do exist.\\n\\n## Derivable\\n\\nThis trait can be used with `#[derive]`. When `derive`d on structs, two\\ninstances are equal if all fields are equal, and not equal if any fields\\nare not equal. When `derive`d on enums, each variant is equal to itself\\nand not equal to the other variants.\\n\\n## How can I implement `PartialEq`?\\n\\nAn example implementation for a domain in which two books are considered\\nthe same book if their ISBN matches, even if the formats differ:\\n\\n```rust\\nenum BookFormat {\\n    Paperback,\\n    Hardback,\\n    Ebook,\\n}\\n\\nstruct Book {\\n    isbn: i32,\\n    format: BookFormat,\\n}\\n\\nimpl PartialEq for Book {\\n    fn eq(&self, other: &Self) -> bool {\\n        self.isbn == other.isbn\\n    }\\n}\\n\\nlet b1 = Book { isbn: 3, format: BookFormat::Paperback };\\nlet b2 = Book { isbn: 3, format: BookFormat::Ebook };\\nlet b3 = Book { isbn: 10, format: BookFormat::Paperback };\\n\\nassert!(b1 == b2);\\nassert!(b1 != b3);\\n```\\n\\n## How can I compare two different types?\\n\\nThe type you can compare with is controlled by `PartialEq`'s type parameter.\\nFor example, let's tweak our previous code a bit:\\n\\n```rust\\n// The derive implements <BookFormat> == <BookFormat> comparisons\\n#[derive(PartialEq)]\\nenum BookFormat {\\n    Paperback,\\n    Hardback,\\n    Ebook,\\n}\\n\\nstruct Book {\\n    isbn: i32,\\n    format: BookFormat,\\n}\\n\\n// Implement <Book> == <BookFormat> comparisons\\nimpl PartialEq<BookFormat> for Book {\\n    fn eq(&self, other: &BookFormat) -> bool {\\n        self.format == *other\\n    }\\n}\\n\\n// Implement <BookFormat> == <Book> comparisons\\nimpl PartialEq<Book> for BookFormat {\\n    fn eq(&self, other: &Book) -> bool {\\n        *self == other.format\\n    }\\n}\\n\\nlet b1 = Book { isbn: 3, format: BookFormat::Paperback };\\n\\nassert!(b1 == BookFormat::Paperback);\\nassert!(BookFormat::Ebook != b1);\\n```\\n\\nBy changing `impl PartialEq for Book` to `impl PartialEq<BookFormat> for Book`,\\nwe allow `BookFormat`s to be compared with `Book`s.\\n\\nA comparison like the one above, which ignores some fields of the struct,\\ncan be dangerous. It can easily lead to an unintended violation of the\\nrequirements for a partial equivalence relation. For example, if we kept\\nthe above implementation of `PartialEq<Book>` for `BookFormat` and added an\\nimplementation of `PartialEq<Book>` for `Book` (either via a `#[derive]` or\\nvia the manual implementation from the first example) then the result would\\nviolate transitivity:\\n\\n```rust\\n#[derive(PartialEq)]\\nenum BookFormat {\\n    Paperback,\\n    Hardback,\\n    Ebook,\\n}\\n\\n#[derive(PartialEq)]\\nstruct Book {\\n    isbn: i32,\\n    format: BookFormat,\\n}\\n\\nimpl PartialEq<BookFormat> for Book {\\n    fn eq(&self, other: &BookFormat) -> bool {\\n        self.format == *other\\n    }\\n}\\n\\nimpl PartialEq<Book> for BookFormat {\\n    fn eq(&self, other: &Book) -> bool {\\n        *self == other.format\\n    }\\n}\\n\\nfn main() {\\n    let b1 = Book { isbn: 1, format: BookFormat::Paperback };\\n    let b2 = Book { isbn: 2, format: BookFormat::Paperback };\\n\\n    assert!(b1 == BookFormat::Paperback);\\n    assert!(BookFormat::Paperback == b2);\\n\\n    // The following should hold by transitivity but doesn't.\\n    assert!(b1 == b2); // <-- PANICS\\n}\\n```\\n\\n# Examples\\n\\n```rust\\nlet x: u32 = 0;\\nlet y: u32 = 1;\\n\\nassert_eq!(x == y, false);\\nassert_eq!(x.eq(&y), false);\\n```\\n\\n[`eq`]: PartialEq::eq\\n[`ne`]: PartialEq::ne\"},\"filterText\":\"PartialEq\"},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							55,
							73,
							1
						],
						"trigger": "PartialEq"
					},
					"AgAAAEcLAAAAAAAARwsAAAAAAAACAAAAUGFHCwAAAAAAAFALAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJCwAAAAAAAEkLAAAAAAAAAAAAAAAA8L8"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFALAAAAAAAAUQsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQCwAAAAAAAFALAAAAAAAAAAAAAAAgdUA"
				],
				[
					91,
					2,
					"left_delete",
					null,
					"AgAAAAUMAAAAAAAABQwAAAAAAADPAAAACmltcGwgUGFydGlhbEVxIGZvciBJbnQ8aTY0PiB7CiAgICBmbiBlcSgmc2VsZiwgb3RoZXI6ICZTZWxmKSAtPiBib29sIHsKICAgICAgICBzZWxmLl9pbnRlZ2VyID09IG90aGVyLl9pbnRlZ2VyCiAgICB9CgogICAgZm4gbmUoJnNlbGYsIG90aGVyOiAmU2VsZikgLT4gYm9vbCB7CiAgICAgICAgc2VsZi5faW50ZWdlciAhPSBvdGhlci5faW50ZWdlcgogICAgfQp9BAwAAAAAAAAEDAAAAAAAAAEAAAAK",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAFDAAAAAAAANQMAAAAAAAAAAAAAAAA8L8"
				],
				[
					105,
					5,
					"delete_word",
					{
						"forward": false
					},
					"BQAAAAsKAAAAAAAACwoAAAAAAAAFAAAAdXNpemUICgAAAAAAAAgKAAAAAAAAAwAAAGFzIP8JAAAAAAAA/wkAAAAAAAAJAAAAX2ludGVnZXIg/gkAAAAAAAD+CQAAAAAAAAEAAAAu+gkAAAAAAAD6CQAAAAAAAAQAAABzZWxm",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAQCgAAAAAAABAKAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "unm"
					},
					"AwAAAPoJAAAAAAAA+wkAAAAAAAAAAAAA+wkAAAAAAAD8CQAAAAAAAAAAAAD8CQAAAAAAAP0JAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6CQAAAAAAAPoJAAAAAAAAAAAAAAAA8L8"
				],
				[
					115,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAPoJAAAAAAAA+gkAAAAAAAADAAAAdW5t",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD9CQAAAAAAAP0JAAAAAAAAAAAAAAAA8L8"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": "unimple"
					},
					"BwAAAPoJAAAAAAAA+wkAAAAAAAAAAAAA+wkAAAAAAAD8CQAAAAAAAAAAAAD8CQAAAAAAAP0JAAAAAAAAAAAAAP0JAAAAAAAA/gkAAAAAAAAAAAAA/gkAAAAAAAD/CQAAAAAAAAAAAAD/CQAAAAAAAAAKAAAAAAAAAAAAAAAKAAAAAAAAAQoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6CQAAAAAAAPoJAAAAAAAAAAAAAAAA8L8"
				],
				[
					117,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"additionalTextEdits\":[],\"textEdit\":{\"range\":{\"end\":{\"character\":15,\"line\":126},\"start\":{\"character\":8,\"line\":126}},\"newText\":\"unimplemented!($0)\"},\"kind\":3,\"filterText\":\"unimplemented!\",\"label\":\"unimplemented!(â€¦)\",\"documentation\":{\"kind\":\"markdown\",\"value\":\"Indicates unimplemented code by panicking with a message of \\\"not implemented\\\".\\n\\nThis allows your code to type-check, which is useful if you are prototyping or\\nimplementing a trait that requires multiple methods which you don't plan to use all of.\\n\\nThe difference between `unimplemented!` and [`todo!`] is that while `todo!`\\nconveys an intent of implementing the functionality later and the message is \\\"not yet\\nimplemented\\\", `unimplemented!` makes no such claims. Its message is \\\"not implemented\\\".\\nAlso some IDEs will mark `todo!`s.\\n\\n# Panics\\n\\nThis will always [`panic!`] because `unimplemented!` is just a shorthand for `panic!` with a\\nfixed, specific message.\\n\\nLike `panic!`, this macro has a second form for displaying custom values.\\n\\n# Examples\\n\\nSay we have a trait `Foo`:\\n\\n```rust\\ntrait Foo {\\n    fn bar(&self) -> u8;\\n    fn baz(&self);\\n    fn qux(&self) -> Result<u64, ()>;\\n}\\n```\\n\\nWe want to implement `Foo` for 'MyStruct', but for some reason it only makes sense\\nto implement the `bar()` function. `baz()` and `qux()` will still need to be defined\\nin our implementation of `Foo`, but we can use `unimplemented!` in their definitions\\nto allow our code to compile.\\n\\nWe still want to have our program stop running if the unimplemented methods are\\nreached.\\n\\n```rust\\nstruct MyStruct;\\n\\nimpl Foo for MyStruct {\\n    fn bar(&self) -> u8 {\\n        1 + 1\\n    }\\n\\n    fn baz(&self) {\\n        // It makes no sense to `baz` a `MyStruct`, so we have no logic here\\n        // at all.\\n        // This will display \\\"thread 'main' panicked at 'not implemented'\\\".\\n        unimplemented!();\\n    }\\n\\n    fn qux(&self) -> Result<u64, ()> {\\n        // We have some logic here,\\n        // We can add a message to unimplemented! to display our omission.\\n        // This will display:\\n        // \\\"thread 'main' panicked at 'not implemented: MyStruct isn't quxable'\\\".\\n        unimplemented!(\\\"MyStruct isn't quxable\\\");\\n    }\\n}\\n\\nfn main() {\\n    let s = MyStruct;\\n    s.bar();\\n}\\n```\"},\"deprecated\":false,\"insertTextFormat\":2,\"sortText\":\"fffffffd\",\"detail\":\"#[macro_export] macro_rules! unimplemented\"},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							70,
							116,
							7
						],
						"trigger": "unimplemented!"
					},
					"AgAAAPoJAAAAAAAA+gkAAAAAAAAHAAAAdW5pbXBsZfoJAAAAAAAACgoAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABCgAAAAAAAAEKAAAAAAAAAAAAAAAA8L8"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": "2"
					},
					"AQAAAM8JAAAAAAAA0AkAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPCQAAAAAAAM8JAAAAAAAAAAAAAAAA8L8"
				],
				[
					129,
					1,
					"left_delete",
					null,
					"AQAAAM8JAAAAAAAAzwkAAAAAAAABAAAAMg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADQCQAAAAAAANAJAAAAAAAAAAAAAAAA8L8"
				],
				[
					136,
					3,
					"right_delete",
					null,
					"AwAAAEgJAAAAAAAASAkAAAAAAAABAAAAPEgJAAAAAAAASAkAAAAAAAABAAAAVEgJAAAAAAAASAkAAAAAAAABAAAAPg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABICQAAAAAAAEgJAAAAAAAAAAAAAAAA8L8"
				],
				[
					138,
					3,
					"right_delete",
					null,
					"AwAAAFAJAAAAAAAAUAkAAAAAAAABAAAAPFAJAAAAAAAAUAkAAAAAAAABAAAAVFAJAAAAAAAAUAkAAAAAAAABAAAAPg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABQCQAAAAAAAFAJAAAAAAAAAAAAAAAA8L8"
				],
				[
					148,
					1,
					"insert",
					{
						"characters": "<T>"
					},
					"AwAAAEgJAAAAAAAASQkAAAAAAAAAAAAASQkAAAAAAABKCQAAAAAAAAAAAABKCQAAAAAAAEsJAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABICQAAAAAAAEgJAAAAAAAAAAAAAAAA8L8"
				],
				[
					213,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAwLAAAAAAAADQsAAAAAAAAAAAAADQsAAAAAAAAOCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAMCwAAAAAAAAwLAAAAAAAAAAAAAAAA8L8"
				],
				[
					214,
					1,
					"paste",
					null,
					"AQAAAA4LAAAAAAAAvAsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOCwAAAAAAAA4LAAAAAAAAAAAAAAAA8L8"
				],
				[
					219,
					1,
					"insert",
					{
						"characters": "De"
					},
					"AwAAABsLAAAAAAAAHAsAAAAAAAAAAAAAHAsAAAAAAAAcCwAAAAAAAAcAAABEaXNwbGF5HAsAAAAAAAAdCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAbCwAAAAAAACILAAAAAAAAAAAAAAAA8L8"
				],
				[
					220,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"additionalTextEdits\":[],\"textEdit\":{\"range\":{\"end\":{\"character\":15,\"line\":142},\"start\":{\"character\":13,\"line\":142}},\"newText\":\"Debug\"},\"kind\":8,\"label\":\"Debug\",\"sortText\":\"fffffffd\",\"deprecated\":false,\"documentation\":{\"kind\":\"markdown\",\"value\":\"`?` formatting.\\n\\n`Debug` should format the output in a programmer-facing, debugging context.\\n\\nGenerally speaking, you should just `derive` a `Debug` implementation.\\n\\nWhen used with the alternate format specifier `#?`, the output is pretty-printed.\\n\\nFor more information on formatters, see [the module-level documentation][module].\\n\\n[module]: ../../std/fmt/index.html\\n\\nThis trait can be used with `#[derive]` if all fields implement `Debug`. When\\n`derive`d for structs, it will use the name of the `struct`, then `{`, then a\\ncomma-separated list of each field's name and `Debug` value, then `}`. For\\n`enum`s, it will use the name of the variant and, if applicable, `(`, then the\\n`Debug` values of the fields, then `)`.\\n\\n# Stability\\n\\nDerived `Debug` formats are not stable, and so may change with future Rust\\nversions. Additionally, `Debug` implementations of types provided by the\\nstandard library (`libstd`, `libcore`, `liballoc`, etc.) are not stable, and\\nmay also change with future Rust versions.\\n\\n# Examples\\n\\nDeriving an implementation:\\n\\n```rust\\n#[derive(Debug)]\\nstruct Point {\\n    x: i32,\\n    y: i32,\\n}\\n\\nlet origin = Point { x: 0, y: 0 };\\n\\nassert_eq!(format!(\\\"The origin is: {:?}\\\", origin), \\\"The origin is: Point { x: 0, y: 0 }\\\");\\n```\\n\\nManually implementing:\\n\\n```rust\\nuse std::fmt;\\n\\nstruct Point {\\n    x: i32,\\n    y: i32,\\n}\\n\\nimpl fmt::Debug for Point {\\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\\n        f.debug_struct(\\\"Point\\\")\\n         .field(\\\"x\\\", &self.x)\\n         .field(\\\"y\\\", &self.y)\\n         .finish()\\n    }\\n}\\n\\nlet origin = Point { x: 0, y: 0 };\\n\\nassert_eq!(format!(\\\"The origin is: {:?}\\\", origin), \\\"The origin is: Point { x: 0, y: 0 }\\\");\\n```\\n\\nThere are a number of helper methods on the [`Formatter`] struct to help you with manual\\nimplementations, such as [`debug_struct`].\\n\\n[`debug_struct`]: Formatter::debug_struct\\n\\nTypes that do not wish to use the standard suite of debug representations\\nprovided by the `Formatter` trait (`debug_struct`, `debug_tuple`,\\n`debut_list`, `debug_set`, `debug_map`) can do something totally custom by\\nmanually writing an arbitrary representation to the `Formatter`.\\n\\n```rust\\nimpl fmt::Debug for Point {\\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\\n        write!(f, \\\"Point [{} {}]\\\", self.x, self.y)\\n    }\\n}\\n```\\n\\n`Debug` implementations using either `derive` or the debug builder API\\non [`Formatter`] support pretty-printing using the alternate flag: `{:#?}`.\\n\\nPretty-printing with `#?`:\\n\\n```rust\\n#[derive(Debug)]\\nstruct Point {\\n    x: i32,\\n    y: i32,\\n}\\n\\nlet origin = Point { x: 0, y: 0 };\\n\\nassert_eq!(format!(\\\"The origin is: {:#?}\\\", origin),\\n\\\"The origin is: Point {\\n    x: 0,\\n    y: 0,\\n}\\\");\\n```\"},\"filterText\":\"Debug\"},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							111,
							219,
							3
						],
						"trigger": "Debug"
					},
					"AgAAABsLAAAAAAAAGwsAAAAAAAACAAAARGUbCwAAAAAAACALAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAdCwAAAAAAAB0LAAAAAAAAAAAAAAAA8L8"
				],
				[
					256,
					1,
					"insert",
					{
						"characters": ":?"
					},
					"AgAAAJ8LAAAAAAAAoAsAAAAAAAAAAAAAoAsAAAAAAAChCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfCwAAAAAAAJ8LAAAAAAAAAAAAAAAA8L8"
				],
				[
					269,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAEILAAAAAAAAQgsAAAAAAAAHAAAARGlzcGxheQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJCwAAAAAAAEkLAAAAAAAAAAAAAAAA8L8"
				],
				[
					270,
					1,
					"insert",
					{
						"characters": "De"
					},
					"AgAAAEILAAAAAAAAQwsAAAAAAAAAAAAAQwsAAAAAAABECwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABCCwAAAAAAAEILAAAAAAAAAAAAAAAA8L8"
				],
				[
					271,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"additionalTextEdits\":[],\"textEdit\":{\"range\":{\"end\":{\"character\":24,\"line\":143},\"start\":{\"character\":22,\"line\":143}},\"newText\":\"Debug\"},\"kind\":8,\"label\":\"Debug\",\"sortText\":\"fffffffd\",\"deprecated\":false,\"documentation\":{\"kind\":\"markdown\",\"value\":\"`?` formatting.\\n\\n`Debug` should format the output in a programmer-facing, debugging context.\\n\\nGenerally speaking, you should just `derive` a `Debug` implementation.\\n\\nWhen used with the alternate format specifier `#?`, the output is pretty-printed.\\n\\nFor more information on formatters, see [the module-level documentation][module].\\n\\n[module]: ../../std/fmt/index.html\\n\\nThis trait can be used with `#[derive]` if all fields implement `Debug`. When\\n`derive`d for structs, it will use the name of the `struct`, then `{`, then a\\ncomma-separated list of each field's name and `Debug` value, then `}`. For\\n`enum`s, it will use the name of the variant and, if applicable, `(`, then the\\n`Debug` values of the fields, then `)`.\\n\\n# Stability\\n\\nDerived `Debug` formats are not stable, and so may change with future Rust\\nversions. Additionally, `Debug` implementations of types provided by the\\nstandard library (`libstd`, `libcore`, `liballoc`, etc.) are not stable, and\\nmay also change with future Rust versions.\\n\\n# Examples\\n\\nDeriving an implementation:\\n\\n```rust\\n#[derive(Debug)]\\nstruct Point {\\n    x: i32,\\n    y: i32,\\n}\\n\\nlet origin = Point { x: 0, y: 0 };\\n\\nassert_eq!(format!(\\\"The origin is: {:?}\\\", origin), \\\"The origin is: Point { x: 0, y: 0 }\\\");\\n```\\n\\nManually implementing:\\n\\n```rust\\nuse std::fmt;\\n\\nstruct Point {\\n    x: i32,\\n    y: i32,\\n}\\n\\nimpl fmt::Debug for Point {\\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\\n        f.debug_struct(\\\"Point\\\")\\n         .field(\\\"x\\\", &self.x)\\n         .field(\\\"y\\\", &self.y)\\n         .finish()\\n    }\\n}\\n\\nlet origin = Point { x: 0, y: 0 };\\n\\nassert_eq!(format!(\\\"The origin is: {:?}\\\", origin), \\\"The origin is: Point { x: 0, y: 0 }\\\");\\n```\\n\\nThere are a number of helper methods on the [`Formatter`] struct to help you with manual\\nimplementations, such as [`debug_struct`].\\n\\n[`debug_struct`]: Formatter::debug_struct\\n\\nTypes that do not wish to use the standard suite of debug representations\\nprovided by the `Formatter` trait (`debug_struct`, `debug_tuple`,\\n`debut_list`, `debug_set`, `debug_map`) can do something totally custom by\\nmanually writing an arbitrary representation to the `Formatter`.\\n\\n```rust\\nimpl fmt::Debug for Point {\\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\\n        write!(f, \\\"Point [{} {}]\\\", self.x, self.y)\\n    }\\n}\\n```\\n\\n`Debug` implementations using either `derive` or the debug builder API\\non [`Formatter`] support pretty-printing using the alternate flag: `{:#?}`.\\n\\nPretty-printing with `#?`:\\n\\n```rust\\n#[derive(Debug)]\\nstruct Point {\\n    x: i32,\\n    y: i32,\\n}\\n\\nlet origin = Point { x: 0, y: 0 };\\n\\nassert_eq!(format!(\\\"The origin is: {:#?}\\\", origin),\\n\\\"The origin is: Point {\\n    x: 0,\\n    y: 0,\\n}\\\");\\n```\"},\"filterText\":\"Debug\"},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							137,
							270,
							2
						],
						"trigger": "Debug"
					},
					"AgAAAEILAAAAAAAAQgsAAAAAAAACAAAARGVCCwAAAAAAAEcLAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABECwAAAAAAAEQLAAAAAAAAAAAAAAAA8L8"
				],
				[
					284,
					1,
					"insert",
					{
						"characters": "INT"
					},
					"AwAAAJwLAAAAAAAAnQsAAAAAAAAAAAAAnQsAAAAAAACeCwAAAAAAAAAAAACeCwAAAAAAAJ8LAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcCwAAAAAAAJwLAAAAAAAAAAAAAAAA8L8"
				],
				[
					285,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAJwLAAAAAAAAnAsAAAAAAAADAAAASU5U",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfCwAAAAAAAJ8LAAAAAAAAAAAAAAAA8L8"
				],
				[
					286,
					1,
					"insert",
					{
						"characters": "Int"
					},
					"AwAAAJwLAAAAAAAAnQsAAAAAAAAAAAAAnQsAAAAAAACeCwAAAAAAAAAAAACeCwAAAAAAAJ8LAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcCwAAAAAAAJwLAAAAAAAAAAAAAAAA8L8"
				],
				[
					287,
					1,
					"insert",
					{
						"characters": " {"
					},
					"AgAAAJ8LAAAAAAAAoAsAAAAAAAAAAAAAoAsAAAAAAAChCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfCwAAAAAAAJ8LAAAAAAAAAAAAAAAA8L8"
				],
				[
					290,
					1,
					"insert",
					{
						"characters": "{"
					},
					"AQAAAKELAAAAAAAAogsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChCwAAAAAAAKELAAAAAAAAAAAAAAAA8L8"
				],
				[
					291,
					1,
					"insert",
					{
						"characters": " _integer:"
					},
					"CgAAAKILAAAAAAAAowsAAAAAAAAAAAAAowsAAAAAAACkCwAAAAAAAAAAAACkCwAAAAAAAKULAAAAAAAAAAAAAKULAAAAAAAApgsAAAAAAAAAAAAApgsAAAAAAACnCwAAAAAAAAAAAACnCwAAAAAAAKgLAAAAAAAAAAAAAKgLAAAAAAAAqQsAAAAAAAAAAAAAqQsAAAAAAACqCwAAAAAAAAAAAACqCwAAAAAAAKsLAAAAAAAAAAAAAKsLAAAAAAAArAsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiCwAAAAAAAKILAAAAAAAAAAAAAAAA8L8"
				],
				[
					292,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKwLAAAAAAAArQsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsCwAAAAAAAKwLAAAAAAAAAAAAAAAA8L8"
				],
				[
					294,
					2,
					"right_delete",
					null,
					"AgAAAK4LAAAAAAAArgsAAAAAAAABAAAAOq4LAAAAAAAArgsAAAAAAAABAAAAPw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuCwAAAAAAAK4LAAAAAAAAAAAAAAAA8L8"
				],
				[
					296,
					1,
					"insert",
					{
						"characters": " }}"
					},
					"AwAAAK8LAAAAAAAAsAsAAAAAAAAAAAAAsAsAAAAAAACxCwAAAAAAAAAAAACxCwAAAAAAALILAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvCwAAAAAAAK8LAAAAAAAAAAAAAAAA8L8"
				],
				[
					304,
					1,
					"insert",
					{
						"characters": " +"
					},
					"AgAAAEcLAAAAAAAASAsAAAAAAAAAAAAASAsAAAAAAABJCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABHCwAAAAAAAEcLAAAAAAAAAAAAAAB4gUA"
				],
				[
					305,
					1,
					"insert",
					{
						"characters": " fmt::Di"
					},
					"CAAAAEkLAAAAAAAASgsAAAAAAAAAAAAASgsAAAAAAABLCwAAAAAAAAAAAABLCwAAAAAAAEwLAAAAAAAAAAAAAEwLAAAAAAAATQsAAAAAAAAAAAAATQsAAAAAAABOCwAAAAAAAAAAAABOCwAAAAAAAE8LAAAAAAAAAAAAAE8LAAAAAAAAUAsAAAAAAAAAAAAAUAsAAAAAAABRCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABJCwAAAAAAAEkLAAAAAAAAAAAAAAAA8L8"
				],
				[
					306,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"additionalTextEdits\":[],\"textEdit\":{\"range\":{\"end\":{\"character\":37,\"line\":143},\"start\":{\"character\":35,\"line\":143}},\"newText\":\"Display\"},\"kind\":8,\"label\":\"Display\",\"sortText\":\"fffffffd\",\"deprecated\":false,\"documentation\":{\"kind\":\"markdown\",\"value\":\"Format trait for an empty format, `{}`.\\n\\n`Display` is similar to [`Debug`], but `Display` is for user-facing\\noutput, and so cannot be derived.\\n\\nFor more information on formatters, see [the module-level documentation][module].\\n\\n[module]: ../../std/fmt/index.html\\n\\n# Examples\\n\\nImplementing `Display` on a type:\\n\\n```rust\\nuse std::fmt;\\n\\nstruct Point {\\n    x: i32,\\n    y: i32,\\n}\\n\\nimpl fmt::Display for Point {\\n    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\\n        write!(f, \\\"({}, {})\\\", self.x, self.y)\\n    }\\n}\\n\\nlet origin = Point { x: 0, y: 0 };\\n\\nassert_eq!(format!(\\\"The origin is: {}\\\", origin), \\\"The origin is: (0, 0)\\\");\\n```\"},\"filterText\":\"Display\"},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							161,
							305,
							8
						],
						"trigger": "Display"
					},
					"AgAAAE8LAAAAAAAATwsAAAAAAAACAAAARGlPCwAAAAAAAFYLAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABRCwAAAAAAAFELAAAAAAAAAAAAAAAA8L8"
				],
				[
					319,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BgAAAJcLAAAAAAAAmAsAAAAAAAAAAAAAmAsAAAAAAACcCwAAAAAAAAAAAACcCwAAAAAAAKALAAAAAAAAAAAAAKALAAAAAAAAoQsAAAAAAAAAAAAAoQsAAAAAAACiCwAAAAAAAAAAAACiCwAAAAAAAKMLAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACXCwAAAAAAAJcLAAAAAAAA////////738"
				],
				[
					320,
					1,
					"insert",
					{
						"characters": " type"
					},
					"BQAAAKMLAAAAAAAApAsAAAAAAAAAAAAApAsAAAAAAAClCwAAAAAAAAAAAAClCwAAAAAAAKYLAAAAAAAAAAAAAKYLAAAAAAAApwsAAAAAAAAAAAAApwsAAAAAAACoCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjCwAAAAAAAKMLAAAAAAAAAAAAAAAA8L8"
				],
				[
					321,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAKQLAAAAAAAApAsAAAAAAAAEAAAAdHlwZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoCwAAAAAAAKgLAAAAAAAAAAAAAAAA8L8"
				],
				[
					322,
					1,
					"insert",
					{
						"characters": "_typte"
					},
					"BgAAAKQLAAAAAAAApQsAAAAAAAAAAAAApQsAAAAAAACmCwAAAAAAAAAAAACmCwAAAAAAAKcLAAAAAAAAAAAAAKcLAAAAAAAAqAsAAAAAAAAAAAAAqAsAAAAAAACpCwAAAAAAAAAAAACpCwAAAAAAAKoLAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkCwAAAAAAAKQLAAAAAAAAAAAAAAAA8L8"
				],
				[
					323,
					3,
					"left_delete",
					null,
					"AwAAAKkLAAAAAAAAqQsAAAAAAAABAAAAZagLAAAAAAAAqAsAAAAAAAABAAAAdKcLAAAAAAAApwsAAAAAAAABAAAAcA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACqCwAAAAAAAKoLAAAAAAAAAAAAAAAA8L8"
				],
				[
					324,
					1,
					"insert",
					{
						"characters": "pe"
					},
					"AgAAAKcLAAAAAAAAqAsAAAAAAAAAAAAAqAsAAAAAAACpCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACnCwAAAAAAAKcLAAAAAAAAAAAAAAAA8L8"
				],
				[
					325,
					1,
					"insert",
					{
						"characters": " =t"
					},
					"AwAAAKkLAAAAAAAAqgsAAAAAAAAAAAAAqgsAAAAAAACrCwAAAAAAAAAAAACrCwAAAAAAAKwLAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpCwAAAAAAAKkLAAAAAAAAAAAAAAAA8L8"
				],
				[
					326,
					1,
					"left_delete",
					null,
					"AQAAAKsLAAAAAAAAqwsAAAAAAAABAAAAdA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsCwAAAAAAAKwLAAAAAAAAAAAAAAAA8L8"
				],
				[
					327,
					1,
					"insert",
					{
						"characters": " tpye"
					},
					"BQAAAKsLAAAAAAAArAsAAAAAAAAAAAAArAsAAAAAAACtCwAAAAAAAAAAAACtCwAAAAAAAK4LAAAAAAAAAAAAAK4LAAAAAAAArwsAAAAAAAAAAAAArwsAAAAAAACwCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACrCwAAAAAAAKsLAAAAAAAAAAAAAAAA8L8"
				],
				[
					328,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAKwLAAAAAAAArAsAAAAAAAAEAAAAdHB5ZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwCwAAAAAAALALAAAAAAAAAAAAAAAA8L8"
				],
				[
					329,
					1,
					"insert",
					{
						"characters": "type_of"
					},
					"BwAAAKwLAAAAAAAArQsAAAAAAAAAAAAArQsAAAAAAACuCwAAAAAAAAAAAACuCwAAAAAAAK8LAAAAAAAAAAAAAK8LAAAAAAAAsAsAAAAAAAAAAAAAsAsAAAAAAACxCwAAAAAAAAAAAACxCwAAAAAAALILAAAAAAAAAAAAALILAAAAAAAAswsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsCwAAAAAAAKwLAAAAAAAAAAAAAAAA8L8"
				],
				[
					333,
					1,
					"duplicate_line",
					null,
					"AQAAACQAAAAAAAAAOAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAjAAAAAAAAACMAAAAAAAAA////////738"
				],
				[
					335,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAC8AAAAAAAAALwAAAAAAAAAHAAAAX09iamVjdA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2AAAAAAAAADYAAAAAAAAAAAAAAAAA8L8"
				],
				[
					336,
					1,
					"insert",
					{
						"characters": "type"
					},
					"BAAAAC8AAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAAxAAAAAAAAAAAAAAAxAAAAAAAAADIAAAAAAAAAAAAAADIAAAAAAAAAMwAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAvAAAAAAAAAC8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					338,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"additionalTextEdits\":[],\"textEdit\":{\"range\":{\"end\":{\"character\":15,\"line\":4},\"start\":{\"character\":11,\"line\":4}},\"newText\":\"type_of\"},\"kind\":3,\"filterText\":\"type_of\",\"label\":\"type_of\",\"documentation\":{\"kind\":\"markdown\",\"value\":\"get the type of an object\"},\"deprecated\":false,\"sortText\":\"fffffffd\",\"detail\":\"fn(&T) -> &str\"},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							184,
							336,
							4
						],
						"trigger": "type_of"
					},
					"AgAAAC8AAAAAAAAALwAAAAAAAAAEAAAAdHlwZS8AAAAAAAAANgAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzAAAAAAAAADMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					342,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMcLAAAAAAAAyQsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADHCwAAAAAAAMcLAAAAAAAAAAAAAAAA8L8"
				],
				[
					343,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAMgLAAAAAAAAyQsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADICwAAAAAAAMgLAAAAAAAAAAAAAAAA8L8"
				],
				[
					344,
					1,
					"left_delete",
					null,
					"AQAAAMgLAAAAAAAAyAsAAAAAAAABAAAAZg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADJCwAAAAAAAMkLAAAAAAAAAAAAAAAA8L8"
				],
				[
					345,
					1,
					"insert",
					{
						"characters": "self_"
					},
					"BQAAAMgLAAAAAAAAyQsAAAAAAAAAAAAAyQsAAAAAAADKCwAAAAAAAAAAAADKCwAAAAAAAMsLAAAAAAAAAAAAAMsLAAAAAAAAzAsAAAAAAAAAAAAAzAsAAAAAAADNCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADICwAAAAAAAMgLAAAAAAAAAAAAAAAA8L8"
				],
				[
					346,
					1,
					"left_delete",
					null,
					"AQAAAMwLAAAAAAAAzAsAAAAAAAABAAAAXw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNCwAAAAAAAM0LAAAAAAAAAAAAAAAA8L8"
				],
				[
					347,
					1,
					"insert",
					{
						"characters": "._inte"
					},
					"BgAAAMwLAAAAAAAAzQsAAAAAAAAAAAAAzQsAAAAAAADOCwAAAAAAAAAAAADOCwAAAAAAAM8LAAAAAAAAAAAAAM8LAAAAAAAA0AsAAAAAAAAAAAAA0AsAAAAAAADRCwAAAAAAAAAAAADRCwAAAAAAANILAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADMCwAAAAAAAMwLAAAAAAAAAAAAAAAA8L8"
				],
				[
					348,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"additionalTextEdits\":[],\"textEdit\":{\"range\":{\"end\":{\"character\":38,\"line\":147},\"start\":{\"character\":33,\"line\":147}},\"newText\":\"_integer\"},\"kind\":5,\"label\":\"_integer\",\"sortText\":\"fffffffd\",\"deprecated\":false,\"filterText\":\"_integer\",\"detail\":\"T\"},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							193,
							347,
							6
						],
						"trigger": "_integer"
					},
					"AgAAAM0LAAAAAAAAzQsAAAAAAAAFAAAAX2ludGXNCwAAAAAAANULAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSCwAAAAAAANILAAAAAAAAAAAAAAAA8L8"
				],
				[
					350,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANYLAAAAAAAA1wsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWCwAAAAAAANYLAAAAAAAAAAAAAAAA8L8"
				],
				[
					358,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAMgLAAAAAAAAyQsAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADICwAAAAAAAMgLAAAAAAAAAAAAAAAA8L8"
				],
				[
					372,
					1,
					"insert",
					{
						"characters": "<>"
					},
					"AgAAAO8LAAAAAAAA8AsAAAAAAAAAAAAA8AsAAAAAAADxCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvCwAAAAAAAO8LAAAAAAAAAAAAAAAA8L8"
				],
				[
					374,
					1,
					"insert",
					{
						"characters": "{}"
					},
					"AgAAAPALAAAAAAAA8QsAAAAAAAAAAAAA8QsAAAAAAADyCwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwCwAAAAAAAPALAAAAAAAAAAAAAAAA8L8"
				],
				[
					377,
					1,
					"insert",
					{
						"characters": "s"
					},
					"AQAAAAkMAAAAAAAACgwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJDAAAAAAAAAkMAAAAAAAAAAAAAAAA8L8"
				],
				[
					378,
					1,
					"left_delete",
					null,
					"AQAAAAkMAAAAAAAACQwAAAAAAAABAAAAcw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAKDAAAAAAAAAoMAAAAAAAAAAAAAAAA8L8"
				],
				[
					379,
					1,
					"insert",
					{
						"characters": "_type,"
					},
					"BgAAAAkMAAAAAAAACgwAAAAAAAAAAAAACgwAAAAAAAALDAAAAAAAAAAAAAALDAAAAAAAAAwMAAAAAAAAAAAAAAwMAAAAAAAADQwAAAAAAAAAAAAADQwAAAAAAAAODAAAAAAAAAAAAAAODAAAAAAAAA8MAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJDAAAAAAAAAkMAAAAAAAAAAAAAAAA8L8"
				],
				[
					380,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAA8MAAAAAAAAEAwAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPDAAAAAAAAA8MAAAAAAAAAAAAAAAA8L8"
				],
				[
					403,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAAAXDQAACgp1c2Ugc3RkOjpmbXQ7CnVzZSBjcmF0ZTo6X09iamVjdDsKdXNlIGNyYXRlOjp0eXBlX29mOwoKLy8vIEludCBzdHJ1Y3QsIGhvbGRzIGFuZCBfaW50ZWdlcjogaTMyCiNbZGVyaXZlKENvcHkpXQojW2Rlcml2ZShDbG9uZSldCiNbZGVyaXZlKERlZmF1bHQpXQpwdWIgc3RydWN0IEludDxUOiBTaXplZD4gewogICAgX2ludGVnZXI6IFQsCn0KCgppbXBsPFQ+IEludDxUPiB3aGVyZSBUOiBTaXplZAp7CiAgICAvLy8gY3JlYXRlIGEgbmV3IEludCBvYmplY3QKICAgIC8vLwogICAgLy8vIGxldCBpbnRlZ2VyID0gSW50OjpuZXcoMTIzKQogICAgcHViIGZuIG5ldyhfaW50ZWdlcjogVCkgLT4gU2VsZiB7CiAgICAgICAgSW50IHsKICAgICAgICAgICAgX2ludGVnZXIsCiAgICAgICAgfQogICAgfQp9CgovLy8gdGhpcyBtdXN0IGJlIGNhbGxlZCBsaWtlIHRoaXMKLy8vICBPYmplY3Q6OkludDMyKEludDo6PGkzMj46Om5ldygxMjMpKQovLy8gYW5kIGl0cyB2ZXJ5IHVnbHkKLy8gaW1wbCBJbnQ8aTMyPiB7Ci8vICAgICAvLy8gY3JlYXRlIGEgbmV3IEludCBvYmplY3QKLy8gICAgIC8vLwovLyAgICAgLy8vIGxldCBpbnRlZ2VyID0gSW50OjpuZXcoMTIzKQovLyAgICAgcHViIGZuIG5ldyhfaW50ZWdlcjogaTMyKSAtPiBTZWxmIHsKLy8gICAgICAgICBJbnQgewovLyAgICAgICAgICAgICBfaW50ZWdlciwKLy8gICAgICAgICB9Ci8vICAgICB9Ci8vIH0KCi8vLyB0aGlzIG11c3QgYmUgY2FsbGVkIGxpa2UgdGhpcwovLy8gIE9iamVjdDo6SW50NjQoSW50Ojo8aTY0Pjo6bmV3KDEyMykpCi8vLyBhbmQgaXRzIHZlcnkgdWdseQovLyBpbXBsIEludDxpNjQ+IHsKLy8gICAgIC8vLyBjcmVhdGUgYSBuZXcgSW50IG9iamVjdAovLyAgICAgLy8vCi8vICAgICAvLy8gbGV0IGludGVnZXIgPSBJbnQ6Om5ldygxMjMpCi8vICAgICBwdWIgZm4gbmV3KF9pbnRlZ2VyOiBpNjQpIC0+IFNlbGYgewovLyAgICAgICAgIEludCB7Ci8vICAgICAgICAgICAgIF9pbnRlZ2VyLAovLyAgICAgICAgIH0KLy8gICAgIH0KLy8gfQoKCgppbXBsIEZyb208JnN0cj4gZm9yIEludDxpMzI+IHsKICAgIC8vLyBjcmVhdGUgbmV3IEludCBvYmplY3QgZnJvbSBzdGF0aWMgc3RyCiAgICAvLy8gdXNhZ2UKICAgIC8vLyBsZXQgaW50ZWdlciA9IEludDo6ZnJvbV9zdHIoIjEyMyIpCiAgICBmbiBmcm9tKF9zdGF0aWNfc3RyaW5nOiAmc3RyKSAtPiBTZWxmIHsKICAgICAgICBsZXQgbXV0IF9pbnRlZ2VyOiBpMzIgPSAwOwogICAgICAgIGZvciBfY2hhciBpbiBfc3RhdGljX3N0cmluZy5jaGFycygpIHsKICAgICAgICAgICAgX2ludGVnZXIgPQogICAgICAgICAgICAgICAgX2ludGVnZXIgKiAxMCArIF9jaGFyLnRvX2RpZ2l0KDEwKS51bndyYXAoKSBhcyBpMzI7CiAgICAgICAgfQogICAgICAgIEludCB7CiAgICAgICAgICAgIF9pbnRlZ2VyLAogICAgICAgIH0KICAgIH0KfQoKaW1wbCBGcm9tPCZzdHI+IGZvciBJbnQ8aTY0PiB7CiAgICAvLy8gY3JlYXRlIG5ldyBJbnQgb2JqZWN0IGZyb20gc3RhdGljIHN0cgogICAgLy8vIHVzYWdlCiAgICAvLy8gbGV0IGludGVnZXIgPSBJbnQ6OmZyb21fc3RyKCIxMjMiKQogICAgZm4gZnJvbShfc3RhdGljX3N0cmluZzogJnN0cikgLT4gU2VsZiB7CiAgICAgICAgbGV0IG11dCBfaW50ZWdlcjogaTY0ID0gMDsKICAgICAgICBmb3IgX2NoYXIgaW4gX3N0YXRpY19zdHJpbmcuY2hhcnMoKSB7CiAgICAgICAgICAgIF9pbnRlZ2VyID0KICAgICAgICAgICAgICAgIF9pbnRlZ2VyICogMTAgKyBfY2hhci50b19kaWdpdCgxMCkudW53cmFwKCkgYXMgaTY0OwogICAgICAgIH0KICAgICAgICBJbnQgewogICAgICAgICAgICBfaW50ZWdlciwKICAgICAgICB9CiAgICB9Cn0KCi8vIGltcGwgRnJvbTxpMzI+IGZvciBJbnQ8aTMyPiB7Ci8vICAgICBmbiBmcm9tKF9pbnRlZ2VyOiBpMzIpIC0+IFNlbGYgewovLyAgICAgICAgIEludCB7Ci8vICAgICAgICAgICAgIF9pbnRlZ2VyCi8vICAgICAgICAgfQovLyAgICAgfQovLyB9CgovLyBpbXBsIEZyb208aTY0PiBmb3IgSW50PGk2ND4gewovLyAgICAgZm4gZnJvbShfaW50ZWdlcjogaTY0KSAtPiBTZWxmIHsKLy8gICAgICAgICBJbnQgewovLyAgICAgICAgICAgICBfaW50ZWdlcgovLyAgICAgICAgIH0KLy8gICAgIH0KLy8gfQoKaW1wbDxUPiBGcm9tPFQ+IGZvciBJbnQ8VD4Kd2hlcmUgVDogU2l6ZWQKewogICAgLy8vIHRoaXMgY2FuIGJlIGFueSBvZgogICAgLy8vIGk4LCBpMTYsIGkzMiwgaTY0LCBpMTI4LCBpMjU2CiAgICAvLy8gdTgsIHUxNiwgdTMyLCB1NjQsIHUxMjgsIHUyNTYKICAgIC8vLyB1c2l6ZQogICAgZm4gZnJvbShfaW50ZWdlcjogVCkgLT4gU2VsZiB7CiAgICAgICAgSW50IHsKICAgICAgICAgICAgX2ludGVnZXIKICAgICAgICB9CiAgICB9Cn0KCmltcGw8VD4gX09iamVjdCBmb3IgSW50PFQ+CndoZXJlIFQ6IFNpemVkICsgZm10OjpEaXNwbGF5CnsKICAgIGZuIF9fcmVwcl9fKCZzZWxmKSAtPiBTdHJpbmcgewogICAgICAgIGZvcm1hdCEoInt9Iiwgc2VsZi5faW50ZWdlcikKICAgIH0KCiAgICBmbiBfX2xlbl9fKCZzZWxmKSAtPiB1c2l6ZSB7CiAgICAgICAgdW5pbXBsZW1lbnRlZCEoKQogICAgfQoKICAgIGZuIF9fc3RyX18oJnNlbGYpIC0+IFN0cmluZyB7CiAgICAgICAgZm9ybWF0ISgie30iLCBzZWxmLl9pbnRlZ2VyKQogICAgfQp9CgppbXBsPFQ+IGZtdDo6RGlzcGxheSBmb3IgSW50PFQ+CndoZXJlIFQ6IFNpemVkICsgZm10OjpEaXNwbGF5CnsKICAgIGZuIGZtdCgmc2VsZiwgZjogJm11dCBmbXQ6OkZvcm1hdHRlcjwnXz4pIC0+IGZtdDo6UmVzdWx0IHsKICAgICAgICB3cml0ZSEoZiwgInt9Iiwgc2VsZi5faW50ZWdlcikKICAgIH0KfQoKaW1wbDxUPiBmbXQ6OkRlYnVnIGZvciBJbnQ8VD4Kd2hlcmUgVDogU2l6ZWQgKyBmbXQ6OkRlYnVnICsgZm10OjpEaXNwbGF5CnsKICAgIGZuIGZtdCgmc2VsZiwgZjogJm11dCBmbXQ6OkZvcm1hdHRlcjwnXz4pIC0+IGZtdDo6UmVzdWx0IHsKICAgICAgICBsZXQgX3R5cGUgPSB0eXBlX29mKCZzZWxmLl9pbnRlZ2VyKTsKICAgICAgICB3cml0ZSEoZiwgIkludDx7fT4ge3sgX2ludGVnZXI6IHt9IH19IiwgX3R5cGUsIHNlbGYuX2ludGVnZXIpCiAgICB9Cn0KCgoKCmltcGw8VD4gUGFydGlhbEVxIGZvciBJbnQ8VD4Kd2hlcmUgVDogU2l6ZWQgKyBQYXJ0aWFsRXEKewogICAgZm4gZXEoJnNlbGYsIG90aGVyOiAmU2VsZikgLT4gYm9vbCB7CiAgICAgICAgc2VsZi5faW50ZWdlciA9PSBvdGhlci5faW50ZWdlcgogICAgfQoKICAgIGZuIG5lKCZzZWxmLCBvdGhlcjogJlNlbGYpIC0+IGJvb2wgewogICAgICAgIHNlbGYuX2ludGVnZXIgIT0gb3RoZXIuX2ludGVnZXIKICAgIH0KfQoKAAAAAAAAAAAXDQAAAAAAAAAAAAAAAAAAAAAAABcNAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/CwAAAAAAAD8LAAAAAAAAAAAAAACQd0A"
				],
				[
					52,
					4,
					"swap_line_down",
					null,
					"CAAAAHEAAAAAAAAAmQAAAAAAAAAAAAAAOQAAAAAAAAA5AAAAAAAAACgAAAAvLy8gSW50IHN0cnVjdCwgaG9sZHMgYW5kIF9pbnRlZ2VyOiBpMzIKggAAAAAAAACqAAAAAAAAAAAAAABJAAAAAAAAAEkAAAAAAAAAKAAAAC8vLyBJbnQgc3RydWN0LCBob2xkcyBhbmQgX2ludGVnZXI6IGkzMgqVAAAAAAAAAL0AAAAAAAAAAAAAAFoAAAAAAAAAWgAAAAAAAAAoAAAALy8vIEludCBzdHJ1Y3QsIGhvbGRzIGFuZCBfaW50ZWdlcjogaTMyCrAAAAAAAAAA2AAAAAAAAAAAAAAAbQAAAAAAAABtAAAAAAAAACgAAAAvLy8gSW50IHN0cnVjdCwgaG9sZHMgYW5kIF9pbnRlZ2VyOiBpMzIK",
					"AQAAAAAAAAABAAAAYAAAAAAAAABgAAAAAAAAAAAAAAAAAPC/"
				],
				[
					53,
					1,
					"swap_line_up",
					null,
					"AgAAAIgAAAAAAAAAiAAAAAAAAAAoAAAALy8vIEludCBzdHJ1Y3QsIGhvbGRzIGFuZCBfaW50ZWdlcjogaTMyCm0AAAAAAAAAlQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArwAAAAAAAACvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					587,
					1,
					"left_delete",
					null,
					"AQAAAEEHAAAAAAAAQQcAAAAAAAAbAQAACi8vIGltcGwgRnJvbTxpMzI+IGZvciBJbnQ8aTMyPiB7Ci8vICAgICBmbiBmcm9tKF9pbnRlZ2VyOiBpMzIpIC0+IFNlbGYgewovLyAgICAgICAgIEludCB7Ci8vICAgICAgICAgICAgIF9pbnRlZ2VyCi8vICAgICAgICAgfQovLyAgICAgfQovLyB9CgovLyBpbXBsIEZyb208aTY0PiBmb3IgSW50PGk2ND4gewovLyAgICAgZm4gZnJvbShfaW50ZWdlcjogaTY0KSAtPiBTZWxmIHsKLy8gICAgICAgICBJbnQgewovLyAgICAgICAgICAgICBfaW50ZWdlcgovLyAgICAgICAgIH0KLy8gICAgIH0KLy8gfQ",
					"AQAAAAAAAAABAAAAXAgAAAAAAABBBwAAAAAAAAAAAAAAAPC/"
				],
				[
					623,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAFcJAAAAAAAAWAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAVwkAAAAAAABXCQAAAAAAAAAAAAAAAPC/"
				],
				[
					625,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAcKAAAAAAAACAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwoAAAAAAAAHCgAAAAAAAAAAAAAAAPC/"
				],
				[
					638,
					1,
					"insert",
					{
						"characters": "\n///"
					},
					"BAAAAAgKAAAAAAAACQoAAAAAAAAAAAAACQoAAAAAAAAKCgAAAAAAAAAAAAAKCgAAAAAAAAsKAAAAAAAAAAAAAAsKAAAAAAAADAoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACAoAAAAAAAAICgAAAAAAAAAAAAAAAPC/"
				],
				[
					639,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAwKAAAAAAAADQoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADAoAAAAAAAAMCgAAAAAAAAAAAAAAAPC/"
				],
				[
					640,
					1,
					"insert",
					{
						"characters": "Debug"
					},
					"BQAAAA0KAAAAAAAADgoAAAAAAAAAAAAADgoAAAAAAAAPCgAAAAAAAAAAAAAPCgAAAAAAABAKAAAAAAAAAAAAABAKAAAAAAAAEQoAAAAAAAAAAAAAEQoAAAAAAAASCgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQoAAAAAAAANCgAAAAAAAAAAAAAAAPC/"
				],
				[
					643,
					1,
					"insert",
					{
						"characters": " print"
					},
					"BgAAABIKAAAAAAAAEwoAAAAAAAAAAAAAEwoAAAAAAAAUCgAAAAAAAAAAAAAUCgAAAAAAABUKAAAAAAAAAAAAABUKAAAAAAAAFgoAAAAAAAAAAAAAFgoAAAAAAAAXCgAAAAAAAAAAAAAXCgAAAAAAABgKAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEgoAAAAAAAASCgAAAAAAAAAAAAAAQF1A"
				],
				[
					647,
					1,
					"right_delete",
					null,
					"AQAAAA0KAAAAAAAADQoAAAAAAAABAAAARA",
					"AQAAAAAAAAABAAAADQoAAAAAAAANCgAAAAAAAAAAAAAAAPC/"
				],
				[
					648,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAA0KAAAAAAAADgoAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADQoAAAAAAAANCgAAAAAAAAAAAAAAAPC/"
				],
				[
					650,
					1,
					"insert",
					{
						"characters": "///"
					},
					"AwAAACELAAAAAAAAIgsAAAAAAAAAAAAAIgsAAAAAAAAjCwAAAAAAAAAAAAAjCwAAAAAAACQLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQsAAAAAAAAhCwAAAAAAAAAAAAAAQFBA"
				],
				[
					651,
					1,
					"insert",
					{
						"characters": " print"
					},
					"BgAAACQLAAAAAAAAJQsAAAAAAAAAAAAAJQsAAAAAAAAmCwAAAAAAAAAAAAAmCwAAAAAAACcLAAAAAAAAAAAAACcLAAAAAAAAKAsAAAAAAAAAAAAAKAsAAAAAAAApCwAAAAAAAAAAAAApCwAAAAAAACoLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAsAAAAAAAAkCwAAAAAAAAAAAAAAAPC/"
				],
				[
					652,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAACULAAAAAAAAJQsAAAAAAAAFAAAAcHJpbnQ",
					"AQAAAAAAAAABAAAAKgsAAAAAAAAqCwAAAAAAAAAAAAAAAPC/"
				],
				[
					653,
					1,
					"insert",
					{
						"characters": "print"
					},
					"BQAAACULAAAAAAAAJgsAAAAAAAAAAAAAJgsAAAAAAAAnCwAAAAAAAAAAAAAnCwAAAAAAACgLAAAAAAAAAAAAACgLAAAAAAAAKQsAAAAAAAAAAAAAKQsAAAAAAAAqCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJQsAAAAAAAAlCwAAAAAAAAAAAAAAAPC/"
				],
				[
					663,
					29,
					"swap_line_up",
					null,
					"OgAAACELAAAAAAAAIQsAAAAAAAAKAAAALy8vIHByaW50CiALAAAAAAAAKgsAAAAAAAAAAAAAIAsAAAAAAAAgCwAAAAAAAAoAAAAvLy8gcHJpbnQKHwsAAAAAAAApCwAAAAAAAAAAAAAfCwAAAAAAAB8LAAAAAAAACgAAAC8vLyBwcmludAoeCwAAAAAAACgLAAAAAAAAAAAAAB4LAAAAAAAAHgsAAAAAAAAKAAAALy8vIHByaW50ChwLAAAAAAAAJgsAAAAAAAAAAAAAHAsAAAAAAAAcCwAAAAAAAAoAAAAvLy8gcHJpbnQKFgsAAAAAAAAgCwAAAAAAAAAAAAAWCwAAAAAAABYLAAAAAAAACgAAAC8vLyBwcmludArQCgAAAAAAANoKAAAAAAAAAAAAANAKAAAAAAAA0AoAAAAAAAAKAAAALy8vIHByaW50CqMKAAAAAAAArQoAAAAAAAAAAAAAowoAAAAAAACjCgAAAAAAAAoAAAAvLy8gcHJpbnQKZAoAAAAAAABuCgAAAAAAAAAAAABkCgAAAAAAAGQKAAAAAAAACgAAAC8vLyBwcmludApiCgAAAAAAAGwKAAAAAAAAAAAAAGIKAAAAAAAAYgoAAAAAAAAKAAAALy8vIHByaW50CjcKAAAAAAAAQQoAAAAAAAAAAAAANwoAAAAAAAA3CgAAAAAAAAoAAAAvLy8gcHJpbnQKGQoAAAAAAAAjCgAAAAAAAAAAAAAZCgAAAAAAABkKAAAAAAAACgAAAC8vLyBwcmludAoJCgAAAAAAABMKAAAAAAAAAAAAAAkKAAAAAAAACQoAAAAAAAAKAAAALy8vIHByaW50CggKAAAAAAAAEgoAAAAAAAAAAAAACAoAAAAAAAAICgAAAAAAAAoAAAAvLy8gcHJpbnQKBwoAAAAAAAARCgAAAAAAAAAAAAAHCgAAAAAAAAcKAAAAAAAACgAAAC8vLyBwcmludAoFCgAAAAAAAA8KAAAAAAAAAAAAAAUKAAAAAAAABQoAAAAAAAAKAAAALy8vIHByaW50Cv8JAAAAAAAACQoAAAAAAAAAAAAA/wkAAAAAAAD/CQAAAAAAAAoAAAAvLy8gcHJpbnQK2AkAAAAAAADiCQAAAAAAAAAAAADYCQAAAAAAANgJAAAAAAAACgAAAC8vLyBwcmludAqZCQAAAAAAAKMJAAAAAAAAAAAAAJkJAAAAAAAAmQkAAAAAAAAKAAAALy8vIHByaW50CpcJAAAAAAAAoQkAAAAAAAAAAAAAlwkAAAAAAACXCQAAAAAAAAoAAAAvLy8gcHJpbnQKeQkAAAAAAACDCQAAAAAAAAAAAAB5CQAAAAAAAHkJAAAAAAAACgAAAC8vLyBwcmludApZCQAAAAAAAGMJAAAAAAAAAAAAAFkJAAAAAAAAWQkAAAAAAAAKAAAALy8vIHByaW50ClgJAAAAAAAAYgkAAAAAAAAAAAAAWAkAAAAAAABYCQAAAAAAAAoAAAAvLy8gcHJpbnQKVwkAAAAAAABhCQAAAAAAAAAAAABXCQAAAAAAAFcJAAAAAAAACgAAAC8vLyBwcmludApVCQAAAAAAAF8JAAAAAAAAAAAAAFUJAAAAAAAAVQkAAAAAAAAKAAAALy8vIHByaW50Ck8JAAAAAAAAWQkAAAAAAAAAAAAATwkAAAAAAABPCQAAAAAAAAoAAAAvLy8gcHJpbnQKKgkAAAAAAAA0CQAAAAAAAAAAAAAqCQAAAAAAACoJAAAAAAAACgAAAC8vLyBwcmludAoICQAAAAAAABIJAAAAAAAAAAAAAAgJAAAAAAAACAkAAAAAAAAKAAAALy8vIHByaW50CgcJAAAAAAAAEQkAAAAAAAAAAAAABwkAAAAAAAAHCQAAAAAAAAoAAAAvLy8gcHJpbnQKAQkAAAAAAAALCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgsAAAAAAAAqCwAAAAAAAAAAAAAAAPC/"
				],
				[
					664,
					8,
					"swap_line_down",
					null,
					"EAAAABEJAAAAAAAAGwkAAAAAAAAAAAAAAQkAAAAAAAABCQAAAAAAAAoAAAAvLy8gcHJpbnQKEgkAAAAAAAAcCQAAAAAAAAAAAAAHCQAAAAAAAAcJAAAAAAAACgAAAC8vLyBwcmludAo0CQAAAAAAAD4JAAAAAAAAAAAAAAgJAAAAAAAACAkAAAAAAAAKAAAALy8vIHByaW50ClkJAAAAAAAAYwkAAAAAAAAAAAAAKgkAAAAAAAAqCQAAAAAAAAoAAAAvLy8gcHJpbnQKXwkAAAAAAABpCQAAAAAAAAAAAABPCQAAAAAAAE8JAAAAAAAACgAAAC8vLyBwcmludAphCQAAAAAAAGsJAAAAAAAAAAAAAFUJAAAAAAAAVQkAAAAAAAAKAAAALy8vIHByaW50CmIJAAAAAAAAbAkAAAAAAAAAAAAAVwkAAAAAAABXCQAAAAAAAAoAAAAvLy8gcHJpbnQKYwkAAAAAAABtCQAAAAAAAAAAAABYCQAAAAAAAFgJAAAAAAAACgAAAC8vLyBwcmludAo",
					"AQAAAAAAAAABAAAACgkAAAAAAAAKCQAAAAAAAAAAAAAAAPC/"
				],
				[
					665,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAF0JAAAAAAAAXQkAAAAAAAAFAAAAcHJpbnQ",
					"AQAAAAAAAAABAAAAYgkAAAAAAABiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					666,
					1,
					"insert",
					{
						"characters": "display"
					},
					"BwAAAF0JAAAAAAAAXgkAAAAAAAAAAAAAXgkAAAAAAABfCQAAAAAAAAAAAABfCQAAAAAAAGAJAAAAAAAAAAAAAGAJAAAAAAAAYQkAAAAAAAAAAAAAYQkAAAAAAABiCQAAAAAAAAAAAABiCQAAAAAAAGMJAAAAAAAAAAAAAGMJAAAAAAAAZAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQkAAAAAAABdCQAAAAAAAAAAAAAAAPC/"
				],
				[
					667,
					1,
					"insert",
					{
						"characters": " print"
					},
					"BgAAAGQJAAAAAAAAZQkAAAAAAAAAAAAAZQkAAAAAAABmCQAAAAAAAAAAAABmCQAAAAAAAGcJAAAAAAAAAAAAAGcJAAAAAAAAaAkAAAAAAAAAAAAAaAkAAAAAAABpCQAAAAAAAAAAAABpCQAAAAAAAGoJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAkAAAAAAABkCQAAAAAAAAAAAAAAAPC/"
				],
				[
					691,
					1,
					"insert",
					{
						"characters": "\n///"
					},
					"BAAAADILAAAAAAAAMwsAAAAAAAAAAAAAMwsAAAAAAAA0CwAAAAAAAAAAAAA0CwAAAAAAADULAAAAAAAAAAAAADULAAAAAAAANgsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgsAAAAAAAAyCwAAAAAAAAAAAAAAAPC/"
				],
				[
					692,
					1,
					"insert",
					{
						"characters": " equal"
					},
					"BgAAADYLAAAAAAAANwsAAAAAAAAAAAAANwsAAAAAAAA4CwAAAAAAAAAAAAA4CwAAAAAAADkLAAAAAAAAAAAAADkLAAAAAAAAOgsAAAAAAAAAAAAAOgsAAAAAAAA7CwAAAAAAAAAAAAA7CwAAAAAAADwLAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANgsAAAAAAAA2CwAAAAAAAAAAAAAAAPC/"
				],
				[
					693,
					1,
					"insert",
					{
						"characters": " and"
					},
					"BAAAADwLAAAAAAAAPQsAAAAAAAAAAAAAPQsAAAAAAAA+CwAAAAAAAAAAAAA+CwAAAAAAAD8LAAAAAAAAAAAAAD8LAAAAAAAAQAsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAsAAAAAAAA8CwAAAAAAAAAAAAAAAPC/"
				],
				[
					694,
					1,
					"insert",
					{
						"characters": " n"
					},
					"AgAAAEALAAAAAAAAQQsAAAAAAAAAAAAAQQsAAAAAAABCCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQAsAAAAAAABACwAAAAAAAAAAAAAAAPC/"
				],
				[
					695,
					1,
					"insert",
					{
						"characters": "ot-equal"
					},
					"CAAAAEILAAAAAAAAQwsAAAAAAAAAAAAAQwsAAAAAAABECwAAAAAAAAAAAABECwAAAAAAAEULAAAAAAAAAAAAAEULAAAAAAAARgsAAAAAAAAAAAAARgsAAAAAAABHCwAAAAAAAAAAAABHCwAAAAAAAEgLAAAAAAAAAAAAAEgLAAAAAAAASQsAAAAAAAAAAAAASQsAAAAAAABKCwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQgsAAAAAAABCCwAAAAAAAAAAAAAAAPC/"
				],
				[
					706,
					1,
					"insert",
					{
						"characters": "\n///"
					},
					"BAAAADwIAAAAAAAAPQgAAAAAAAAAAAAAPQgAAAAAAAA+CAAAAAAAAAAAAAA+CAAAAAAAAD8IAAAAAAAAAAAAAD8IAAAAAAAAQAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAgAAAAAAAA8CAAAAAAAAAAAAAAAAPC/"
				],
				[
					707,
					1,
					"insert",
					{
						"characters": " object"
					},
					"BwAAAEAIAAAAAAAAQQgAAAAAAAAAAAAAQQgAAAAAAABCCAAAAAAAAAAAAABCCAAAAAAAAEMIAAAAAAAAAAAAAEMIAAAAAAAARAgAAAAAAAAAAAAARAgAAAAAAABFCAAAAAAAAAAAAABFCAAAAAAAAEYIAAAAAAAAAAAAAEYIAAAAAAAARwgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQAgAAAAAAABACAAAAAAAAAAAAAAAAPC/"
				],
				[
					708,
					1,
					"insert",
					{
						"characters": " trait"
					},
					"BgAAAEcIAAAAAAAASAgAAAAAAAAAAAAASAgAAAAAAABJCAAAAAAAAAAAAABJCAAAAAAAAEoIAAAAAAAAAAAAAEoIAAAAAAAASwgAAAAAAAAAAAAASwgAAAAAAABMCAAAAAAAAAAAAABMCAAAAAAAAE0IAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARwgAAAAAAABHCAAAAAAAAAAAAAAAAPC/"
				],
				[
					742,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAADgAAAAAAAAAOQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAAAAAAAAAA4AAAAAAAAAAAAAAAA4G5A"
				],
				[
					773,
					1,
					"left_delete",
					null,
					"AQAAAI4BAAAAAAAAjgEAAAAAAABzAgAACi8vLyB0aGlzIG11c3QgYmUgY2FsbGVkIGxpa2UgdGhpcwovLy8gIE9iamVjdDo6SW50MzIoSW50Ojo8aTMyPjo6bmV3KDEyMykpCi8vLyBhbmQgaXRzIHZlcnkgdWdseQovLyBpbXBsIEludDxpMzI+IHsKLy8gICAgIC8vLyBjcmVhdGUgYSBuZXcgSW50IG9iamVjdAovLyAgICAgLy8vCi8vICAgICAvLy8gbGV0IGludGVnZXIgPSBJbnQ6Om5ldygxMjMpCi8vICAgICBwdWIgZm4gbmV3KF9pbnRlZ2VyOiBpMzIpIC0+IFNlbGYgewovLyAgICAgICAgIEludCB7Ci8vICAgICAgICAgICAgIF9pbnRlZ2VyLAovLyAgICAgICAgIH0KLy8gICAgIH0KLy8gfQoKLy8vIHRoaXMgbXVzdCBiZSBjYWxsZWQgbGlrZSB0aGlzCi8vLyAgT2JqZWN0OjpJbnQ2NChJbnQ6OjxpNjQ+OjpuZXcoMTIzKSkKLy8vIGFuZCBpdHMgdmVyeSB1Z2x5Ci8vIGltcGwgSW50PGk2ND4gewovLyAgICAgLy8vIGNyZWF0ZSBhIG5ldyBJbnQgb2JqZWN0Ci8vICAgICAvLy8KLy8gICAgIC8vLyBsZXQgaW50ZWdlciA9IEludDo6bmV3KDEyMykKLy8gICAgIHB1YiBmbiBuZXcoX2ludGVnZXI6IGk2NCkgLT4gU2VsZiB7Ci8vICAgICAgICAgSW50IHsKLy8gICAgICAgICAgICAgX2ludGVnZXIsCi8vICAgICAgICAgfQovLyAgICAgfQovLyB9",
					"AQAAAAAAAAABAAAAAQQAAAAAAACOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					775,
					3,
					"left_delete",
					null,
					"AwAAAJABAAAAAAAAkAEAAAAAAAABAAAACo8BAAAAAAAAjwEAAAAAAAABAAAACo4BAAAAAAAAjgEAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAkQEAAAAAAACRAQAAAAAAAAAAAAAAAAAA"
				],
				[
					776,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAI4BAAAAAAAAjwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgEAAAAAAACOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					781,
					1,
					"insert",
					{
						"characters": "///"
					},
					"AwAAAI8BAAAAAAAAkAEAAAAAAAAAAAAAkAEAAAAAAACRAQAAAAAAAAAAAACRAQAAAAAAAJIBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjwEAAAAAAACPAQAAAAAAAAAAAAAAAPC/"
				],
				[
					782,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJIBAAAAAAAAkwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkgEAAAAAAACSAQAAAAAAAAAAAAAAAPC/"
				],
				[
					783,
					1,
					"insert",
					{
						"characters": "Int::from"
					},
					"CQAAAJMBAAAAAAAAlAEAAAAAAAAAAAAAlAEAAAAAAACVAQAAAAAAAAAAAACVAQAAAAAAAJYBAAAAAAAAAAAAAJYBAAAAAAAAlwEAAAAAAAAAAAAAlwEAAAAAAACYAQAAAAAAAAAAAACYAQAAAAAAAJkBAAAAAAAAAAAAAJkBAAAAAAAAmgEAAAAAAAAAAAAAmgEAAAAAAACbAQAAAAAAAAAAAACbAQAAAAAAAJwBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAkwEAAAAAAACTAQAAAAAAAAAAAAAAAPC/"
				],
				[
					784,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJwBAAAAAAAAngEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAEAAAAAAACcAQAAAAAAAAAAAAAAAPC/"
				],
				[
					785,
					1,
					"insert",
					{
						"characters": "anything"
					},
					"CAAAAJ0BAAAAAAAAngEAAAAAAAAAAAAAngEAAAAAAACfAQAAAAAAAAAAAACfAQAAAAAAAKABAAAAAAAAAAAAAKABAAAAAAAAoQEAAAAAAAAAAAAAoQEAAAAAAACiAQAAAAAAAAAAAACiAQAAAAAAAKMBAAAAAAAAAAAAAKMBAAAAAAAApAEAAAAAAAAAAAAApAEAAAAAAAClAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQEAAAAAAACdAQAAAAAAAAAAAAAAAPC/"
				],
				[
					786,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAJ0BAAAAAAAAnQEAAAAAAAAIAAAAYW55dGhpbmc",
					"AQAAAAAAAAABAAAApQEAAAAAAAClAQAAAAAAAAAAAAAAAPC/"
				],
				[
					787,
					1,
					"insert",
					{
						"characters": "&str"
					},
					"BAAAAJ0BAAAAAAAAngEAAAAAAAAAAAAAngEAAAAAAACfAQAAAAAAAAAAAACfAQAAAAAAAKABAAAAAAAAAAAAAKABAAAAAAAAoQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQEAAAAAAACdAQAAAAAAAAAAAAAAAPC/"
				],
				[
					802,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAEEDAAAAAAAAQgMAAAAAAAAAAAAAQgMAAAAAAABDAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQMAAAAAAABBAwAAAAAAAAAAAAAAACpA"
				],
				[
					803,
					1,
					"paste",
					null,
					"AQAAAEMDAAAAAAAAVwMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQwMAAAAAAABDAwAAAAAAAAAAAAAAAPC/"
				],
				[
					805,
					1,
					"swap_line_down",
					null,
					"AgAAAFgDAAAAAAAAbAMAAAAAAAAAAAAAQwMAAAAAAABDAwAAAAAAABQAAAAvLy8gSW50Ojpmcm9tKCZzdHIpCg",
					"AQAAAAAAAAABAAAAQwMAAAAAAABDAwAAAAAAAAAAAAAAAAAA"
				],
				[
					807,
					1,
					"left_delete",
					null,
					"AQAAAEIDAAAAAAAAQgMAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAQwMAAAAAAABDAwAAAAAAAAAAAAAAAAAA"
				],
				[
					810,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAI4BAAAAAAAAjwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjgEAAAAAAACOAQAAAAAAAAAAAAAAAPC/"
				],
				[
					827,
					1,
					"insert",
					{
						"characters": "\n///"
					},
					"BAAAAMUAAAAAAAAAxgAAAAAAAAAAAAAAxgAAAAAAAADHAAAAAAAAAAAAAADHAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAyQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxQAAAAAAAADFAAAAAAAAAAAAAAAAAPC/"
				],
				[
					828,
					1,
					"insert",
					{
						"characters": " int:"
					},
					"BQAAAMkAAAAAAAAAygAAAAAAAAAAAAAAygAAAAAAAADLAAAAAAAAAAAAAADLAAAAAAAAAMwAAAAAAAAAAAAAAMwAAAAAAAAAzQAAAAAAAAAAAAAAzQAAAAAAAADOAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQAAAAAAAADJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					829,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAAM0AAAAAAAAAzQAAAAAAAAABAAAAOsoAAAAAAAAAygAAAAAAAAADAAAAaW50",
					"AQAAAAAAAAABAAAAzgAAAAAAAADOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					830,
					1,
					"insert",
					{
						"characters": "Int::nmew"
					},
					"CQAAAMoAAAAAAAAAywAAAAAAAAAAAAAAywAAAAAAAADMAAAAAAAAAAAAAADMAAAAAAAAAM0AAAAAAAAAAAAAAM0AAAAAAAAAzgAAAAAAAAAAAAAAzgAAAAAAAADPAAAAAAAAAAAAAADPAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA0QAAAAAAAAAAAAAA0QAAAAAAAADSAAAAAAAAAAAAAADSAAAAAAAAANMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAygAAAAAAAADKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					831,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAM8AAAAAAAAAzwAAAAAAAAAEAAAAbm1ldw",
					"AQAAAAAAAAABAAAA0wAAAAAAAADTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					832,
					1,
					"insert",
					{
						"characters": "new"
					},
					"AwAAAM8AAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADRAAAAAAAAAAAAAADRAAAAAAAAANIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzwAAAAAAAADPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					833,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANIAAAAAAAAA1AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0gAAAAAAAADSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					836,
					1,
					"insert",
					{
						"characters": "anyrth"
					},
					"BgAAANMAAAAAAAAA1AAAAAAAAAAAAAAA1AAAAAAAAADVAAAAAAAAAAAAAADVAAAAAAAAANYAAAAAAAAAAAAAANYAAAAAAAAA1wAAAAAAAAAAAAAA1wAAAAAAAADYAAAAAAAAAAAAAADYAAAAAAAAANkAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wAAAAAAAADTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					837,
					3,
					"left_delete",
					null,
					"AwAAANgAAAAAAAAA2AAAAAAAAAABAAAAaNcAAAAAAAAA1wAAAAAAAAABAAAAdNYAAAAAAAAA1gAAAAAAAAABAAAAcg",
					"AQAAAAAAAAABAAAA2QAAAAAAAADZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					838,
					1,
					"insert",
					{
						"characters": "thing"
					},
					"BQAAANYAAAAAAAAA1wAAAAAAAAAAAAAA1wAAAAAAAADYAAAAAAAAAAAAAADYAAAAAAAAANkAAAAAAAAAAAAAANkAAAAAAAAA2gAAAAAAAAAAAAAA2gAAAAAAAADbAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1gAAAAAAAADWAAAAAAAAAAAAAAAAAPC/"
				],
				[
					840,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAANMAAAAAAAAA1AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0wAAAAAAAADTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					842,
					1,
					"insert",
					{
						"characters": "_"
					},
					"AQAAANwAAAAAAAAA3QAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AAAAAAAAADcAAAAAAAAAAAAAAAAAPC/"
				],
				[
					880,
					2,
					"left_delete",
					null,
					"AgAAAKoGAAAAAAAAqgYAAAAAAAA8AAAAZm4gX19sZW5fXygmc2VsZikgLT4gdXNpemUgewogICAgICAgIHVuaW1wbGVtZW50ZWQhKCkKICAgIH0KpgYAAAAAAACmBgAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAAqgYAAAAAAADmBgAAAAAAAAAAAAAAAEpA"
				],
				[
					885,
					1,
					"left_delete",
					null,
					"AQAAAKUGAAAAAAAApQYAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAApgYAAAAAAACmBgAAAAAAAAAAAAAAAPC/"
				],
				[
					904,
					1,
					"insert",
					{
						"characters": "\n#pde"
					},
					"BQAAAG0AAAAAAAAAbgAAAAAAAAAAAAAAbgAAAAAAAABvAAAAAAAAAAAAAABvAAAAAAAAAHAAAAAAAAAAAAAAAHAAAAAAAAAAcQAAAAAAAAAAAAAAcQAAAAAAAAByAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQAAAAAAAABtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					905,
					3,
					"left_delete",
					null,
					"AwAAAHEAAAAAAAAAcQAAAAAAAAABAAAAZXAAAAAAAAAAcAAAAAAAAAABAAAAZG8AAAAAAAAAbwAAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAcgAAAAAAAAByAAAAAAAAAAAAAAAAAPC/"
				],
				[
					906,
					1,
					"insert_snippet",
					{
						"contents": "[$0]"
					},
					"AQAAAG8AAAAAAAAAcQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbwAAAAAAAABvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					907,
					1,
					"insert",
					{
						"characters": "deri"
					},
					"BAAAAHAAAAAAAAAAcQAAAAAAAAAAAAAAcQAAAAAAAAByAAAAAAAAAAAAAAByAAAAAAAAAHMAAAAAAAAAAAAAAHMAAAAAAAAAdAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcAAAAAAAAABwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					908,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"derive\",\"additionalTextEdits\":[],\"detail\":\"pub macro derive\",\"sortText\":\"fffffffd\",\"label\":\"derive\",\"deprecated\":false,\"textEdit\":{\"newText\":\"derive\",\"range\":{\"end\":{\"character\":6,\"line\":10},\"start\":{\"character\":2,\"line\":10}}},\"documentation\":{\"value\":\"Attribute macro used to apply derive macros.\\n\\nSee [the reference] for more info.\\n\\n[the reference]: ../../../reference/attributes/derive.html\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							342,
							907,
							4
						],
						"trigger": "derive"
					},
					"AgAAAHAAAAAAAAAAcAAAAAAAAAAEAAAAZGVyaXAAAAAAAAAAdgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAAAAAAAAAB0AAAAAAAAAAAAAAAAAPC/"
				],
				[
					909,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAHYAAAAAAAAAeAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdgAAAAAAAAB2AAAAAAAAAAAAAAAAAPC/"
				],
				[
					910,
					1,
					"insert",
					{
						"characters": "Hash"
					},
					"BAAAAHcAAAAAAAAAeAAAAAAAAAAAAAAAeAAAAAAAAAB5AAAAAAAAAAAAAAB5AAAAAAAAAHoAAAAAAAAAAAAAAHoAAAAAAAAAewAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwAAAAAAAAB3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					912,
					1,
					"duplicate_line",
					null,
					"AQAAAH4AAAAAAAAAjgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfAAAAAAAAAB8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					917,
					1,
					"insert",
					{
						"characters": "\n//"
					},
					"AwAAAAgJAAAAAAAACQkAAAAAAAAAAAAACQkAAAAAAAAKCQAAAAAAAAAAAAAKCQAAAAAAAAsJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACAkAAAAAAAAICQAAAAAAAAAAAAAAAPC/"
				],
				[
					918,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAAsJAAAAAAAADAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACwkAAAAAAAALCQAAAAAAAAAAAAAAAPC/"
				],
				[
					919,
					1,
					"left_delete",
					null,
					"AQAAAAsJAAAAAAAACwkAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAADAkAAAAAAAAMCQAAAAAAAAAAAAAAAPC/"
				],
				[
					920,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAAsJAAAAAAAADAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAACwkAAAAAAAALCQAAAAAAAAAAAAAAAPC/"
				],
				[
					921,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAAAwJAAAAAAAADQkAAAAAAAAAAAAADQkAAAAAAAAOCQAAAAAAAAAAAAAOCQAAAAAAAA8JAAAAAAAAAAAAAA8JAAAAAAAAEAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAADAkAAAAAAAAMCQAAAAAAAAAAAAAAAPC/"
				],
				[
					922,
					1,
					"insert",
					{
						"characters": " all"
					},
					"BAAAABAJAAAAAAAAEQkAAAAAAAAAAAAAEQkAAAAAAAASCQAAAAAAAAAAAAASCQAAAAAAABMJAAAAAAAAAAAAABMJAAAAAAAAFAkAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEAkAAAAAAAAQCQAAAAAAAAAAAAAAAPC/"
				],
				[
					923,
					1,
					"insert",
					{
						"characters": " types"
					},
					"BgAAABQJAAAAAAAAFQkAAAAAAAAAAAAAFQkAAAAAAAAWCQAAAAAAAAAAAAAWCQAAAAAAABcJAAAAAAAAAAAAABcJAAAAAAAAGAkAAAAAAAAAAAAAGAkAAAAAAAAZCQAAAAAAAAAAAAAZCQAAAAAAABoJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAFAkAAAAAAAAUCQAAAAAAAAAAAAAAAPC/"
				],
				[
					924,
					1,
					"insert",
					{
						"characters": " of"
					},
					"AwAAABoJAAAAAAAAGwkAAAAAAAAAAAAAGwkAAAAAAAAcCQAAAAAAAAAAAAAcCQAAAAAAAB0JAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGgkAAAAAAAAaCQAAAAAAAAAAAAAAAPC/"
				],
				[
					925,
					1,
					"insert",
					{
						"characters": " intenge"
					},
					"CAAAAB0JAAAAAAAAHgkAAAAAAAAAAAAAHgkAAAAAAAAfCQAAAAAAAAAAAAAfCQAAAAAAACAJAAAAAAAAAAAAACAJAAAAAAAAIQkAAAAAAAAAAAAAIQkAAAAAAAAiCQAAAAAAAAAAAAAiCQAAAAAAACMJAAAAAAAAAAAAACMJAAAAAAAAJAkAAAAAAAAAAAAAJAkAAAAAAAAlCQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHQkAAAAAAAAdCQAAAAAAAAAAAAAAAPC/"
				],
				[
					926,
					3,
					"left_delete",
					null,
					"AwAAACQJAAAAAAAAJAkAAAAAAAABAAAAZSMJAAAAAAAAIwkAAAAAAAABAAAAZyIJAAAAAAAAIgkAAAAAAAABAAAAbg",
					"AQAAAAAAAAABAAAAJQkAAAAAAAAlCQAAAAAAAAAAAAAAAPC/"
				],
				[
					927,
					1,
					"insert",
					{
						"characters": "ger"
					},
					"AwAAACIJAAAAAAAAIwkAAAAAAAAAAAAAIwkAAAAAAAAkCQAAAAAAAAAAAAAkCQAAAAAAACUJAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIgkAAAAAAAAiCQAAAAAAAAAAAAAAAPC/"
				],
				[
					939,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAIcAAAAAAAAAhwAAAAAAAAAEAAAASGFzaA",
					"AQAAAAAAAAABAAAAiwAAAAAAAACLAAAAAAAAAAAAAAAAAPC/"
				],
				[
					940,
					1,
					"insert",
					{
						"characters": "Par"
					},
					"AwAAAIcAAAAAAAAAiAAAAAAAAAAAAAAAiAAAAAAAAACJAAAAAAAAAAAAAACJAAAAAAAAAIoAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwAAAAAAAACHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					941,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"PartialEq\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"PartialEq\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"PartialEq\",\"range\":{\"end\":{\"character\":12,\"line\":11},\"start\":{\"character\":9,\"line\":11}}},\"documentation\":{\"value\":\"Derive macro generating an impl of the trait `PartialEq`.\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							369,
							940,
							3
						],
						"trigger": "PartialEq"
					},
					"AgAAAIcAAAAAAAAAhwAAAAAAAAADAAAAUGFyhwAAAAAAAACQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigAAAAAAAACKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					954,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAIcAAAAAAAAAhwAAAAAAAAAJAAAAUGFydGlhbEVx",
					"AQAAAAAAAAABAAAAkAAAAAAAAACQAAAAAAAAAAAAAAAAAPC/"
				],
				[
					955,
					1,
					"insert",
					{
						"characters": "eq"
					},
					"AgAAAIcAAAAAAAAAiAAAAAAAAAAAAAAAiAAAAAAAAACJAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwAAAAAAAACHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					956,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"Eq, PartialEq\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"PartialEq, Eq\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"PartialEq, Eq\",\"range\":{\"end\":{\"character\":11,\"line\":11},\"start\":{\"character\":9,\"line\":11}}},\"documentation\":{\"value\":\"Derive macro generating an impl of the trait `Eq`.\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							378,
							955,
							2
						],
						"trigger": "Eq, PartialEq"
					},
					"AgAAAIcAAAAAAAAAhwAAAAAAAAACAAAAZXGHAAAAAAAAAJQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQAAAAAAAACJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					957,
					3,
					"delete_word",
					{
						"forward": false
					},
					"AwAAAJIAAAAAAAAAkgAAAAAAAAACAAAARXGQAAAAAAAAAJAAAAAAAAAAAgAAACwghwAAAAAAAACHAAAAAAAAAAkAAABQYXJ0aWFsRXE",
					"AQAAAAAAAAABAAAAlAAAAAAAAACUAAAAAAAAAAAAAAAAAPC/"
				],
				[
					958,
					1,
					"insert",
					{
						"characters": "Eq"
					},
					"AgAAAIcAAAAAAAAAiAAAAAAAAAAAAAAAiAAAAAAAAACJAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhwAAAAAAAACHAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "TODO.md",
			"settings":
			{
				"buffer_size": 864,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": " remove"
					},
					"BwAAAMYBAAAAAAAAxwEAAAAAAAAAAAAAxwEAAAAAAADIAQAAAAAAAAAAAADIAQAAAAAAAMkBAAAAAAAAAAAAAMkBAAAAAAAAygEAAAAAAAAAAAAAygEAAAAAAADLAQAAAAAAAAAAAADLAQAAAAAAAMwBAAAAAAAAAAAAAMwBAAAAAAAAzQEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADGAQAAAAAAAMYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": " thje"
					},
					"BQAAAM0BAAAAAAAAzgEAAAAAAAAAAAAAzgEAAAAAAADPAQAAAAAAAAAAAADPAQAAAAAAANABAAAAAAAAAAAAANABAAAAAAAA0QEAAAAAAAAAAAAA0QEAAAAAAADSAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNAQAAAAAAAM0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAANIBAAAAAAAA0wEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSAQAAAAAAANIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					3,
					"left_delete",
					null,
					"AwAAANIBAAAAAAAA0gEAAAAAAAABAAAAINEBAAAAAAAA0QEAAAAAAAABAAAAZdABAAAAAAAA0AEAAAAAAAABAAAAag",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTAQAAAAAAANMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": " e"
					},
					"AgAAANABAAAAAAAA0QEAAAAAAAAAAAAA0QEAAAAAAADSAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADQAQAAAAAAANABAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					2,
					"left_delete",
					null,
					"AgAAANEBAAAAAAAA0QEAAAAAAAABAAAAZdABAAAAAAAA0AEAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSAQAAAAAAANIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAANABAAAAAAAA0QEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADQAQAAAAAAANABAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " __"
					},
					"AwAAANEBAAAAAAAA0gEAAAAAAAAAAAAA0gEAAAAAAADTAQAAAAAAAAAAAADTAQAAAAAAANQBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADRAQAAAAAAANEBAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAANIBAAAAAAAA0gEAAAAAAAACAAAAX18",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADUAQAAAAAAANQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAANIBAAAAAAAA1AEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSAQAAAAAAANIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "__len__"
					},
					"BwAAANMBAAAAAAAA1AEAAAAAAAAAAAAA1AEAAAAAAADVAQAAAAAAAAAAAADVAQAAAAAAANYBAAAAAAAAAAAAANYBAAAAAAAA1wEAAAAAAAAAAAAA1wEAAAAAAADYAQAAAAAAAAAAAADYAQAAAAAAANkBAAAAAAAAAAAAANkBAAAAAAAA2gEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADTAQAAAAAAANMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"left_delete",
					null,
					"AQAAANoBAAAAAAAA2gEAAAAAAAABAAAAYA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbAQAAAAAAANsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAANoBAAAAAAAA3AEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADaAQAAAAAAANoBAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "`"
					},
					"AQAAANwBAAAAAAAA3QEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADcAQAAAAAAANwBAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " from"
					},
					"BQAAAN0BAAAAAAAA3gEAAAAAAAAAAAAA3gEAAAAAAADfAQAAAAAAAAAAAADfAQAAAAAAAOABAAAAAAAAAAAAAOABAAAAAAAA4QEAAAAAAAAAAAAA4QEAAAAAAADiAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADdAQAAAAAAAN0BAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": " ob"
					},
					"AwAAAOIBAAAAAAAA4wEAAAAAAAAAAAAA4wEAAAAAAADkAQAAAAAAAAAAAADkAQAAAAAAAOUBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADiAQAAAAAAAOIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					2,
					"left_delete",
					null,
					"AgAAAOQBAAAAAAAA5AEAAAAAAAABAAAAYuMBAAAAAAAA4wEAAAAAAAABAAAAbw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADlAQAAAAAAAOUBAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAAOMBAAAAAAAA5QEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADjAQAAAAAAAOMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "_Object"
					},
					"BwAAAOQBAAAAAAAA5QEAAAAAAAAAAAAA5QEAAAAAAADmAQAAAAAAAAAAAADmAQAAAAAAAOcBAAAAAAAAAAAAAOcBAAAAAAAA6AEAAAAAAAAAAAAA6AEAAAAAAADpAQAAAAAAAAAAAADpAQAAAAAAAOoBAAAAAAAAAAAAAOoBAAAAAAAA6wEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADkAQAAAAAAAOQBAAAAAAAAAAAAAAAA8L8"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " trait"
					},
					"BgAAAOwBAAAAAAAA7QEAAAAAAAAAAAAA7QEAAAAAAADuAQAAAAAAAAAAAADuAQAAAAAAAO8BAAAAAAAAAAAAAO8BAAAAAAAA8AEAAAAAAAAAAAAA8AEAAAAAAADxAQAAAAAAAAAAAADxAQAAAAAAAPIBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADsAQAAAAAAAOwBAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " and"
					},
					"BAAAAPIBAAAAAAAA8wEAAAAAAAAAAAAA8wEAAAAAAAD0AQAAAAAAAAAAAAD0AQAAAAAAAPUBAAAAAAAAAAAAAPUBAAAAAAAA9gEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADyAQAAAAAAAPIBAAAAAAAAAAAAAAAA8L8"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAPYBAAAAAAAA9wEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2AQAAAAAAAPYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "implement"
					},
					"CQAAAPcBAAAAAAAA+AEAAAAAAAAAAAAA+AEAAAAAAAD5AQAAAAAAAAAAAAD5AQAAAAAAAPoBAAAAAAAAAAAAAPoBAAAAAAAA+wEAAAAAAAAAAAAA+wEAAAAAAAD8AQAAAAAAAAAAAAD8AQAAAAAAAP0BAAAAAAAAAAAAAP0BAAAAAAAA/gEAAAAAAAAAAAAA/gEAAAAAAAD/AQAAAAAAAAAAAAD/AQAAAAAAAAACAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3AQAAAAAAAPcBAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAAPcBAAAAAAAA9wEAAAAAAAAJAAAAaW1wbGVtZW508wEAAAAAAADzAQAAAAAAAAQAAABhbmQg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAgAAAAAAAAACAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "and"
					},
					"AwAAAPMBAAAAAAAA9AEAAAAAAAAAAAAA9AEAAAAAAAD1AQAAAAAAAAAAAAD1AQAAAAAAAPYBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADzAQAAAAAAAPMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " from"
					},
					"BQAAAPYBAAAAAAAA9wEAAAAAAAAAAAAA9wEAAAAAAAD4AQAAAAAAAAAAAAD4AQAAAAAAAPkBAAAAAAAAAAAAAPkBAAAAAAAA+gEAAAAAAAAAAAAA+gEAAAAAAAD7AQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD2AQAAAAAAAPYBAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " all"
					},
					"BAAAAPsBAAAAAAAA/AEAAAAAAAAAAAAA/AEAAAAAAAD9AQAAAAAAAAAAAAD9AQAAAAAAAP4BAAAAAAAAAAAAAP4BAAAAAAAA/wEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7AQAAAAAAAPsBAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " its"
					},
					"BAAAAP8BAAAAAAAAAAIAAAAAAAAAAAAAAAIAAAAAAAABAgAAAAAAAAAAAAABAgAAAAAAAAICAAAAAAAAAAAAAAICAAAAAAAAAwIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/AQAAAAAAAP8BAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " iompl"
					},
					"BgAAAAMCAAAAAAAABAIAAAAAAAAAAAAABAIAAAAAAAAFAgAAAAAAAAAAAAAFAgAAAAAAAAYCAAAAAAAAAAAAAAYCAAAAAAAABwIAAAAAAAAAAAAABwIAAAAAAAAIAgAAAAAAAAAAAAAIAgAAAAAAAAkCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAADAgAAAAAAAAMCAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAAQCAAAAAAAABAIAAAAAAAAFAAAAaW9tcGw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJAgAAAAAAAAkCAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "implemen"
					},
					"CAAAAAQCAAAAAAAABQIAAAAAAAAAAAAABQIAAAAAAAAGAgAAAAAAAAAAAAAGAgAAAAAAAAcCAAAAAAAAAAAAAAcCAAAAAAAACAIAAAAAAAAAAAAACAIAAAAAAAAJAgAAAAAAAAAAAAAJAgAAAAAAAAoCAAAAAAAAAAAAAAoCAAAAAAAACwIAAAAAAAAAAAAACwIAAAAAAAAMAgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEAgAAAAAAAAQCAAAAAAAAAAAAAAAA8L8"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": "tations"
					},
					"BwAAAAwCAAAAAAAADQIAAAAAAAAAAAAADQIAAAAAAAAOAgAAAAAAAAAAAAAOAgAAAAAAAA8CAAAAAAAAAAAAAA8CAAAAAAAAEAIAAAAAAAAAAAAAEAIAAAAAAAARAgAAAAAAAAAAAAARAgAAAAAAABICAAAAAAAAAAAAABICAAAAAAAAEwIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAMAgAAAAAAAAwCAAAAAAAAAAAAAAAA8L8"
				],
				[
					128,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAADHAgAACgojIFRPRE8KCmdyZWF0IHRvZG9zIGZvciBpbXByb3ZlbWVudAoKCi0gW3hdIGFkZCBnZW5lcmljIGZvciBldmVyeSBzdHJ1Y3QgSW50LCBGbG9hdCAuLi4gYWN0dWFsbHkgaXQgd29ya3MsIGJ1dCB5b3UgbmVlZCB0byBjcmVhdGUgRmxvYXQzMiwgRmxvYXQ2NCBpbiB0aGUgT2JqZWN0IGVudW0KLSBbIF0gQ0kgd2l0aCB0cmF2aXM6IGNoZWNrIHRoaXMgaHR0cHM6Ly9kb2MucnVzdC1sYW5nLm9yZy9jYXJnby9ndWlkZS9jb250aW51b3VzLWludGVncmF0aW9uLmh0bWwKLSBbIF0gaW1wbGVtZW50IGFueSBmdW5jdGlvbnMgZm9yIExpc3QKLSBbIF0gbWFrZSBhbiBpdGVyYXRvciBmb3IgTGlzdCBhbmQgZXh0cmFjdCBvYmplY3QgZnJvbSBpdAotIFsgXSBpbXBsZW1lbnQgYG1heCgpYCB8IGBtaW4oKWAgZm9yIGBMaXN0YAotIFsgXSBpbXBsZW1lbnQgYFBhcnRpYWxFcWAgZm9yIGBMaXN0YAotIFsgXSByZW1vdmUgdGhlIGBfX2xlbl9fKClgIGZyb20gYF9PYmplY3RgIHRyYWl0IGFuZCBmcm9tIGFsbCBpdHMgaW1wbGVtZW50YXRpb25zCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdCi0gWyBdAAAAAAAAAADHAgAAAAAAAAAAAAAAAAAAAAAAAMcCAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACZAQAAAAAAAJkBAAAAAAAAAAAAAACokEA"
				],
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAAMQBAAAAAAAAxAEAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAxQEAAAAAAADFAQAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": "x"
					},
					"AQAAAMQBAAAAAAAAxQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxAEAAAAAAADEAQAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert",
					{
						"characters": " implement"
					},
					"CgAAABkCAAAAAAAAGgIAAAAAAAAAAAAAGgIAAAAAAAAbAgAAAAAAAAAAAAAbAgAAAAAAABwCAAAAAAAAAAAAABwCAAAAAAAAHQIAAAAAAAAAAAAAHQIAAAAAAAAeAgAAAAAAAAAAAAAeAgAAAAAAAB8CAAAAAAAAAAAAAB8CAAAAAAAAIAIAAAAAAAAAAAAAIAIAAAAAAAAhAgAAAAAAAAAAAAAhAgAAAAAAACICAAAAAAAAAAAAACICAAAAAAAAIwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGQIAAAAAAAAZAgAAAAAAAAAAAAAAMHlA"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": " Hash"
					},
					"BQAAACMCAAAAAAAAJAIAAAAAAAAAAAAAJAIAAAAAAAAlAgAAAAAAAAAAAAAlAgAAAAAAACYCAAAAAAAAAAAAACYCAAAAAAAAJwIAAAAAAAAAAAAAJwIAAAAAAAAoAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIwIAAAAAAAAjAgAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " for"
					},
					"BAAAACgCAAAAAAAAKQIAAAAAAAAAAAAAKQIAAAAAAAAqAgAAAAAAAAAAAAAqAgAAAAAAACsCAAAAAAAAAAAAACsCAAAAAAAALAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAIAAAAAAAAoAgAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACwCAAAAAAAALQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAIAAAAAAAAsAgAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": "everty"
					},
					"BgAAAC0CAAAAAAAALgIAAAAAAAAAAAAALgIAAAAAAAAvAgAAAAAAAAAAAAAvAgAAAAAAADACAAAAAAAAAAAAADACAAAAAAAAMQIAAAAAAAAAAAAAMQIAAAAAAAAyAgAAAAAAAAAAAAAyAgAAAAAAADMCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQIAAAAAAAAtAgAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADMCAAAAAAAANAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwIAAAAAAAAzAgAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					3,
					"left_delete",
					null,
					"AwAAADMCAAAAAAAAMwIAAAAAAAABAAAAIDICAAAAAAAAMgIAAAAAAAABAAAAeTECAAAAAAAAMQIAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAANAIAAAAAAAA0AgAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": "y"
					},
					"AQAAADECAAAAAAAAMgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQIAAAAAAAAxAgAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": " type"
					},
					"BQAAADICAAAAAAAAMwIAAAAAAAAAAAAAMwIAAAAAAAA0AgAAAAAAAAAAAAA0AgAAAAAAADUCAAAAAAAAAAAAADUCAAAAAAAANgIAAAAAAAAAAAAANgIAAAAAAAA3AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMgIAAAAAAAAyAgAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADcCAAAAAAAAOAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwIAAAAAAAA3AgAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADgCAAAAAAAAOgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAIAAAAAAAA4AgAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "that"
					},
					"BAAAADkCAAAAAAAAOgIAAAAAAAAAAAAAOgIAAAAAAAA7AgAAAAAAAAAAAAA7AgAAAAAAADwCAAAAAAAAAAAAADwCAAAAAAAAPQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQIAAAAAAAA5AgAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": " can"
					},
					"BAAAAD0CAAAAAAAAPgIAAAAAAAAAAAAAPgIAAAAAAAA/AgAAAAAAAAAAAAA/AgAAAAAAAEACAAAAAAAAAAAAAEACAAAAAAAAQQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPQIAAAAAAAA9AgAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": " be"
					},
					"AwAAAEECAAAAAAAAQgIAAAAAAAAAAAAAQgIAAAAAAABDAgAAAAAAAAAAAABDAgAAAAAAAEQCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAQQIAAAAAAABBAgAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " as"
					},
					"AwAAAEQCAAAAAAAARQIAAAAAAAAAAAAARQIAAAAAAABGAgAAAAAAAAAAAABGAgAAAAAAAEcCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAIAAAAAAABEAgAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": " duict"
					},
					"BgAAAEcCAAAAAAAASAIAAAAAAAAAAAAASAIAAAAAAABJAgAAAAAAAAAAAABJAgAAAAAAAEoCAAAAAAAAAAAAAEoCAAAAAAAASwIAAAAAAAAAAAAASwIAAAAAAABMAgAAAAAAAAAAAABMAgAAAAAAAE0CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARwIAAAAAAABHAgAAAAAAAAAAAAAAAPC/"
				],
				[
					45,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAEgCAAAAAAAASAIAAAAAAAAFAAAAZHVpY3Q",
					"AQAAAAAAAAABAAAATQIAAAAAAABNAgAAAAAAAAAAAAAAAPC/"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "dict"
					},
					"BAAAAEgCAAAAAAAASQIAAAAAAAAAAAAASQIAAAAAAABKAgAAAAAAAAAAAABKAgAAAAAAAEsCAAAAAAAAAAAAAEsCAAAAAAAATAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASAIAAAAAAABIAgAAAAAAAAAAAAAAAPC/"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " key"
					},
					"BAAAAEwCAAAAAAAATQIAAAAAAAAAAAAATQIAAAAAAABOAgAAAAAAAAAAAABOAgAAAAAAAE8CAAAAAAAAAAAAAE8CAAAAAAAAUAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATAIAAAAAAABMAgAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"right_delete",
					null,
					"AQAAAEYCAAAAAAAARgIAAAAAAAABAAAAcw",
					"AQAAAAAAAAABAAAARgIAAAAAAABGAgAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAFACAAAAAAAAUQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUAIAAAAAAABQAgAAAAAAAP///////+9/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFECAAAAAAAAUgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUQIAAAAAAABRAgAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAAFICAAAAAAAAVAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUgIAAAAAAABSAgAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "_String"
					},
					"BwAAAFMCAAAAAAAAVAIAAAAAAAAAAAAAVAIAAAAAAABVAgAAAAAAAAAAAABVAgAAAAAAAFYCAAAAAAAAAAAAAFYCAAAAAAAAVwIAAAAAAAAAAAAAVwIAAAAAAABYAgAAAAAAAAAAAABYAgAAAAAAAFkCAAAAAAAAAAAAAFkCAAAAAAAAWgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwIAAAAAAABTAgAAAAAAAAAAAAAAAPC/"
				],
				[
					73,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAFsCAAAAAAAAXAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWwIAAAAAAABbAgAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFwCAAAAAAAAXQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXAIAAAAAAABcAgAAAAAAAAAAAAAAAPC/"
				],
				[
					75,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAAF0CAAAAAAAAXwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXQIAAAAAAABdAgAAAAAAAAAAAAAAAPC/"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": "Bool,"
					},
					"BQAAAF4CAAAAAAAAXwIAAAAAAAAAAAAAXwIAAAAAAABgAgAAAAAAAAAAAABgAgAAAAAAAGECAAAAAAAAAAAAAGECAAAAAAAAYgIAAAAAAAAAAAAAYgIAAAAAAABjAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAXgIAAAAAAABeAgAAAAAAAAAAAAAAAPC/"
				],
				[
					77,
					1,
					"left_delete",
					null,
					"AQAAAGICAAAAAAAAYgIAAAAAAAABAAAALA",
					"AQAAAAAAAAABAAAAYwIAAAAAAABjAgAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGMCAAAAAAAAZAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAYwIAAAAAAABjAgAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGQCAAAAAAAAZQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZAIAAAAAAABkAgAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAAGUCAAAAAAAAZwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZQIAAAAAAABlAgAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"insert",
					{
						"characters": "Int"
					},
					"AwAAAGYCAAAAAAAAZwIAAAAAAAAAAAAAZwIAAAAAAABoAgAAAAAAAAAAAABoAgAAAAAAAGkCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZgIAAAAAAABmAgAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAGoCAAAAAAAAawIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAagIAAAAAAABqAgAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAGsCAAAAAAAAbAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawIAAAAAAABrAgAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAAGwCAAAAAAAAbgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbAIAAAAAAABsAgAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": "Char"
					},
					"BAAAAG0CAAAAAAAAbgIAAAAAAAAAAAAAbgIAAAAAAABvAgAAAAAAAAAAAABvAgAAAAAAAHACAAAAAAAAAAAAAHACAAAAAAAAcQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAbQIAAAAAAABtAgAAAAAAAAAAAAAAAPC/"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHICAAAAAAAAcwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcgIAAAAAAAByAgAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHMCAAAAAAAAdAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAcwIAAAAAAABzAgAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAAHQCAAAAAAAAdgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAIAAAAAAAB0AgAAAAAAAAAAAAAAAPC/"
				],
				[
					115,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAHQCAAAAAAAAdAIAAAAAAAABAAAAYHQCAAAAAAAAdAIAAAAAAAABAAAAYA",
					"AQAAAAAAAAABAAAAdQIAAAAAAAB1AgAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAAHQCAAAAAAAAdgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdAIAAAAAAAB0AgAAAAAAAAAAAAAAAPC/"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": "Tupolwe"
					},
					"BwAAAHUCAAAAAAAAdgIAAAAAAAAAAAAAdgIAAAAAAAB3AgAAAAAAAAAAAAB3AgAAAAAAAHgCAAAAAAAAAAAAAHgCAAAAAAAAeQIAAAAAAAAAAAAAeQIAAAAAAAB6AgAAAAAAAAAAAAB6AgAAAAAAAHsCAAAAAAAAAAAAAHsCAAAAAAAAfAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdQIAAAAAAAB1AgAAAAAAAAAAAAAAAPC/"
				],
				[
					118,
					4,
					"left_delete",
					null,
					"BAAAAHsCAAAAAAAAewIAAAAAAAABAAAAZXoCAAAAAAAAegIAAAAAAAABAAAAd3kCAAAAAAAAeQIAAAAAAAABAAAAbHgCAAAAAAAAeAIAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAAfAIAAAAAAAB8AgAAAAAAAAAAAAAAAPC/"
				],
				[
					119,
					1,
					"insert",
					{
						"characters": "ple"
					},
					"AwAAAHgCAAAAAAAAeQIAAAAAAAAAAAAAeQIAAAAAAAB6AgAAAAAAAAAAAAB6AgAAAAAAAHsCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAIAAAAAAAB4AgAAAAAAAAAAAAAAAPC/"
				],
				[
					120,
					3,
					"left_delete",
					null,
					"AwAAAHoCAAAAAAAAegIAAAAAAAABAAAAZXkCAAAAAAAAeQIAAAAAAAABAAAAbHgCAAAAAAAAeAIAAAAAAAABAAAAcA",
					"AQAAAAAAAAABAAAAewIAAAAAAAB7AgAAAAAAAAAAAAAAAPC/"
				],
				[
					121,
					1,
					"insert",
					{
						"characters": "le"
					},
					"AgAAAHgCAAAAAAAAeQIAAAAAAAAAAAAAeQIAAAAAAAB6AgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAeAIAAAAAAAB4AgAAAAAAAAAAAAAAAPC/"
				],
				[
					123,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAHsCAAAAAAAAfAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAewIAAAAAAAB7AgAAAAAAAAAAAAAAAPC/"
				],
				[
					124,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAHwCAAAAAAAAfQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfAIAAAAAAAB8AgAAAAAAAAAAAAAAAPC/"
				],
				[
					125,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAAH0CAAAAAAAAfwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfQIAAAAAAAB9AgAAAAAAAAAAAAAAAPC/"
				],
				[
					126,
					1,
					"insert",
					{
						"characters": "tuple"
					},
					"BQAAAH4CAAAAAAAAfwIAAAAAAAAAAAAAfwIAAAAAAACAAgAAAAAAAAAAAACAAgAAAAAAAIECAAAAAAAAAAAAAIECAAAAAAAAggIAAAAAAAAAAAAAggIAAAAAAACDAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgIAAAAAAAB+AgAAAAAAAAAAAAAAAPC/"
				],
				[
					128,
					1,
					"insert",
					{
						"characters": "rust"
					},
					"BAAAAH4CAAAAAAAAfwIAAAAAAAAAAAAAfwIAAAAAAACAAgAAAAAAAAAAAACAAgAAAAAAAIECAAAAAAAAAAAAAIECAAAAAAAAggIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgIAAAAAAAB+AgAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIICAAAAAAAAgwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAggIAAAAAAACCAgAAAAAAAAAAAAAAAPC/"
				],
				[
					144,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAIkCAAAAAAAAigIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiQIAAAAAAACJAgAAAAAAAP///////+9/"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIoCAAAAAAAAiwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigIAAAAAAACKAgAAAAAAAAAAAAAAAPC/"
				],
				[
					146,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAAIsCAAAAAAAAjQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiwIAAAAAAACLAgAAAAAAAAAAAAAAAPC/"
				],
				[
					147,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAIwCAAAAAAAAjQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAIAAAAAAACMAgAAAAAAAAAAAAAAAPC/"
				],
				[
					148,
					1,
					"left_delete",
					null,
					"AQAAAIwCAAAAAAAAjAIAAAAAAAABAAAAZg",
					"AQAAAAAAAAABAAAAjQIAAAAAAACNAgAAAAAAAAAAAAAAAPC/"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": "Float"
					},
					"BQAAAIwCAAAAAAAAjQIAAAAAAAAAAAAAjQIAAAAAAACOAgAAAAAAAAAAAACOAgAAAAAAAI8CAAAAAAAAAAAAAI8CAAAAAAAAkAIAAAAAAAAAAAAAkAIAAAAAAACRAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjAIAAAAAAACMAgAAAAAAAAAAAAAAAPC/"
				],
				[
					165,
					1,
					"insert",
					{
						"characters": " add"
					},
					"BAAAAJgCAAAAAAAAmQIAAAAAAAAAAAAAmQIAAAAAAACaAgAAAAAAAAAAAACaAgAAAAAAAJsCAAAAAAAAAAAAAJsCAAAAAAAAnAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAIAAAAAAACYAgAAAAAAAAAAAAAA4GFA"
				],
				[
					166,
					1,
					"insert",
					{
						"characters": " ex"
					},
					"AwAAAJwCAAAAAAAAnQIAAAAAAAAAAAAAnQIAAAAAAACeAgAAAAAAAAAAAACeAgAAAAAAAJ8CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnAIAAAAAAACcAgAAAAAAAAAAAAAAAPC/"
				],
				[
					167,
					2,
					"left_delete",
					null,
					"AgAAAJ4CAAAAAAAAngIAAAAAAAABAAAAeJ0CAAAAAAAAnQIAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAnwIAAAAAAACfAgAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAAJ0CAAAAAAAAnwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnQIAAAAAAACdAgAAAAAAAAAAAAAAAPC/"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": "extend"
					},
					"BgAAAJ4CAAAAAAAAnwIAAAAAAAAAAAAAnwIAAAAAAACgAgAAAAAAAAAAAACgAgAAAAAAAKECAAAAAAAAAAAAAKECAAAAAAAAogIAAAAAAAAAAAAAogIAAAAAAACjAgAAAAAAAAAAAACjAgAAAAAAAKQCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAngIAAAAAAACeAgAAAAAAAAAAAAAAAPC/"
				],
				[
					171,
					1,
					"insert",
					{
						"characters": " fucntion"
					},
					"CQAAAKUCAAAAAAAApgIAAAAAAAAAAAAApgIAAAAAAACnAgAAAAAAAAAAAACnAgAAAAAAAKgCAAAAAAAAAAAAAKgCAAAAAAAAqQIAAAAAAAAAAAAAqQIAAAAAAACqAgAAAAAAAAAAAACqAgAAAAAAAKsCAAAAAAAAAAAAAKsCAAAAAAAArAIAAAAAAAAAAAAArAIAAAAAAACtAgAAAAAAAAAAAACtAgAAAAAAAK4CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQIAAAAAAAClAgAAAAAAAAAAAAAAAPC/"
				],
				[
					172,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAKYCAAAAAAAApgIAAAAAAAAIAAAAZnVjbnRpb24",
					"AQAAAAAAAAABAAAArgIAAAAAAACuAgAAAAAAAAAAAAAAAPC/"
				],
				[
					173,
					1,
					"insert",
					{
						"characters": "functioon"
					},
					"CQAAAKYCAAAAAAAApwIAAAAAAAAAAAAApwIAAAAAAACoAgAAAAAAAAAAAACoAgAAAAAAAKkCAAAAAAAAAAAAAKkCAAAAAAAAqgIAAAAAAAAAAAAAqgIAAAAAAACrAgAAAAAAAAAAAACrAgAAAAAAAKwCAAAAAAAAAAAAAKwCAAAAAAAArQIAAAAAAAAAAAAArQIAAAAAAACuAgAAAAAAAAAAAACuAgAAAAAAAK8CAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApgIAAAAAAACmAgAAAAAAAAAAAAAAAPC/"
				],
				[
					174,
					2,
					"left_delete",
					null,
					"AgAAAK4CAAAAAAAArgIAAAAAAAABAAAAbq0CAAAAAAAArQIAAAAAAAABAAAAbw",
					"AQAAAAAAAAABAAAArwIAAAAAAACvAgAAAAAAAAAAAAAAAPC/"
				],
				[
					175,
					1,
					"insert",
					{
						"characters": "n"
					},
					"AQAAAK0CAAAAAAAArgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQIAAAAAAACtAgAAAAAAAAAAAAAAAPC/"
				],
				[
					176,
					1,
					"insert",
					{
						"characters": " to"
					},
					"AwAAAK4CAAAAAAAArwIAAAAAAAAAAAAArwIAAAAAAACwAgAAAAAAAAAAAACwAgAAAAAAALECAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArgIAAAAAAACuAgAAAAAAAAAAAAAAAPC/"
				],
				[
					177,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALECAAAAAAAAsgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQIAAAAAAACxAgAAAAAAAAAAAAAAAPC/"
				],
				[
					178,
					1,
					"insert_snippet",
					{
						"contents": "`$0`"
					},
					"AQAAALICAAAAAAAAtAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgIAAAAAAACyAgAAAAAAAAAAAAAAAPC/"
				],
				[
					179,
					1,
					"insert",
					{
						"characters": "List"
					},
					"BAAAALMCAAAAAAAAtAIAAAAAAAAAAAAAtAIAAAAAAAC1AgAAAAAAAAAAAAC1AgAAAAAAALYCAAAAAAAAAAAAALYCAAAAAAAAtwIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAswIAAAAAAACzAgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "examples/python_int.rs",
			"settings":
			{
				"buffer_size": 760,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					33,
					1,
					"insert",
					{
						"characters": "\n\nprintd"
					},
					"CwAAACoCAAAAAAAAKwIAAAAAAAAAAAAAKwIAAAAAAAAvAgAAAAAAAAAAAAAvAgAAAAAAADACAAAAAAAAAAAAADACAAAAAAAANAIAAAAAAAAAAAAAKwIAAAAAAAArAgAAAAAAAAQAAAAgICAgMAIAAAAAAAAxAgAAAAAAAAAAAAAxAgAAAAAAADICAAAAAAAAAAAAADICAAAAAAAAMwIAAAAAAAAAAAAAMwIAAAAAAAA0AgAAAAAAAAAAAAA0AgAAAAAAADUCAAAAAAAAAAAAADUCAAAAAAAANgIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqAgAAAAAAACoCAAAAAAAAAAAAAABAcEA"
				],
				[
					34,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADYCAAAAAAAAOAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA2AgAAAAAAADYCAAAAAAAAAAAAAAAA8L8"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "int8"
					},
					"BAAAADcCAAAAAAAAOAIAAAAAAAAAAAAAOAIAAAAAAAA5AgAAAAAAAAAAAAA5AgAAAAAAADoCAAAAAAAAAAAAADoCAAAAAAAAOwIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA3AgAAAAAAADcCAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADwCAAAAAAAAPQIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA8AgAAAAAAADwCAAAAAAAAAAAAAAAA8L8"
				],
				[
					48,
					1,
					"duplicate_line",
					null,
					"AQAAANAAAAAAAAAA4wAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADPAAAAAAAAAM8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					1,
					"left_delete",
					null,
					"AQAAAOAAAAAAAAAA4AAAAAAAAAABAAAAdA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhAAAAAAAAAOEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "d"
					},
					"AQAAAOAAAAAAAAAA4QAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgAAAAAAAAAOAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					1,
					"left_delete",
					null,
					"AQAAAOAAAAAAAAAA4AAAAAAAAAABAAAAZA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADhAAAAAAAAAOEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "td"
					},
					"AgAAAOAAAAAAAAAA4QAAAAAAAAAAAAAA4QAAAAAAAADiAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADgAAAAAAAAAOAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAAB4AgAACiMhW2FsbG93KAogICAgZGVhZF9jb2RlLAogICAgdW51c2VkX2ltcG9ydHMsCiAgICB1bnVzZWRfdmFyaWFibGVzLAogICAgdW51c2VkX21hY3JvcywKICAgIHVudXNlZF9hc3NpZ25tZW50cywKICAgIHVudXNlZF9tdXQsCiAgICBub25fc25ha2VfY2FzZSwKICAgIHVudXNlZF9tdXN0X3VzZSwKKV0KCnVzZSBweXRob246OkludDsKdXNlIHB5dGhvbjo6cHJpbnQ7CnVzZSBweXRob246OnByaW50ZDsKCmZuIG1haW4oKSB7CiAgICBsZXQgaW50MzI6IGkzMiA9IDEyMzsKICAgIGxldCBpbnQ2NDogaTY0ID0gMTIzOwogICAgbGV0IGludDMyID0gSW50OjpuZXcoaW50MzIpOwogICAgbGV0IGludDY0ID0gSW50OjpuZXcoaW50NjQpOwoKICAgIC8vIG5vdGUgdGhlIGNvbnN0cnVjdG9yIG5ldyBpcyBnZW5lcmljCiAgICBsZXQgaW50OCA9IEludDo6bmV3KDFpOCk7CiAgICAvLyBhbmQgYWxzbyB0aGUgZnJvbSBtZXRob2QgaXMgZ2VuZXJpYwogICAgbGV0IGludDggPSBJbnQ6OmZyb20oMWk4KTsKICAgIGxldCBpbnQxNiA9IEludDo6ZnJvbSgxaTE2KTsKICAgIHByaW50KGludDgpOwogICAgcHJpbnQoaW50MTYpOwoKICAgIHByaW50ZChpbnQ4KTsKCiAgICBwcmludChpbnQzMik7CiAgICBwcmludChpbnQ2NCk7Cn0AAAAAAAAAAHgCAAAAAAAAAAAAAAAAAAAAAAAAeAIAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABnAQAAAAAAAGcBAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"BQAAAHYCAAAAAAAAdwIAAAAAAAAAAAAAdwIAAAAAAAB7AgAAAAAAAAAAAAB7AgAAAAAAAHwCAAAAAAAAAAAAAHwCAAAAAAAAgAIAAAAAAAAAAAAAdwIAAAAAAAB3AgAAAAAAAAQAAAAgICAg",
					"AQAAAAAAAAABAAAAdgIAAAAAAAB2AgAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "\nuse"
					},
					"BQAAAOMAAAAAAAAA5AAAAAAAAAAAAAAAeQIAAAAAAAB5AgAAAAAAAAQAAAAgICAg5AAAAAAAAADlAAAAAAAAAAAAAADlAAAAAAAAAOYAAAAAAAAAAAAAAOYAAAAAAAAA5wAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4wAAAAAAAADjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"insert",
					{
						"characters": " std::col"
					},
					"CQAAAOcAAAAAAAAA6AAAAAAAAAAAAAAA6AAAAAAAAADpAAAAAAAAAAAAAADpAAAAAAAAAOoAAAAAAAAAAAAAAOoAAAAAAAAA6wAAAAAAAAAAAAAA6wAAAAAAAADsAAAAAAAAAAAAAADsAAAAAAAAAO0AAAAAAAAAAAAAAO0AAAAAAAAA7gAAAAAAAAAAAAAA7gAAAAAAAADvAAAAAAAAAAAAAADvAAAAAAAAAPAAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5wAAAAAAAADnAAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"collections\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"collections\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"collections\",\"range\":{\"end\":{\"character\":12,\"line\":15},\"start\":{\"character\":9,\"line\":15}}},\"documentation\":{\"value\":\"Collection types.\\n\\nRust's standard collection library provides efficient implementations of the\\nmost common general purpose programming data structures. By using the\\nstandard implementations, it should be possible for two libraries to\\ncommunicate without significant data conversion.\\n\\nTo get this out of the way: you should probably just use [`Vec`] or [`HashMap`].\\nThese two collections cover most use cases for generic data storage and\\nprocessing. They are exceptionally good at doing what they do. All the other\\ncollections in the standard library have specific use cases where they are\\nthe optimal choice, but these cases are borderline *niche* in comparison.\\nEven when `Vec` and `HashMap` are technically suboptimal, they're probably a\\ngood enough choice to get started.\\n\\nRust's collections can be grouped into four major categories:\\n\\n* Sequences: [`Vec`], [`VecDeque`], [`LinkedList`]\\n* Maps: [`HashMap`], [`BTreeMap`]\\n* Sets: [`HashSet`], [`BTreeSet`]\\n* Misc: [`BinaryHeap`]\\n\\n# When Should You Use Which Collection?\\n\\nThese are fairly high-level and quick break-downs of when each collection\\nshould be considered. Detailed discussions of strengths and weaknesses of\\nindividual collections can be found on their own documentation pages.\\n\\n### Use a `Vec` when:\\n* You want to collect items up to be processed or sent elsewhere later, and\\n  don't care about any properties of the actual values being stored.\\n* You want a sequence of elements in a particular order, and will only be\\n  appending to (or near) the end.\\n* You want a stack.\\n* You want a resizable array.\\n* You want a heap-allocated array.\\n\\n### Use a `VecDeque` when:\\n* You want a [`Vec`] that supports efficient insertion at both ends of the\\n  sequence.\\n* You want a queue.\\n* You want a double-ended queue (deque).\\n\\n### Use a `LinkedList` when:\\n* You want a [`Vec`] or [`VecDeque`] of unknown size, and can't tolerate\\n  amortization.\\n* You want to efficiently split and append lists.\\n* You are *absolutely* certain you *really*, *truly*, want a doubly linked\\n  list.\\n\\n### Use a `HashMap` when:\\n* You want to associate arbitrary keys with an arbitrary value.\\n* You want a cache.\\n* You want a map, with no extra functionality.\\n\\n### Use a `BTreeMap` when:\\n* You want a map sorted by its keys.\\n* You want to be able to get a range of entries on-demand.\\n* You're interested in what the smallest or largest key-value pair is.\\n* You want to find the largest or smallest key that is smaller or larger\\n  than something.\\n\\n### Use the `Set` variant of any of these `Map`s when:\\n* You just want to remember which keys you've seen.\\n* There is no meaningful value to associate with your keys.\\n* You just want a set.\\n\\n### Use a `BinaryHeap` when:\\n\\n* You want to store a bunch of elements, but only ever want to process the\\n  \\\"biggest\\\" or \\\"most important\\\" one at any given time.\\n* You want a priority queue.\\n\\n# Performance\\n\\nChoosing the right collection for the job requires an understanding of what\\neach collection is good at. Here we briefly summarize the performance of\\ndifferent collections for certain important operations. For further details,\\nsee each type's documentation, and note that the names of actual methods may\\ndiffer from the tables below on certain collections.\\n\\nThroughout the documentation, we will follow a few conventions. For all\\noperations, the collection's size is denoted by n. If another collection is\\ninvolved in the operation, it contains m elements. Operations which have an\\n*amortized* cost are suffixed with a `*`. Operations with an *expected*\\ncost are suffixed with a `~`.\\n\\nAll amortized costs are for the potential need to resize when capacity is\\nexhausted. If a resize occurs it will take *O*(*n*) time. Our collections never\\nautomatically shrink, so removal operations aren't amortized. Over a\\nsufficiently large series of operations, the average cost per operation will\\ndeterministically equal the given cost.\\n\\nOnly [`HashMap`] has expected costs, due to the probabilistic nature of hashing.\\nIt is theoretically possible, though very unlikely, for [`HashMap`] to\\nexperience worse performance.\\n\\n## Sequences\\n\\n|                | get(i)                 | insert(i)               | remove(i)              | append    | split_off(i)           |\\n|----------------|------------------------|-------------------------|------------------------|-----------|------------------------|\\n| [`Vec`]        | *O*(1)                 | *O*(*n*-*i*)*           | *O*(*n*-*i*)           | *O*(*m*)* | *O*(*n*-*i*)           |\\n| [`VecDeque`]   | *O*(1)                 | *O*(min(*i*, *n*-*i*))* | *O*(min(*i*, *n*-*i*)) | *O*(*m*)* | *O*(min(*i*, *n*-*i*)) |\\n| [`LinkedList`] | *O*(min(*i*, *n*-*i*)) | *O*(min(*i*, *n*-*i*))  | *O*(min(*i*, *n*-*i*)) | *O*(1)    | *O*(min(*i*, *n*-*i*)) |\\n\\nNote that where ties occur, [`Vec`] is generally going to be faster than [`VecDeque`], and\\n[`VecDeque`] is generally going to be faster than [`LinkedList`].\\n\\n## Maps\\n\\nFor Sets, all operations have the cost of the equivalent Map operation.\\n\\n|              | get           | insert        | remove        | range         | append       |\\n|--------------|---------------|---------------|---------------|---------------|--------------|\\n| [`HashMap`]  | *O*(1)~       | *O*(1)~*      | *O*(1)~       | N/A           | N/A          |\\n| [`BTreeMap`] | *O*(log(*n*)) | *O*(log(*n*)) | *O*(log(*n*)) | *O*(log(*n*)) | *O*(*n*+*m*) |\\n\\n# Correct and Efficient Usage of Collections\\n\\nOf course, knowing which collection is the right one for the job doesn't\\ninstantly permit you to use it correctly. Here are some quick tips for\\nefficient and correct usage of the standard collections in general. If\\nyou're interested in how to use a specific collection in particular, consult\\nits documentation for detailed discussion and code examples.\\n\\n## Capacity Management\\n\\nMany collections provide several constructors and methods that refer to\\n\\\"capacity\\\". These collections are generally built on top of an array.\\nOptimally, this array would be exactly the right size to fit only the\\nelements stored in the collection, but for the collection to do this would\\nbe very inefficient. If the backing array was exactly the right size at all\\ntimes, then every time an element is inserted, the collection would have to\\ngrow the array to fit it. Due to the way memory is allocated and managed on\\nmost computers, this would almost surely require allocating an entirely new\\narray and copying every single element from the old one into the new one.\\nHopefully you can see that this wouldn't be very efficient to do on every\\noperation.\\n\\nMost collections therefore use an *amortized* allocation strategy. They\\ngenerally let themselves have a fair amount of unoccupied space so that they\\nonly have to grow on occasion. When they do grow, they allocate a\\nsubstantially larger array to move the elements into so that it will take a\\nwhile for another grow to be required. While this strategy is great in\\ngeneral, it would be even better if the collection *never* had to resize its\\nbacking array. Unfortunately, the collection itself doesn't have enough\\ninformation to do this itself. Therefore, it is up to us programmers to give\\nit hints.\\n\\nAny `with_capacity` constructor will instruct the collection to allocate\\nenough space for the specified number of elements. Ideally this will be for\\nexactly that many elements, but some implementation details may prevent\\nthis. See collection-specific documentation for details. In general, use\\n`with_capacity` when you know exactly how many elements will be inserted, or\\nat least have a reasonable upper-bound on that number.\\n\\nWhen anticipating a large influx of elements, the `reserve` family of\\nmethods can be used to hint to the collection how much room it should make\\nfor the coming items. As with `with_capacity`, the precise behavior of\\nthese methods will be specific to the collection of interest.\\n\\nFor optimal performance, collections will generally avoid shrinking\\nthemselves. If you believe that a collection will not soon contain any more\\nelements, or just really need the memory, the `shrink_to_fit` method prompts\\nthe collection to shrink the backing array to the minimum size capable of\\nholding its elements.\\n\\nFinally, if ever you're interested in what the actual capacity of the\\ncollection is, most collections provide a `capacity` method to query this\\ninformation on demand. This can be useful for debugging purposes, or for\\nuse with the `reserve` methods.\\n\\n## Iterators\\n\\nIterators are a powerful and robust mechanism used throughout Rust's\\nstandard libraries. Iterators provide a sequence of values in a generic,\\nsafe, efficient and convenient way. The contents of an iterator are usually\\n*lazily* evaluated, so that only the values that are actually needed are\\never actually produced, and no allocation need be done to temporarily store\\nthem. Iterators are primarily consumed using a `for` loop, although many\\nfunctions also take iterators where a collection or sequence of values is\\ndesired.\\n\\nAll of the standard collections provide several iterators for performing\\nbulk manipulation of their contents. The three primary iterators almost\\nevery collection should provide are `iter`, `iter_mut`, and `into_iter`.\\nSome of these are not provided on collections where it would be unsound or\\nunreasonable to provide them.\\n\\n`iter` provides an iterator of immutable references to all the contents of a\\ncollection in the most \\\"natural\\\" order. For sequence collections like [`Vec`],\\nthis means the items will be yielded in increasing order of index starting\\nat 0. For ordered collections like [`BTreeMap`], this means that the items\\nwill be yielded in sorted order. For unordered collections like [`HashMap`],\\nthe items will be yielded in whatever order the internal representation made\\nmost convenient. This is great for reading through all the contents of the\\ncollection.\\n\\n```rust\\nlet vec = vec![1, 2, 3, 4];\\nfor x in vec.iter() {\\n   println!(\\\"vec contained {}\\\", x);\\n}\\n```\\n\\n`iter_mut` provides an iterator of *mutable* references in the same order as\\n`iter`. This is great for mutating all the contents of the collection.\\n\\n```rust\\nlet mut vec = vec![1, 2, 3, 4];\\nfor x in vec.iter_mut() {\\n   *x += 1;\\n}\\n```\\n\\n`into_iter` transforms the actual collection into an iterator over its\\ncontents by-value. This is great when the collection itself is no longer\\nneeded, and the values are needed elsewhere. Using `extend` with `into_iter`\\nis the main way that contents of one collection are moved into another.\\n`extend` automatically calls `into_iter`, and takes any <code>T: [IntoIterator]</code>.\\nCalling `collect` on an iterator itself is also a great way to convert one\\ncollection into another. Both of these methods should internally use the\\ncapacity management tools discussed in the previous section to do this as\\nefficiently as possible.\\n\\n```rust\\nlet mut vec1 = vec![1, 2, 3, 4];\\nlet vec2 = vec![10, 20, 30, 40];\\nvec1.extend(vec2);\\n```\\n\\n```rust\\nuse std::collections::VecDeque;\\n\\nlet vec = [1, 2, 3, 4];\\nlet buf: VecDeque<_> = vec.into_iter().collect();\\n```\\n\\nIterators also provide a series of *adapter* methods for performing common\\nthreads to sequences. Among the adapters are functional favorites like `map`,\\n`fold`, `skip` and `take`. Of particular interest to collections is the\\n`rev` adapter, which reverses any iterator that supports this operation. Most\\ncollections provide reversible iterators as the way to iterate over them in\\nreverse order.\\n\\n```rust\\nlet vec = vec![1, 2, 3, 4];\\nfor x in vec.iter().rev() {\\n   println!(\\\"vec contained {}\\\", x);\\n}\\n```\\n\\nSeveral other collection methods also return iterators to yield a sequence\\nof results but avoid allocating an entire collection to store the result in.\\nThis provides maximum flexibility as `collect` or `extend` can be called to\\n\\\"pipe\\\" the sequence into any collection if desired. Otherwise, the sequence\\ncan be looped over with a `for` loop. The iterator can also be discarded\\nafter partial use, preventing the computation of the unused items.\\n\\n## Entries\\n\\nThe `entry` API is intended to provide an efficient mechanism for\\nmanipulating the contents of a map conditionally on the presence of a key or\\nnot. The primary motivating use case for this is to provide efficient\\naccumulator maps. For instance, if one wishes to maintain a count of the\\nnumber of times each key has been seen, they will have to perform some\\nconditional logic on whether this is the first time the key has been seen or\\nnot. Normally, this would require a `find` followed by an `insert`,\\neffectively duplicating the search effort on each insertion.\\n\\nWhen a user calls `map.entry(key)`, the map will search for the key and\\nthen yield a variant of the `Entry` enum.\\n\\nIf a `Vacant(entry)` is yielded, then the key *was not* found. In this case\\nthe only valid operation is to `insert` a value into the entry. When this is\\ndone, the vacant entry is consumed and converted into a mutable reference to\\nthe value that was inserted. This allows for further manipulation of the\\nvalue beyond the lifetime of the search itself. This is useful if complex\\nlogic needs to be performed on the value regardless of whether the value was\\njust inserted.\\n\\nIf an `Occupied(entry)` is yielded, then the key *was* found. In this case,\\nthe user has several options: they can `get`, `insert` or `remove` the\\nvalue of the occupied entry. Additionally, they can convert the occupied\\nentry into a mutable reference to its value, providing symmetry to the\\nvacant `insert` case.\\n\\n### Examples\\n\\nHere are the two primary ways in which `entry` is used. First, a simple\\nexample where the logic performed on the values is trivial.\\n\\n#### Counting the number of times each character in a string occurs\\n\\n```rust\\nuse std::collections::btree_map::BTreeMap;\\n\\nlet mut count = BTreeMap::new();\\nlet message = \\\"she sells sea shells by the sea shore\\\";\\n\\nfor c in message.chars() {\\n    *count.entry(c).or_insert(0) += 1;\\n}\\n\\nassert_eq!(count.get(&'s'), Some(&8));\\n\\nprintln!(\\\"Number of occurrences of each character\\\");\\nfor (char, count) in &count {\\n    println!(\\\"{}: {}\\\", char, count);\\n}\\n```\\n\\nWhen the logic to be performed on the value is more complex, we may simply\\nuse the `entry` API to ensure that the value is initialized and perform the\\nlogic afterwards.\\n\\n#### Tracking the inebriation of customers at a bar\\n\\n```rust\\nuse std::collections::btree_map::BTreeMap;\\n\\n// A client of the bar. They have a blood alcohol level.\\nstruct Person { blood_alcohol: f32 }\\n\\n// All the orders made to the bar, by client ID.\\nlet orders = vec![1, 2, 1, 2, 3, 4, 1, 2, 2, 3, 4, 1, 1, 1];\\n\\n// Our clients.\\nlet mut blood_alcohol = BTreeMap::new();\\n\\nfor id in orders {\\n    // If this is the first time we've seen this customer, initialize them\\n    // with no blood alcohol. Otherwise, just retrieve them.\\n    let person = blood_alcohol.entry(id).or_insert(Person { blood_alcohol: 0.0 });\\n\\n    // Reduce their blood alcohol level. It takes time to order and drink a beer!\\n    person.blood_alcohol *= 0.9;\\n\\n    // Check if they're sober enough to have another beer.\\n    if person.blood_alcohol > 0.3 {\\n        // Too drunk... for now.\\n        println!(\\\"Sorry {}, I have to cut you off\\\", id);\\n    } else {\\n        // Have another!\\n        person.blood_alcohol += 0.1;\\n    }\\n}\\n```\\n\\n# Insert and complex keys\\n\\nIf we have a more complex key, calls to `insert` will\\nnot update the value of the key. For example:\\n\\n```rust\\nuse std::cmp::Ordering;\\nuse std::collections::BTreeMap;\\nuse std::hash::{Hash, Hasher};\\n\\n#[derive(Debug)]\\nstruct Foo {\\n    a: u32,\\n    b: &'static str,\\n}\\n\\n// we will compare `Foo`s by their `a` value only.\\nimpl PartialEq for Foo {\\n    fn eq(&self, other: &Self) -> bool { self.a == other.a }\\n}\\n\\nimpl Eq for Foo {}\\n\\n// we will hash `Foo`s by their `a` value only.\\nimpl Hash for Foo {\\n    fn hash<H: Hasher>(&self, h: &mut H) { self.a.hash(h); }\\n}\\n\\nimpl PartialOrd for Foo {\\n    fn partial_cmp(&self, other: &Self) -> Option<Ordering> { self.a.partial_cmp(&other.a) }\\n}\\n\\nimpl Ord for Foo {\\n    fn cmp(&self, other: &Self) -> Ordering { self.a.cmp(&other.a) }\\n}\\n\\nlet mut map = BTreeMap::new();\\nmap.insert(Foo { a: 1, b: \\\"baz\\\" }, 99);\\n\\n// We already have a Foo with an a of 1, so this will be updating the value.\\nmap.insert(Foo { a: 1, b: \\\"xyz\\\" }, 100);\\n\\n// The value has been updated...\\nassert_eq!(map.values().next().unwrap(), &100);\\n\\n// ...but the key hasn't changed. b is still \\\"baz\\\", not \\\"xyz\\\".\\nassert_eq!(map.keys().next().unwrap().b, \\\"baz\\\");\\n```\\n\\n[IntoIterator]: crate::iter::IntoIterator \\\"iter::IntoIterator\\\"\",\"kind\":\"markdown\"},\"kind\":9},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							26,
							34,
							9
						],
						"trigger": "collections"
					},
					"AgAAAO0AAAAAAAAA7QAAAAAAAAADAAAAY29s7QAAAAAAAAD4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA8AAAAAAAAADwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "::Hash"
					},
					"BgAAAPgAAAAAAAAA+QAAAAAAAAAAAAAA+QAAAAAAAAD6AAAAAAAAAAAAAAD6AAAAAAAAAPsAAAAAAAAAAAAAAPsAAAAAAAAA/AAAAAAAAAAAAAAA/AAAAAAAAAD9AAAAAAAAAAAAAAD9AAAAAAAAAP4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+AAAAAAAAAD4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					38,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"HashMap\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"HashMap\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"HashMap\",\"range\":{\"end\":{\"character\":26,\"line\":15},\"start\":{\"character\":22,\"line\":15}}},\"documentation\":{\"value\":\"A [hash map] implemented with quadratic probing and SIMD lookup.\\n\\nBy default, `HashMap` uses a hashing algorithm selected to provide\\nresistance against HashDoS attacks. The algorithm is randomly seeded, and a\\nreasonable best-effort is made to generate this seed from a high quality,\\nsecure source of randomness provided by the host without blocking the\\nprogram. Because of this, the randomness of the seed depends on the output\\nquality of the system's random number generator when the seed is created.\\nIn particular, seeds generated when the system's entropy pool is abnormally\\nlow such as during system boot may be of a lower quality.\\n\\nThe default hashing algorithm is currently SipHash 1-3, though this is\\nsubject to change at any point in the future. While its performance is very\\ncompetitive for medium sized keys, other hashing algorithms will outperform\\nit for small keys such as integers as well as large keys such as long\\nstrings, though those algorithms will typically *not* protect against\\nattacks such as HashDoS.\\n\\nThe hashing algorithm can be replaced on a per-`HashMap` basis using the\\n[`default`], [`with_hasher`], and [`with_capacity_and_hasher`] methods.\\nThere are many alternative [hashing algorithms available on crates.io].\\n\\nIt is required that the keys implement the [`Eq`] and [`Hash`] traits, although\\nthis can frequently be achieved by using `#[derive(PartialEq, Eq, Hash)]`.\\nIf you implement these yourself, it is important that the following\\nproperty holds:\\n\\n```text\\nk1 == k2 -> hash(k1) == hash(k2)\\n```\\n\\nIn other words, if two keys are equal, their hashes must be equal.\\n\\nIt is a logic error for a key to be modified in such a way that the key's\\nhash, as determined by the [`Hash`] trait, or its equality, as determined by\\nthe [`Eq`] trait, changes while it is in the map. This is normally only\\npossible through [`Cell`], [`RefCell`], global state, I/O, or unsafe code.\\nThe behavior resulting from such a logic error is not specified, but will\\nnot result in undefined behavior. This could include panics, incorrect results,\\naborts, memory leaks, and non-termination.\\n\\nThe hash table implementation is a Rust port of Google's [SwissTable].\\nThe original C++ version of SwissTable can be found [here], and this\\n[CppCon talk] gives an overview of how the algorithm works.\\n\\n[hash map]: crate::collections#use-a-hashmap-when\\n[hashing algorithms available on crates.io]: https://crates.io/keywords/hasher\\n[SwissTable]: https://abseil.io/blog/20180927-swisstables\\n[here]: https://github.com/abseil/abseil-cpp/blob/master/absl/container/internal/raw_hash_set.h\\n[CppCon talk]: https://www.youtube.com/watch?v=ncHmEUmJZf4\\n\\n# Examples\\n\\n```rust\\nuse std::collections::HashMap;\\n\\n// Type inference lets us omit an explicit type signature (which\\n// would be `HashMap<String, String>` in this example).\\nlet mut book_reviews = HashMap::new();\\n\\n// Review some books.\\nbook_reviews.insert(\\n    \\\"Adventures of Huckleberry Finn\\\".to_string(),\\n    \\\"My favorite book.\\\".to_string(),\\n);\\nbook_reviews.insert(\\n    \\\"Grimms' Fairy Tales\\\".to_string(),\\n    \\\"Masterpiece.\\\".to_string(),\\n);\\nbook_reviews.insert(\\n    \\\"Pride and Prejudice\\\".to_string(),\\n    \\\"Very enjoyable.\\\".to_string(),\\n);\\nbook_reviews.insert(\\n    \\\"The Adventures of Sherlock Holmes\\\".to_string(),\\n    \\\"Eye lyked it alot.\\\".to_string(),\\n);\\n\\n// Check for a specific one.\\n// When collections store owned values (String), they can still be\\n// queried using references (&str).\\nif !book_reviews.contains_key(\\\"Les MisÃ©rables\\\") {\\n    println!(\\\"We've got {} reviews, but Les MisÃ©rables ain't one.\\\",\\n             book_reviews.len());\\n}\\n\\n// oops, this review has a lot of spelling mistakes, let's delete it.\\nbook_reviews.remove(\\\"The Adventures of Sherlock Holmes\\\");\\n\\n// Look up the values associated with some keys.\\nlet to_find = [\\\"Pride and Prejudice\\\", \\\"Alice's Adventure in Wonderland\\\"];\\nfor &book in &to_find {\\n    match book_reviews.get(book) {\\n        Some(review) => println!(\\\"{}: {}\\\", book, review),\\n        None => println!(\\\"{} is unreviewed.\\\", book)\\n    }\\n}\\n\\n// Look up the value for a key (will panic if the key is not found).\\nprintln!(\\\"Review for Jane: {}\\\", book_reviews[\\\"Pride and Prejudice\\\"]);\\n\\n// Iterate over everything.\\nfor (book, review) in &book_reviews {\\n    println!(\\\"{}: \\\\\\\"{}\\\\\\\"\\\", book, review);\\n}\\n```\\n\\nA `HashMap` with a known list of items can be initialized from an array:\\n\\n```rust\\nuse std::collections::HashMap;\\n\\nlet solar_distance = HashMap::from([\\n    (\\\"Mercury\\\", 0.4),\\n    (\\\"Venus\\\", 0.7),\\n    (\\\"Earth\\\", 1.0),\\n    (\\\"Mars\\\", 1.5),\\n]);\\n```\\n\\n`HashMap` implements an [`Entry API`](#method.entry), which allows\\nfor complex methods of getting, setting, updating and removing keys and\\ntheir values:\\n\\n```rust\\nuse std::collections::HashMap;\\n\\n// type inference lets us omit an explicit type signature (which\\n// would be `HashMap<&str, u8>` in this example).\\nlet mut player_stats = HashMap::new();\\n\\nfn random_stat_buff() -> u8 {\\n    // could actually return some random value here - let's just return\\n    // some fixed value for now\\n    42\\n}\\n\\n// insert a key only if it doesn't already exist\\nplayer_stats.entry(\\\"health\\\").or_insert(100);\\n\\n// insert a key using a function that provides a new value only if it\\n// doesn't already exist\\nplayer_stats.entry(\\\"defence\\\").or_insert_with(random_stat_buff);\\n\\n// update a key, guarding against the key possibly not being set\\nlet stat = player_stats.entry(\\\"attack\\\").or_insert(100);\\n*stat += random_stat_buff();\\n```\\n\\nThe easiest way to use `HashMap` with a custom key type is to derive [`Eq`] and [`Hash`].\\nWe must also derive [`PartialEq`].\\n\\n[`RefCell`]: crate::cell::RefCell\\n[`Cell`]: crate::cell::Cell\\n[`default`]: Default::default\\n[`with_hasher`]: Self::with_hasher\\n[`with_capacity_and_hasher`]: Self::with_capacity_and_hasher\\n\\n```rust\\nuse std::collections::HashMap;\\n\\n#[derive(Hash, Eq, PartialEq, Debug)]\\nstruct Viking {\\n    name: String,\\n    country: String,\\n}\\n\\nimpl Viking {\\n    /// Creates a new Viking.\\n    fn new(name: &str, country: &str) -> Viking {\\n        Viking { name: name.to_string(), country: country.to_string() }\\n    }\\n}\\n\\n// Use a HashMap to store the vikings' health points.\\nlet vikings = HashMap::from([\\n    (Viking::new(\\\"Einar\\\", \\\"Norway\\\"), 25),\\n    (Viking::new(\\\"Olaf\\\", \\\"Denmark\\\"), 24),\\n    (Viking::new(\\\"Harald\\\", \\\"Iceland\\\"), 12),\\n]);\\n\\n// Use derived implementation to print the status of the vikings.\\nfor (viking, health) in &vikings {\\n    println!(\\\"{:?} has {} hp\\\", viking, health);\\n}\\n```\",\"kind\":\"markdown\"},\"kind\":22},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							28,
							36,
							6
						],
						"trigger": "HashMap"
					},
					"AgAAAPoAAAAAAAAA+gAAAAAAAAAEAAAASGFzaPoAAAAAAAAAAQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/gAAAAAAAAD+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAAEBAAAAAAAAAgEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQEAAAAAAAABAQAAAAAAAAAAAAAAkHdA"
				],
				[
					52,
					1,
					"reindent",
					null,
					"AQAAAJYCAAAAAAAAmgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAlgIAAAAAAACWAgAAAAAAAAAAAAAAAAAA"
				],
				[
					53,
					1,
					"insert",
					{
						"characters": "\nlet"
					},
					"BgAAAJoCAAAAAAAAmwIAAAAAAAAAAAAAmwIAAAAAAACfAgAAAAAAAAAAAACWAgAAAAAAAJYCAAAAAAAABAAAACAgICCbAgAAAAAAAJwCAAAAAAAAAAAAAJwCAAAAAAAAnQIAAAAAAAAAAAAAnQIAAAAAAACeAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmgIAAAAAAACaAgAAAAAAAAAAAAAAAPC/"
				],
				[
					54,
					1,
					"insert",
					{
						"characters": " dict"
					},
					"BQAAAJ4CAAAAAAAAnwIAAAAAAAAAAAAAnwIAAAAAAACgAgAAAAAAAAAAAACgAgAAAAAAAKECAAAAAAAAAAAAAKECAAAAAAAAogIAAAAAAAAAAAAAogIAAAAAAACjAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAngIAAAAAAACeAgAAAAAAAAAAAAAAAPC/"
				],
				[
					55,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAKMCAAAAAAAApAIAAAAAAAAAAAAApAIAAAAAAAClAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowIAAAAAAACjAgAAAAAAAAAAAAAAAPC/"
				],
				[
					56,
					1,
					"insert",
					{
						"characters": " Hash"
					},
					"BQAAAKUCAAAAAAAApgIAAAAAAAAAAAAApgIAAAAAAACnAgAAAAAAAAAAAACnAgAAAAAAAKgCAAAAAAAAAAAAAKgCAAAAAAAAqQIAAAAAAAAAAAAAqQIAAAAAAACqAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQIAAAAAAAClAgAAAAAAAAAAAAAAAPC/"
				],
				[
					57,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"Hash\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"Hash (use std::hash::Hash)\",\"data\":{\"imports\":[{\"full_import_path\":\"std::hash::Hash\",\"imported_name\":\"Hash\"}],\"position\":{\"position\":{\"character\":19,\"line\":36},\"textDocument\":{\"uri\":\"file:///home/alexzander/Alexzander__/programming/rust/python/examples/integer_example.rs\"}}},\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"Hash\",\"range\":{\"end\":{\"character\":19,\"line\":36},\"start\":{\"character\":15,\"line\":36}}},\"documentation\":{\"value\":\"A hashable type.\\n\\nTypes implementing `Hash` are able to be [`hash`]ed with an instance of\\n[`Hasher`].\\n\\n## Implementing `Hash`\\n\\nYou can derive `Hash` with `#[derive(Hash)]` if all fields implement `Hash`.\\nThe resulting hash will be the combination of the values from calling\\n[`hash`] on each field.\\n\\n```rust\\n#[derive(Hash)]\\nstruct Rustacean {\\n    name: String,\\n    country: String,\\n}\\n```\\n\\nIf you need more control over how a value is hashed, you can of course\\nimplement the `Hash` trait yourself:\\n\\n```rust\\nuse std::hash::{Hash, Hasher};\\n\\nstruct Person {\\n    id: u32,\\n    name: String,\\n    phone: u64,\\n}\\n\\nimpl Hash for Person {\\n    fn hash<H: Hasher>(&self, state: &mut H) {\\n        self.id.hash(state);\\n        self.phone.hash(state);\\n    }\\n}\\n```\\n\\n## `Hash` and `Eq`\\n\\nWhen implementing both `Hash` and [`Eq`], it is important that the following\\nproperty holds:\\n\\n```text\\nk1 == k2 -> hash(k1) == hash(k2)\\n```\\n\\nIn other words, if two keys are equal, their hashes must also be equal.\\n[`HashMap`] and [`HashSet`] both rely on this behavior.\\n\\nThankfully, you won't need to worry about upholding this property when\\nderiving both [`Eq`] and `Hash` with `#[derive(PartialEq, Eq, Hash)]`.\\n\\n## Prefix collisions\\n\\nImplementations of `hash` should ensure that the data they\\npass to the `Hasher` are prefix-free. That is,\\nunequal values should cause two different sequences of values to be written,\\nand neither of the two sequences should be a prefix of the other.\\n\\nFor example, the standard implementation of [`Hash` for `&str`][impl] passes an extra\\n`0xFF` byte to the `Hasher` so that the values `(\\\"ab\\\", \\\"c\\\")` and `(\\\"a\\\",\\n\\\"bc\\\")` hash differently.\\n\\n## Portability\\n\\nDue to differences in endianness and type sizes, data fed by `Hash` to a `Hasher`\\nshould not be considered portable across platforms. Additionally the data passed by most\\nstandard library types should not be considered stable between compiler versions.\\n\\nThis means tests shouldn't probe hard-coded hash values or data fed to a `Hasher` and\\ninstead should check consistency with `Eq`.\\n\\nSerialization formats intended to be portable between platforms or compiler versions should\\neither avoid encoding hashes or only rely on `Hash` and `Hasher` implementations that\\nprovide additional guarantees.\\n\\n[`HashMap`]: ../../std/collections/struct.HashMap.html\\n[`HashSet`]: ../../std/collections/struct.HashSet.html\\n[`hash`]: Hash::hash\\n[impl]: ../../std/primitive.str.html#impl-Hash\",\"kind\":\"markdown\"},\"kind\":8},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							42,
							56,
							5
						],
						"trigger": "Hash"
					},
					"AgAAAKYCAAAAAAAApgIAAAAAAAAEAAAASGFzaKYCAAAAAAAAqgIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqgIAAAAAAACqAgAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							[
								[
									15,
									30
								],
								[
									15,
									30
								],
								"\n",
								null
							],
							[
								[
									15,
									30
								],
								[
									15,
									30
								],
								"use std::hash::Hash;",
								null
							]
						]
					},
					"AgAAAAIBAAAAAAAAFgEAAAAAAAAAAAAAAgEAAAAAAAADAQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqgIAAAAAAACqAgAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "Map::new"
					},
					"CAAAAL8CAAAAAAAAwAIAAAAAAAAAAAAAwAIAAAAAAADBAgAAAAAAAAAAAADBAgAAAAAAAMICAAAAAAAAAAAAAMICAAAAAAAAwwIAAAAAAAAAAAAAwwIAAAAAAADEAgAAAAAAAAAAAADEAgAAAAAAAMUCAAAAAAAAAAAAAMUCAAAAAAAAxgIAAAAAAAAAAAAAxgIAAAAAAADHAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAvwIAAAAAAAC/AgAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMcCAAAAAAAAyQIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwIAAAAAAADHAgAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAMkCAAAAAAAAygIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQIAAAAAAADJAgAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMoCAAAAAAAAywIAAAAAAAAAAAAAywIAAAAAAADPAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAygIAAAAAAADKAgAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"cut",
					null,
					"AQAAAAMBAAAAAAAAAwEAAAAAAAAVAAAAdXNlIHN0ZDo6aGFzaDo6SGFzaDsK",
					"AQAAAAAAAAABAAAAFwEAAAAAAAAXAQAAAAAAAAAAAAAAAPC/"
				],
				[
					74,
					1,
					"trim_trailing_white_space",
					null,
					"AQAAALYCAAAAAAAAtgIAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAAwEAAAAAAAADAQAAAAAAAAAAAAAAAAAA"
				],
				[
					79,
					1,
					"insert",
					{
						"characters": "\ndict.inser"
					},
					"DAAAALUCAAAAAAAAtgIAAAAAAAAAAAAAtgIAAAAAAAC6AgAAAAAAAAAAAAC6AgAAAAAAALsCAAAAAAAAAAAAALsCAAAAAAAAvAIAAAAAAAAAAAAAvAIAAAAAAAC9AgAAAAAAAAAAAAC9AgAAAAAAAL4CAAAAAAAAAAAAAL4CAAAAAAAAvwIAAAAAAAAAAAAAvwIAAAAAAADAAgAAAAAAAAAAAADAAgAAAAAAAMECAAAAAAAAAAAAAMECAAAAAAAAwgIAAAAAAAAAAAAAwgIAAAAAAADDAgAAAAAAAAAAAADDAgAAAAAAAMQCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtQIAAAAAAAC1AgAAAAAAAAAAAAAAAPC/"
				],
				[
					80,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"command\":{\"command\":\"editor.action.triggerParameterHints\",\"title\":\"triggerParameterHints\"},\"insertTextFormat\":2,\"filterText\":\"insert\",\"additionalTextEdits\":[],\"detail\":\"fn(&mut self, K, V) -> Option<V>\",\"sortText\":\"fffffffd\",\"label\":\"insert(â€¦)\",\"deprecated\":false,\"textEdit\":{\"newText\":\"insert(${1:k}, ${2:v})$0\",\"range\":{\"end\":{\"character\":14,\"line\":37},\"start\":{\"character\":9,\"line\":37}}},\"documentation\":{\"value\":\"Inserts a key-value pair into the map.\\n\\nIf the map did not have this key present, [`None`] is returned.\\n\\nIf the map did have this key present, the value is updated, and the old\\nvalue is returned. The key is not updated, though; this matters for\\ntypes that can be `==` without being identical. See the [module-level\\ndocumentation] for more.\\n\\n[module-level documentation]: crate::collections#insert-and-complex-keys\\n\\n# Examples\\n\\n```rust\\nuse std::collections::HashMap;\\n\\nlet mut map = HashMap::new();\\nassert_eq!(map.insert(37, \\\"a\\\"), None);\\nassert_eq!(map.is_empty(), false);\\n\\nmap.insert(37, \\\"b\\\");\\nassert_eq!(map.insert(37, \\\"c\\\"), Some(\\\"b\\\"));\\nassert_eq!(map[&37], \\\"c\\\");\\n```\",\"kind\":\"markdown\"},\"kind\":2},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							56,
							79,
							12
						],
						"trigger": "insert"
					},
					"AgAAAL8CAAAAAAAAvwIAAAAAAAAFAAAAaW5zZXK/AgAAAAAAAMsCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxAIAAAAAAADEAgAAAAAAAAAAAAAAAPC/"
				],
				[
					82,
					1,
					"insert",
					{
						"characters": "in32"
					},
					"BQAAAMYCAAAAAAAAxwIAAAAAAAAAAAAAxwIAAAAAAADHAgAAAAAAAAEAAABrxwIAAAAAAADIAgAAAAAAAAAAAADIAgAAAAAAAMkCAAAAAAAAAAAAAMkCAAAAAAAAygIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxgIAAAAAAADHAgAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					2,
					"left_delete",
					null,
					"AgAAAMkCAAAAAAAAyQIAAAAAAAABAAAAMsgCAAAAAAAAyAIAAAAAAAABAAAAMw",
					"AQAAAAAAAAABAAAAygIAAAAAAADKAgAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert",
					{
						"characters": "ti32"
					},
					"BAAAAMgCAAAAAAAAyQIAAAAAAAAAAAAAyQIAAAAAAADKAgAAAAAAAAAAAADKAgAAAAAAAMsCAAAAAAAAAAAAAMsCAAAAAAAAzAIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyAIAAAAAAADIAgAAAAAAAAAAAAAAAPC/"
				],
				[
					85,
					3,
					"left_delete",
					null,
					"AwAAAMsCAAAAAAAAywIAAAAAAAABAAAAMsoCAAAAAAAAygIAAAAAAAABAAAAM8kCAAAAAAAAyQIAAAAAAAABAAAAaQ",
					"AQAAAAAAAAABAAAAzAIAAAAAAADMAgAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "32"
					},
					"AgAAAMkCAAAAAAAAygIAAAAAAAAAAAAAygIAAAAAAADLAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyQIAAAAAAADJAgAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"left_delete",
					null,
					"AQAAAM0CAAAAAAAAzQIAAAAAAAABAAAAdg",
					"AQAAAAAAAAABAAAAzgIAAAAAAADOAgAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "123"
					},
					"AwAAAM0CAAAAAAAAzgIAAAAAAAAAAAAAzgIAAAAAAADPAgAAAAAAAAAAAADPAgAAAAAAANACAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAzQIAAAAAAADNAgAAAAAAAAAAAAAAAPC/"
				],
				[
					102,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAANECAAAAAAAA0gIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0QIAAAAAAADRAgAAAAAAAAAAAAAAAPC/"
				],
				[
					103,
					1,
					"insert",
					{
						"characters": "\nprint"
					},
					"BwAAANICAAAAAAAA0wIAAAAAAAAAAAAA0wIAAAAAAADXAgAAAAAAAAAAAADXAgAAAAAAANgCAAAAAAAAAAAAANgCAAAAAAAA2QIAAAAAAAAAAAAA2QIAAAAAAADaAgAAAAAAAAAAAADaAgAAAAAAANsCAAAAAAAAAAAAANsCAAAAAAAA3AIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0gIAAAAAAADSAgAAAAAAAAAAAAAAAPC/"
				],
				[
					107,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"insertTextFormat\":2,\"filterText\":\"println!\",\"additionalTextEdits\":[],\"detail\":\"#[macro_export] macro_rules! println\",\"sortText\":\"fffffffd\",\"label\":\"println!(â€¦)\",\"deprecated\":false,\"textEdit\":{\"newText\":\"println!($0)\",\"range\":{\"end\":{\"character\":9,\"line\":38},\"start\":{\"character\":4,\"line\":38}}},\"documentation\":{\"value\":\"Prints to the standard output, with a newline.\\n\\nOn all platforms, the newline is the LINE FEED character (`\\\\n`/`U+000A`) alone\\n(no additional CARRIAGE RETURN (`\\\\r`/`U+000D`)).\\n\\nUse the [`format!`] syntax to write data to the standard output.\\nSee [`std::fmt`] for more information.\\n\\nUse `println!` only for the primary output of your program. Use\\n[`eprintln!`] instead to print error and progress messages.\\n\\n[`std::fmt`]: crate::fmt\\n\\n# Panics\\n\\nPanics if writing to [`io::stdout`] fails.\\n\\n[`io::stdout`]: crate::io::stdout\\n\\n# Examples\\n\\n```rust\\nprintln!(); // prints just a newline\\nprintln!(\\\"hello there!\\\");\\nprintln!(\\\"format {} arguments\\\", \\\"some\\\");\\n```\",\"kind\":\"markdown\"},\"kind\":3},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							73,
							103,
							7
						],
						"trigger": "println!"
					},
					"AgAAANcCAAAAAAAA1wIAAAAAAAAFAAAAcHJpbnTXAgAAAAAAAOECAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA3AIAAAAAAADcAgAAAAAAAAAAAAAAAPC/"
				],
				[
					108,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAOACAAAAAAAA4gIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4AIAAAAAAADgAgAAAAAAAAAAAAAAAPC/"
				],
				[
					109,
					1,
					"insert",
					{
						"characters": "{}"
					},
					"AgAAAOECAAAAAAAA4gIAAAAAAAAAAAAA4gIAAAAAAADjAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4QIAAAAAAADhAgAAAAAAAAAAAAAAAPC/"
				],
				[
					111,
					1,
					"insert",
					{
						"characters": ":?"
					},
					"AgAAAOICAAAAAAAA4wIAAAAAAAAAAAAA4wIAAAAAAADkAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA4gIAAAAAAADiAgAAAAAAAAAAAAAAAPC/"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAOYCAAAAAAAA5wIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5gIAAAAAAADmAgAAAAAAAAAAAAAAAPC/"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": " dict"
					},
					"BQAAAOcCAAAAAAAA6AIAAAAAAAAAAAAA6AIAAAAAAADpAgAAAAAAAAAAAADpAgAAAAAAAOoCAAAAAAAAAAAAAOoCAAAAAAAA6wIAAAAAAAAAAAAA6wIAAAAAAADsAgAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5wIAAAAAAADnAgAAAAAAAAAAAAAAAPC/"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAO0CAAAAAAAA7gIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7QIAAAAAAADtAgAAAAAAAAAAAAAAAPC/"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "mut"
					},
					"AwAAAJ8CAAAAAAAAoAIAAAAAAAAAAAAAoAIAAAAAAAChAgAAAAAAAAAAAAChAgAAAAAAAKICAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAnwIAAAAAAACfAgAAAAAAAAAAAAAAAPC/"
				],
				[
					130,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKICAAAAAAAAowIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAogIAAAAAAACiAgAAAAAAAAAAAAAAAPC/"
				],
				[
					138,
					1,
					"left_delete",
					null,
					"AQAAAOcCAAAAAAAA5wIAAAAAAAABAAAAPw",
					"AQAAAAAAAAABAAAA6AIAAAAAAADoAgAAAAAAAAAAAAAAAPC/"
				],
				[
					145,
					1,
					"insert",
					{
						"characters": "?"
					},
					"AQAAAOcCAAAAAAAA6AIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA5wIAAAAAAADnAgAAAAAAAAAAAAAAAPC/"
				],
				[
					156,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAANECAAAAAAAA0QIAAAAAAAADAAAAMTIz",
					"AQAAAAAAAAABAAAA1AIAAAAAAADUAgAAAAAAAAAAAAAAAPC/"
				],
				[
					157,
					1,
					"insert",
					{
						"characters": "int675"
					},
					"BgAAANECAAAAAAAA0gIAAAAAAAAAAAAA0gIAAAAAAADTAgAAAAAAAAAAAADTAgAAAAAAANQCAAAAAAAAAAAAANQCAAAAAAAA1QIAAAAAAAAAAAAA1QIAAAAAAADWAgAAAAAAAAAAAADWAgAAAAAAANcCAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA0QIAAAAAAADRAgAAAAAAAAAAAAAAAPC/"
				],
				[
					158,
					2,
					"left_delete",
					null,
					"AgAAANYCAAAAAAAA1gIAAAAAAAABAAAANdUCAAAAAAAA1QIAAAAAAAABAAAANw",
					"AQAAAAAAAAABAAAA1wIAAAAAAADXAgAAAAAAAAAAAAAAAPC/"
				],
				[
					159,
					1,
					"insert",
					{
						"characters": "6"
					},
					"AQAAANUCAAAAAAAA1gIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QIAAAAAAADVAgAAAAAAAAAAAAAAAPC/"
				],
				[
					168,
					1,
					"left_delete",
					null,
					"AQAAANUCAAAAAAAA1QIAAAAAAAABAAAANg",
					"AQAAAAAAAAABAAAA1gIAAAAAAADWAgAAAAAAAAAAAAAAwHZA"
				],
				[
					169,
					1,
					"insert",
					{
						"characters": "4"
					},
					"AQAAANUCAAAAAAAA1gIAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA1QIAAAAAAADVAgAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "examples/python_list2.rs",
			"settings":
			{
				"buffer_size": 4912,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"insert",
					{
						"characters": "\n\npython"
					},
					"CwAAAO4LAAAAAAAA7wsAAAAAAAAAAAAA7wsAAAAAAADzCwAAAAAAAAAAAADzCwAAAAAAAPQLAAAAAAAAAAAAAPQLAAAAAAAA+AsAAAAAAAAAAAAA7wsAAAAAAADvCwAAAAAAAAQAAAAgICAg9AsAAAAAAAD1CwAAAAAAAAAAAAD1CwAAAAAAAPYLAAAAAAAAAAAAAPYLAAAAAAAA9wsAAAAAAAAAAAAA9wsAAAAAAAD4CwAAAAAAAAAAAAD4CwAAAAAAAPkLAAAAAAAAAAAAAPkLAAAAAAAA+gsAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA7gsAAAAAAADuCwAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"python_list\",\"preselect\":true,\"detail\":\"List\",\"sortText\":\"fffffffc\",\"label\":\"python_list\",\"additionalTextEdits\":[],\"deprecated\":false,\"textEdit\":{\"newText\":\"python_list\",\"range\":{\"end\":{\"character\":10,\"line\":115},\"start\":{\"character\":4,\"line\":115}}},\"kind\":6},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							2,
							7,
							11
						],
						"trigger": "python_list"
					},
					"AgAAAPQLAAAAAAAA9AsAAAAAAAAGAAAAcHl0aG9u9AsAAAAAAAD/CwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA+gsAAAAAAAD6CwAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": ".ex"
					},
					"AwAAAP8LAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAABDAAAAAAAAAAAAAABDAAAAAAAAAIMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wsAAAAAAAD/CwAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "te"
					},
					"AgAAAAIMAAAAAAAAAwwAAAAAAAAAAAAAAwwAAAAAAAAEDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgwAAAAAAAACDAAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"command\":{\"command\":\"editor.action.triggerParameterHints\",\"title\":\"triggerParameterHints\"},\"insertTextFormat\":2,\"filterText\":\"extend\",\"additionalTextEdits\":[],\"detail\":\"fn(&mut self, T)\",\"sortText\":\"fffffffd\",\"label\":\"extend(â€¦) (as Extend)\",\"deprecated\":false,\"textEdit\":{\"newText\":\"extend(${1:iter})$0\",\"range\":{\"end\":{\"character\":20,\"line\":115},\"start\":{\"character\":16,\"line\":115}}},\"documentation\":{\"value\":\"Extends a collection with the contents of an iterator.\\n\\nAs this is the only required method for this trait, the [trait-level] docs\\ncontain more details.\\n\\n[trait-level]: Extend\\n\\n# Examples\\n\\nBasic usage:\\n\\n```rust\\n// You can extend a String with some chars:\\nlet mut message = String::from(\\\"abc\\\");\\n\\nmessage.extend(['d', 'e', 'f'].iter());\\n\\nassert_eq!(\\\"abcdef\\\", &message);\\n```\",\"kind\":\"markdown\"},\"kind\":2},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							7,
							14,
							2
						],
						"trigger": "extend"
					},
					"AgAAAAAMAAAAAAAAAAwAAAAAAAAEAAAAZXh0ZQAMAAAAAAAADAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAwAAAAAAAAEDAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					4,
					"delete_word",
					{
						"forward": false
					},
					"BAAAAAsMAAAAAAAACwwAAAAAAAABAAAAKQcMAAAAAAAABwwAAAAAAAAEAAAAaXRlcgYMAAAAAAAABgwAAAAAAAABAAAAKAAMAAAAAAAAAAwAAAAAAAAGAAAAZXh0ZW5k",
					"AQAAAAAAAAABAAAADAwAAAAAAAAMDAAAAAAAAP///////+9/"
				],
				[
					29,
					1,
					"left_delete",
					null,
					"AQAAAP8LAAAAAAAA/wsAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAPC/"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": ".exte"
					},
					"BQAAAP8LAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAABDAAAAAAAAAAAAAABDAAAAAAAAAIMAAAAAAAAAAAAAAIMAAAAAAAAAwwAAAAAAAAAAAAAAwwAAAAAAAAEDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wsAAAAAAAD/CwAAAAAAAAAAAAAAAPC/"
				],
				[
					34,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAAAMAAAAAAAAAAwAAAAAAAAEAAAAZXh0ZQ",
					"AQAAAAAAAAABAAAABAwAAAAAAAAEDAAAAAAAAAAAAAAAAPC/"
				],
				[
					35,
					1,
					"left_delete",
					null,
					"AQAAAP8LAAAAAAAA/wsAAAAAAAABAAAALg",
					"AQAAAAAAAAABAAAAAAwAAAAAAAAADAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": ".exte"
					},
					"BQAAAP8LAAAAAAAAAAwAAAAAAAAAAAAAAAwAAAAAAAABDAAAAAAAAAAAAAABDAAAAAAAAAIMAAAAAAAAAAAAAAIMAAAAAAAAAwwAAAAAAAAAAAAAAwwAAAAAAAAEDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA/wsAAAAAAAD/CwAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"command\":{\"command\":\"editor.action.triggerParameterHints\",\"title\":\"triggerParameterHints\"},\"insertTextFormat\":2,\"filterText\":\"extend\",\"additionalTextEdits\":[],\"detail\":\"fn(&mut self, T) -> &mut Self\",\"deprecated\":false,\"label\":\"extend(â€¦) (as Extend)\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"extend(${1:_})$0\",\"range\":{\"end\":{\"character\":20,\"line\":115},\"start\":{\"character\":16,\"line\":115}}},\"kind\":2},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							20,
							36,
							5
						],
						"trigger": "extend"
					},
					"AgAAAAAMAAAAAAAAAAwAAAAAAAAEAAAAZXh0ZQAMAAAAAAAACQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAwAAAAAAAAEDAAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"left_delete",
					null,
					"AQAAAAcMAAAAAAAABwwAAAAAAAABAAAAXw",
					"AQAAAAAAAAABAAAACAwAAAAAAAAIDAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": "List::from"
					},
					"CgAAAAcMAAAAAAAACAwAAAAAAAAAAAAACAwAAAAAAAAJDAAAAAAAAAAAAAAJDAAAAAAAAAoMAAAAAAAAAAAAAAoMAAAAAAAACwwAAAAAAAAAAAAACwwAAAAAAAAMDAAAAAAAAAAAAAAMDAAAAAAAAA0MAAAAAAAAAAAAAA0MAAAAAAAADgwAAAAAAAAAAAAADgwAAAAAAAAPDAAAAAAAAAAAAAAPDAAAAAAAABAMAAAAAAAAAAAAABAMAAAAAAAAEQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABwwAAAAAAAAHDAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAABEMAAAAAAAAEwwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEQwAAAAAAAARDAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAABIMAAAAAAAAFAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEgwAAAAAAAASDAAAAAAAAAAAAAAAAPC/"
				],
				[
					44,
					1,
					"insert",
					{
						"characters": "extented"
					},
					"CAAAABMMAAAAAAAAFAwAAAAAAAAAAAAAFAwAAAAAAAAVDAAAAAAAAAAAAAAVDAAAAAAAABYMAAAAAAAAAAAAABYMAAAAAAAAFwwAAAAAAAAAAAAAFwwAAAAAAAAYDAAAAAAAAAAAAAAYDAAAAAAAABkMAAAAAAAAAAAAABkMAAAAAAAAGgwAAAAAAAAAAAAAGgwAAAAAAAAbDAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAEwwAAAAAAAATDAAAAAAAAAAAAAAAAPC/"
				],
				[
					49,
					3,
					"left_delete",
					null,
					"AwAAABoMAAAAAAAAGgwAAAAAAAABAAAAZBkMAAAAAAAAGQwAAAAAAAABAAAAZRgMAAAAAAAAGAwAAAAAAAABAAAAdA",
					"AQAAAAAAAAABAAAAGwwAAAAAAAAbDAAAAAAAAAAAAAAAeIFA"
				],
				[
					50,
					1,
					"insert",
					{
						"characters": "ded"
					},
					"AwAAABgMAAAAAAAAGQwAAAAAAAAAAAAAGQwAAAAAAAAaDAAAAAAAAAAAAAAaDAAAAAAAABsMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAGAwAAAAAAAAYDAAAAAAAAAAAAAAAAPC/"
				],
				[
					52,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAB4MAAAAAAAAHwwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHgwAAAAAAAAeDAAAAAAAAP///////+9/"
				],
				[
					57,
					1,
					"insert",
					{
						"characters": "\nprint"
					},
					"BwAAAB8MAAAAAAAAIAwAAAAAAAAAAAAAIAwAAAAAAAAkDAAAAAAAAAAAAAAkDAAAAAAAACUMAAAAAAAAAAAAACUMAAAAAAAAJgwAAAAAAAAAAAAAJgwAAAAAAAAnDAAAAAAAAAAAAAAnDAAAAAAAACgMAAAAAAAAAAAAACgMAAAAAAAAKQwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAHwwAAAAAAAAfDAAAAAAAAAAAAAAAAPC/"
				],
				[
					58,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACkMAAAAAAAAKwwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKQwAAAAAAAApDAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "&python_list"
					},
					"DAAAACoMAAAAAAAAKwwAAAAAAAAAAAAAKwwAAAAAAAAsDAAAAAAAAAAAAAAsDAAAAAAAAC0MAAAAAAAAAAAAAC0MAAAAAAAALgwAAAAAAAAAAAAALgwAAAAAAAAvDAAAAAAAAAAAAAAvDAAAAAAAADAMAAAAAAAAAAAAADAMAAAAAAAAMQwAAAAAAAAAAAAAMQwAAAAAAAAyDAAAAAAAAAAAAAAyDAAAAAAAADMMAAAAAAAAAAAAADMMAAAAAAAANAwAAAAAAAAAAAAANAwAAAAAAAA1DAAAAAAAAAAAAAA1DAAAAAAAADYMAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgwAAAAAAAAqDAAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADcMAAAAAAAAOAwAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANwwAAAAAAAA3DAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "examples/python_list_extend.rs",
			"settings":
			{
				"buffer_size": 205,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\nmain"
					},
					"BgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"expand_snippet",
					null,
					"AgAAAAIAAAAAAAAAAgAAAAAAAAAEAAAAbWFpbgIAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgAAAAAAAAAGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert",
					{
						"characters": "\nuse"
					},
					"BAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEpA"
				],
				[
					7,
					1,
					"insert",
					{
						"characters": " python::*;"
					},
					"CwAAAAQAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAPAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABAAAAAAAAAAEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAAC4AAAAAAAAALgAAAAAAAAAEAAAAISgpOyEAAAAAAAAAIQAAAAAAAAANAAAAdW5pbXBsZW1lbnRlZA",
					"AQAAAAAAAAABAAAAMgAAAAAAAAAyAAAAAAAAAP///////+9/"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAACEAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQAAAAAAAAAhAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " mut"
					},
					"BAAAACQAAAAAAAAAJQAAAAAAAAAAAAAAJQAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACcAAAAAAAAAAAAAACcAAAAAAAAAKAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAJAAAAAAAAAAkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert",
					{
						"characters": " l;is"
					},
					"BQAAACgAAAAAAAAAKQAAAAAAAAAAAAAAKQAAAAAAAAAqAAAAAAAAAAAAAAAqAAAAAAAAACsAAAAAAAAAAAAAACsAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAtAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAAAAAAAAAAoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					3,
					"left_delete",
					null,
					"AwAAACwAAAAAAAAALAAAAAAAAAABAAAAcysAAAAAAAAAKwAAAAAAAAABAAAAaSoAAAAAAAAAKgAAAAAAAAABAAAAOw",
					"AQAAAAAAAAABAAAALQAAAAAAAAAtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": "ist"
					},
					"AwAAACoAAAAAAAAAKwAAAAAAAAAAAAAAKwAAAAAAAAAsAAAAAAAAAAAAAAAsAAAAAAAAAC0AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKgAAAAAAAAAqAAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAC0AAAAAAAAALgAAAAAAAAAAAAAALgAAAAAAAAAvAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQAAAAAAAAAtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " List::new"
					},
					"CgAAAC8AAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAAxAAAAAAAAAAAAAAAxAAAAAAAAADIAAAAAAAAAAAAAADIAAAAAAAAAMwAAAAAAAAAAAAAAMwAAAAAAAAA0AAAAAAAAAAAAAAA0AAAAAAAAADUAAAAAAAAAAAAAADUAAAAAAAAANgAAAAAAAAAAAAAANgAAAAAAAAA3AAAAAAAAAAAAAAA3AAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAOQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALwAAAAAAAAAvAAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAADkAAAAAAAAAOwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQAAAAAAAAA5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAADsAAAAAAAAAPAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwAAAAAAAAA7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "\n\nlist.extend"
					},
					"EAAAADwAAAAAAAAAPQAAAAAAAAAAAAAAPQAAAAAAAABBAAAAAAAAAAAAAABBAAAAAAAAAEIAAAAAAAAAAAAAAEIAAAAAAAAARgAAAAAAAAAAAAAAPQAAAAAAAAA9AAAAAAAAAAQAAAAgICAgQgAAAAAAAABDAAAAAAAAAAAAAABDAAAAAAAAAEQAAAAAAAAAAAAAAEQAAAAAAAAARQAAAAAAAAAAAAAARQAAAAAAAABGAAAAAAAAAAAAAABGAAAAAAAAAEcAAAAAAAAAAAAAAEcAAAAAAAAASAAAAAAAAAAAAAAASAAAAAAAAABJAAAAAAAAAAAAAABJAAAAAAAAAEoAAAAAAAAAAAAAAEoAAAAAAAAASwAAAAAAAAAAAAAASwAAAAAAAABMAAAAAAAAAAAAAABMAAAAAAAAAE0AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAPAAAAAAAAAA8AAAAAAAAAAAAAAAAAPC/"
				],
				[
					26,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAE0AAAAAAAAATwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATQAAAAAAAABNAAAAAAAAAAAAAAAAAPC/"
				],
				[
					27,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAE4AAAAAAAAAUAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATgAAAAAAAABOAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "from"
					},
					"BAAAAE8AAAAAAAAAUAAAAAAAAAAAAAAAUAAAAAAAAABRAAAAAAAAAAAAAABRAAAAAAAAAFIAAAAAAAAAAAAAAFIAAAAAAAAAUwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAATwAAAAAAAABPAAAAAAAAAAAAAAAAAPC/"
				],
				[
					29,
					1,
					"insert",
					{
						"characters": " str"
					},
					"BAAAAFMAAAAAAAAAVAAAAAAAAAAAAAAAVAAAAAAAAABVAAAAAAAAAAAAAABVAAAAAAAAAFYAAAAAAAAAAAAAAFYAAAAAAAAAVwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAUwAAAAAAAABTAAAAAAAAAAAAAAAAAPC/"
				],
				[
					31,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAFkAAAAAAAAAWgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWQAAAAAAAABZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					32,
					1,
					"duplicate_line",
					null,
					"AQAAAFsAAAAAAAAAeAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAWgAAAAAAAABaAAAAAAAAAAAAAAAAAPC/"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": "String::from"
					},
					"DAAAAGsAAAAAAAAAbAAAAAAAAAAAAAAAbAAAAAAAAABtAAAAAAAAAAAAAABtAAAAAAAAAG4AAAAAAAAAAAAAAG4AAAAAAAAAbwAAAAAAAAAAAAAAbwAAAAAAAABwAAAAAAAAAAAAAABwAAAAAAAAAHEAAAAAAAAAAAAAAHEAAAAAAAAAcgAAAAAAAAAAAAAAcgAAAAAAAABzAAAAAAAAAAAAAABzAAAAAAAAAHQAAAAAAAAAAAAAAHQAAAAAAAAAdQAAAAAAAAAAAAAAdQAAAAAAAAB2AAAAAAAAAAAAAAB2AAAAAAAAAHcAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAawAAAAAAAABrAAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "("
					},
					"AQAAAHcAAAAAAAAAeAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAdwAAAAAAAAB3AAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAH4AAAAAAAAAfgAAAAAAAAADAAAAc3Ry",
					"AQAAAAAAAAABAAAAgQAAAAAAAACBAAAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert",
					{
						"characters": "String"
					},
					"BgAAAH4AAAAAAAAAfwAAAAAAAAAAAAAAfwAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAIEAAAAAAAAAAAAAAIEAAAAAAAAAggAAAAAAAAAAAAAAggAAAAAAAACDAAAAAAAAAAAAAACDAAAAAAAAAIQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAfgAAAAAAAAB+AAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAAIYAAAAAAAAAhwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAhgAAAAAAAACGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					59,
					1,
					"insert",
					{
						"characters": "\nlist."
					},
					"BwAAAIgAAAAAAAAAiQAAAAAAAAAAAAAAiQAAAAAAAACNAAAAAAAAAAAAAACNAAAAAAAAAI4AAAAAAAAAAAAAAI4AAAAAAAAAjwAAAAAAAAAAAAAAjwAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAJEAAAAAAAAAAAAAAJEAAAAAAAAAkgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAiAAAAAAAAACIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					60,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAAJEAAAAAAAAAkQAAAAAAAAABAAAALo0AAAAAAAAAjQAAAAAAAAAEAAAAbGlzdA",
					"AQAAAAAAAAABAAAAkgAAAAAAAACSAAAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"insert",
					{
						"characters": "list.extend"
					},
					"CwAAAI0AAAAAAAAAjgAAAAAAAAAAAAAAjgAAAAAAAACPAAAAAAAAAAAAAACPAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAkQAAAAAAAAAAAAAAkQAAAAAAAACSAAAAAAAAAAAAAACSAAAAAAAAAJMAAAAAAAAAAAAAAJMAAAAAAAAAlAAAAAAAAAAAAAAAlAAAAAAAAACVAAAAAAAAAAAAAACVAAAAAAAAAJYAAAAAAAAAAAAAAJYAAAAAAAAAlwAAAAAAAAAAAAAAlwAAAAAAAACYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAjQAAAAAAAACNAAAAAAAAAAAAAAAAAPC/"
				],
				[
					62,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJgAAAAAAAAAmgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmAAAAAAAAACYAAAAAAAAAAAAAAAAAPC/"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": "List::from"
					},
					"CgAAAJkAAAAAAAAAmgAAAAAAAAAAAAAAmgAAAAAAAACbAAAAAAAAAAAAAACbAAAAAAAAAJwAAAAAAAAAAAAAAJwAAAAAAAAAnQAAAAAAAAAAAAAAnQAAAAAAAACeAAAAAAAAAAAAAACeAAAAAAAAAJ8AAAAAAAAAAAAAAJ8AAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAAChAAAAAAAAAAAAAAChAAAAAAAAAKIAAAAAAAAAAAAAAKIAAAAAAAAAowAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQAAAAAAAACZAAAAAAAAAAAAAAAAAPC/"
				],
				[
					64,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKMAAAAAAAAApQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAowAAAAAAAACjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					65,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAKQAAAAAAAAApgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApAAAAAAAAACkAAAAAAAAAAAAAAAAAPC/"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "extend"
					},
					"BgAAAKUAAAAAAAAApgAAAAAAAAAAAAAApgAAAAAAAACnAAAAAAAAAAAAAACnAAAAAAAAAKgAAAAAAAAAAAAAAKgAAAAAAAAAqQAAAAAAAAAAAAAAqQAAAAAAAACqAAAAAAAAAAAAAACqAAAAAAAAAKsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAApQAAAAAAAAClAAAAAAAAAAAAAAAAAPC/"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": " dfrom"
					},
					"BgAAAKsAAAAAAAAArAAAAAAAAAAAAAAArAAAAAAAAACtAAAAAAAAAAAAAACtAAAAAAAAAK4AAAAAAAAAAAAAAK4AAAAAAAAArwAAAAAAAAAAAAAArwAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAALEAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAqwAAAAAAAACrAAAAAAAAAAAAAAAAAPC/"
				],
				[
					68,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAKwAAAAAAAAArAAAAAAAAAAFAAAAZGZyb20",
					"AQAAAAAAAAABAAAAsQAAAAAAAACxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "from"
					},
					"BAAAAKwAAAAAAAAArQAAAAAAAAAAAAAArQAAAAAAAACuAAAAAAAAAAAAAACuAAAAAAAAAK8AAAAAAAAAAAAAAK8AAAAAAAAAsAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArAAAAAAAAACsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					70,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALAAAAAAAAAAsQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsAAAAAAAAACwAAAAAAAAAAAAAAAAAPC/"
				],
				[
					71,
					1,
					"insert",
					{
						"characters": "list"
					},
					"BAAAALEAAAAAAAAAsgAAAAAAAAAAAAAAsgAAAAAAAACzAAAAAAAAAAAAAACzAAAAAAAAALQAAAAAAAAAAAAAALQAAAAAAAAAtQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQAAAAAAAACxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": "\nprint"
					},
					"BwAAALgAAAAAAAAAuQAAAAAAAAAAAAAAuQAAAAAAAAC9AAAAAAAAAAAAAAC9AAAAAAAAAL4AAAAAAAAAAAAAAL4AAAAAAAAAvwAAAAAAAAAAAAAAvwAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAMEAAAAAAAAAAAAAAMEAAAAAAAAAwgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAAAAAAAAAC4AAAAAAAAAP///////+9/"
				],
				[
					82,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMIAAAAAAAAAxAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwgAAAAAAAADCAAAAAAAAAAAAAAAAAPC/"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "list"
					},
					"BAAAAMMAAAAAAAAAxAAAAAAAAAAAAAAAxAAAAAAAAADFAAAAAAAAAAAAAADFAAAAAAAAAMYAAAAAAAAAAAAAAMYAAAAAAAAAxwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAwwAAAAAAAADDAAAAAAAAAAAAAAAAAPC/"
				],
				[
					84,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMcAAAAAAAAAyQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwAAAAAAAADHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					86,
					1,
					"left_delete",
					null,
					"AQAAAMgAAAAAAAAAyAAAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAyQAAAAAAAADJAAAAAAAAAAAAAAAAAPC/"
				],
				[
					87,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAMcAAAAAAAAAxwAAAAAAAAABAAAAKMcAAAAAAAAAxwAAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAyAAAAAAAAADIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					88,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAMcAAAAAAAAAyQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwAAAAAAAADHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					89,
					1,
					"insert",
					{
						"characters": "l;"
					},
					"AgAAAMgAAAAAAAAAyQAAAAAAAAAAAAAAyQAAAAAAAADKAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAyAAAAAAAAADIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					90,
					2,
					"left_delete",
					null,
					"AgAAAMkAAAAAAAAAyQAAAAAAAAABAAAAO8gAAAAAAAAAyAAAAAAAAAABAAAAbA",
					"AQAAAAAAAAABAAAAygAAAAAAAADKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					91,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAMcAAAAAAAAAxwAAAAAAAAABAAAAKMcAAAAAAAAAxwAAAAAAAAABAAAAKQ",
					"AQAAAAAAAAABAAAAyAAAAAAAAADIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					92,
					1,
					"insert",
					{
						"characters": ");"
					},
					"AgAAAMcAAAAAAAAAyAAAAAAAAAAAAAAAyAAAAAAAAADJAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxwAAAAAAAADHAAAAAAAAAAAAAAAAAPC/"
				],
				[
					104,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALgAAAAAAAAAuQAAAAAAAAAAAAAAuQAAAAAAAAC9AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAAAAAAAAAC4AAAAAAAAAP///////+9/"
				],
				[
					110,
					1,
					"trim_trailing_white_space",
					null,
					"AQAAALkAAAAAAAAAuQAAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAjQAAAAAAAACNAAAAAAAAAAAAAAAAAEpA"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAALgAAAAAAAAAuQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAuAAAAAAAAAC4AAAAAAAAAP///////+9/"
				]
			]
		},
		{
			"file": "src/lib.rs",
			"settings":
			{
				"buffer_size": 929,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					6,
					1,
					"duplicate_line",
					null,
					"AQAAAIsDAAAAAAAApgMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAigMAAAAAAACKAwAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAAJkDAAAAAAAAmQMAAAAAAAALAAAAQXBwZW5kRnJvbnQ",
					"AQAAAAAAAAABAAAApAMAAAAAAACkAwAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "Extend"
					},
					"BgAAAJkDAAAAAAAAmgMAAAAAAAAAAAAAmgMAAAAAAACbAwAAAAAAAAAAAACbAwAAAAAAAJwDAAAAAAAAAAAAAJwDAAAAAAAAnQMAAAAAAAAAAAAAnQMAAAAAAACeAwAAAAAAAAAAAACeAwAAAAAAAJ8DAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAmQMAAAAAAACZAwAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs",
			"settings":
			{
				"buffer_size": 12587,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "examples/enum_dict.rs",
			"settings":
			{
				"buffer_size": 112,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					3,
					1,
					"insert",
					{
						"characters": "\n\nmain"
					},
					"BgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAFAAAAAAAAAAAAAAAFAAAAAAAAAAYAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					4,
					1,
					"expand_snippet",
					null,
					"AgAAAAIAAAAAAAAAAgAAAAAAAAAEAAAAbWFpbgIAAAAAAAAAJQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAABgAAAAAAAAAGAAAAAAAAAAAAAAAAAPC/"
				],
				[
					5,
					1,
					"left_delete",
					null,
					"AQAAABIAAAAAAAAAEgAAAAAAAAARAAAAdW5pbXBsZW1lbnRlZCEoKTs",
					"AQAAAAAAAAABAAAAEgAAAAAAAAAjAAAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAEAAAAAAAAAAgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAEpA"
				],
				[
					14,
					1,
					"paste",
					null,
					"AQAAAAIAAAAAAAAAIAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAgAAAAAAAAACAAAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\t"
					},
					"AQAAADEAAAAAAAAANQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQAAAAAAAAAxAAAAAAAAAAAAAAAAYHhA"
				],
				[
					17,
					1,
					"left_delete",
					null,
					"AQAAADEAAAAAAAAAMQAAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAANQAAAAAAAAA1AAAAAAAAAAAAAAAAAPC/"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "let"
					},
					"AwAAADEAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAzAAAAAAAAAAAAAAAzAAAAAAAAADQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMQAAAAAAAAAxAAAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " dict"
					},
					"BQAAADQAAAAAAAAANQAAAAAAAAAAAAAANQAAAAAAAAA2AAAAAAAAAAAAAAA2AAAAAAAAADcAAAAAAAAAAAAAADcAAAAAAAAAOAAAAAAAAAAAAAAAOAAAAAAAAAA5AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAANAAAAAAAAAA0AAAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAADkAAAAAAAAAOgAAAAAAAAAAAAAAOgAAAAAAAAA7AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOQAAAAAAAAA5AAAAAAAAAAAAAAAAAPC/"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " HashMap:"
					},
					"CQAAADsAAAAAAAAAPAAAAAAAAAAAAAAAPAAAAAAAAAA9AAAAAAAAAAAAAAA9AAAAAAAAAD4AAAAAAAAAAAAAAD4AAAAAAAAAPwAAAAAAAAAAAAAAPwAAAAAAAABAAAAAAAAAAAAAAABAAAAAAAAAAEEAAAAAAAAAAAAAAEEAAAAAAAAAQgAAAAAAAAAAAAAAQgAAAAAAAABDAAAAAAAAAAAAAABDAAAAAAAAAEQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOwAAAAAAAAA7AAAAAAAAAAAAAAAAAPC/"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": ":new"
					},
					"BAAAAEQAAAAAAAAARQAAAAAAAAAAAAAARQAAAAAAAABGAAAAAAAAAAAAAABGAAAAAAAAAEcAAAAAAAAAAAAAAEcAAAAAAAAASAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAARAAAAAAAAABEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					23,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEgAAAAAAAAASgAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASAAAAAAAAABIAAAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAAEoAAAAAAAAASwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASgAAAAAAAABKAAAAAAAAAAAAAAAAAPC/"
				],
				[
					28,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line.sublime-macro"
					},
					"AgAAAEsAAAAAAAAATAAAAAAAAAAAAAAATAAAAAAAAABQAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASwAAAAAAAABLAAAAAAAAAAAAAAAAYHhA"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AwAAACAAAAAAAAAAIQAAAAAAAAAAAAAATQAAAAAAAABNAAAAAAAAAAQAAAAgICAgIQAAAAAAAAAiAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIAAAAAAAAAAgAAAAAAAAAP///////+9/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "\nstruct"
					},
					"BwAAACEAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAjAAAAAAAAAAAAAAAjAAAAAAAAACQAAAAAAAAAAAAAACQAAAAAAAAAJQAAAAAAAAAAAAAAJQAAAAAAAAAmAAAAAAAAAAAAAAAmAAAAAAAAACcAAAAAAAAAAAAAACcAAAAAAAAAKAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAIQAAAAAAAAAhAAAAAAAAAAAAAAAAAAAA"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " Int"
					},
					"BAAAACgAAAAAAAAAKQAAAAAAAAAAAAAAKQAAAAAAAAAqAAAAAAAAAAAAAAAqAAAAAAAAACsAAAAAAAAAAAAAACsAAAAAAAAALAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAKAAAAAAAAAAoAAAAAAAAAAAAAAAAAPC/"
				],
				[
					39,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACwAAAAAAAAALQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALAAAAAAAAAAsAAAAAAAAAAAAAAAAAPC/"
				],
				[
					40,
					1,
					"insert_snippet",
					{
						"contents": "{$0}"
					},
					"AQAAAC0AAAAAAAAALwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALQAAAAAAAAAtAAAAAAAAAAAAAAAAAPC/"
				],
				[
					41,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAC4AAAAAAAAALwAAAAAAAAAAAAAALwAAAAAAAAAwAAAAAAAAAAAAAAAvAAAAAAAAADMAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAALgAAAAAAAAAuAAAAAAAAAAAAAAAAAPC/"
				],
				[
					42,
					1,
					"insert",
					{
						"characters": "_int:"
					},
					"BQAAADMAAAAAAAAANAAAAAAAAAAAAAAANAAAAAAAAAA1AAAAAAAAAAAAAAA1AAAAAAAAADYAAAAAAAAAAAAAADYAAAAAAAAANwAAAAAAAAAAAAAANwAAAAAAAAA4AAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAMwAAAAAAAAAzAAAAAAAAAAAAAAAAAPC/"
				],
				[
					43,
					1,
					"insert",
					{
						"characters": " i32"
					},
					"BAAAADgAAAAAAAAAOQAAAAAAAAAAAAAAOQAAAAAAAAA6AAAAAAAAAAAAAAA6AAAAAAAAADsAAAAAAAAAAAAAADsAAAAAAAAAPAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAOAAAAAAAAAA4AAAAAAAAAAAAAAAAAPC/"
				],
				[
					61,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAFAAAAAAAAAAUwAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAZwAAAAAAAABnAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs",
			"settings":
			{
				"buffer_size": 25305,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "src/builtins.rs",
			"settings":
			{
				"buffer_size": 1076,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					9,
					1,
					"insert",
					{
						"characters": " +"
					},
					"AgAAALQBAAAAAAAAtQEAAAAAAAAAAAAAtQEAAAAAAAC2AQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAEAAAAAAAC0AQAAAAAAAAAAAAAAAPC/"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAALYBAAAAAAAAtwEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtgEAAAAAAAC2AQAAAAAAAAAAAAAAAPC/"
				],
				[
					11,
					2,
					"delete_word",
					{
						"forward": false
					},
					"AgAAALUBAAAAAAAAtQEAAAAAAAACAAAAKyCtAQAAAAAAAK0BAAAAAAAACAAAAF9PYmplY3Qg",
					"AQAAAAAAAAABAAAAtwEAAAAAAAC3AQAAAAAAAAAAAAAAAPC/"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": "Iter"
					},
					"BAAAAK0BAAAAAAAArgEAAAAAAAAAAAAArgEAAAAAAACvAQAAAAAAAAAAAACvAQAAAAAAALABAAAAAAAAAAAAALABAAAAAAAAsQEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAArQEAAAAAAACtAQAAAAAAAAAAAAAAAPC/"
				],
				[
					13,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"insertTextFormat\":2,\"filterText\":\"Iter\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"Iter<â€¦> (use std::collections::btree_map::Iter)\",\"data\":{\"imports\":[{\"full_import_path\":\"std::collections::btree_map::Iter\",\"imported_name\":\"Iter\"}],\"position\":{\"position\":{\"character\":18,\"line\":27},\"textDocument\":{\"uri\":\"file:///home/alexzander/Alexzander__/programming/rust/python/src/builtins.rs\"}}},\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"Iter<$0>\",\"range\":{\"end\":{\"character\":18,\"line\":27},\"start\":{\"character\":14,\"line\":27}}},\"documentation\":{\"value\":\"An iterator over the entries of a `BTreeMap`.\\n\\nThis `struct` is created by the [`iter`] method on [`BTreeMap`]. See its\\ndocumentation for more.\\n\\n[`iter`]: BTreeMap::iter\",\"kind\":\"markdown\"},\"kind\":22},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							7,
							12,
							4
						],
						"trigger": "Iter"
					},
					"AgAAAK0BAAAAAAAArQEAAAAAAAAEAAAASXRlcq0BAAAAAAAAswEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsQEAAAAAAACxAQAAAAAAAAAAAAAAAPC/"
				],
				[
					14,
					1,
					"lsp_apply_document_edit",
					{
						"changes":
						[
							[
								[
									0,
									0
								],
								[
									0,
									0
								],
								"use std::collections::btree_map::Iter;",
								null
							],
							[
								[
									0,
									0
								],
								[
									0,
									0
								],
								"\n",
								null
							]
						]
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAmAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAsgEAAAAAAACyAQAAAAAAAAAAAAAAAPC/"
				],
				[
					15,
					1,
					"left_delete",
					null,
					"AQAAANgBAAAAAAAA2AEAAAAAAAABAAAAPA",
					"AQAAAAAAAAABAAAA2QEAAAAAAADZAQAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "a"
					},
					"AQAAANgBAAAAAAAA2QEAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2AEAAAAAAADYAQAAAAAAAAAAAAAAAPC/"
				],
				[
					17,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"filterText\":\"Iterable\",\"additionalTextEdits\":[],\"deprecated\":false,\"label\":\"Iterable\",\"sortText\":\"fffffffd\",\"textEdit\":{\"newText\":\"Iterable\",\"range\":{\"end\":{\"character\":19,\"line\":28},\"start\":{\"character\":14,\"line\":28}}},\"documentation\":{\"value\":\"implement iterable for List for example\\ni need this to use with max min builtins\",\"kind\":\"markdown\"},\"kind\":8},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							11,
							16,
							1
						],
						"trigger": "Iterable"
					},
					"AgAAANQBAAAAAAAA1AEAAAAAAAAFAAAASXRlcmHUAQAAAAAAANwBAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAA2QEAAAAAAADZAQAAAAAAAAAAAAAAAPC/"
				],
				[
					20,
					1,
					"right_delete",
					null,
					"AQAAANwBAAAAAAAA3AEAAAAAAAABAAAAPg",
					"AQAAAAAAAAABAAAA3AEAAAAAAADcAQAAAAAAAAAAAAAA4HFA"
				],
				[
					29,
					1,
					"cut",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAnAAAAdXNlIHN0ZDo6Y29sbGVjdGlvbnM6OmJ0cmVlX21hcDo6SXRlcjsK",
					"AQAAAAAAAAABAAAAJgAAAAAAAAAmAAAAAAAAAAAAAAAAAPC/"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AgAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					60,
					1,
					"insert",
					{
						"characters": "&"
					},
					"AQAAAMQAAAAAAAAAxQAAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAxAAAAAAAAADEAAAAAAAAAAAAAAAAAPC/"
				],
				[
					78,
					1,
					"right_delete",
					null,
					"AQAAAMQAAAAAAAAAxAAAAAAAAAABAAAAJg",
					"AQAAAAAAAAABAAAAxAAAAAAAAADEAAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/iterable.rs",
			"settings":
			{
				"buffer_size": 238,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					7,
					1,
					"left_delete",
					null,
					"AQAAAGsAAAAAAAAAawAAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABsAAAAAAAAAGwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					1,
					"insert",
					{
						"characters": ":"
					},
					"AQAAAGsAAAAAAAAAbAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABrAAAAAAAAAGsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					13,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAAAAAAAAAAAAAQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					15,
					1,
					"insert",
					{
						"characters": "\nuse"
					},
					"BAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAABAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": " create"
					},
					"BwAAAAQAAAAAAAAABQAAAAAAAAAAAAAABQAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAcAAAAAAAAAAAAAAAcAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAACwAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					4,
					"left_delete",
					null,
					"BAAAAAoAAAAAAAAACgAAAAAAAAABAAAAZQkAAAAAAAAACQAAAAAAAAABAAAAdAgAAAAAAAAACAAAAAAAAAABAAAAYQcAAAAAAAAABwAAAAAAAAABAAAAZQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALAAAAAAAAAAsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "ate::O"
					},
					"BgAAAAcAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAACwAAAAAAAAAAAAAACwAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAAAAA0AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAHAAAAAAAAAAcAAAAAAAAAAAAAAAAA8L8"
				],
				[
					19,
					1,
					"left_delete",
					null,
					"AQAAAAwAAAAAAAAADAAAAAAAAAABAAAATw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANAAAAAAAAAA0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": "_+"
					},
					"AgAAAAwAAAAAAAAADQAAAAAAAAAAAAAADQAAAAAAAAAOAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAMAAAAAAAAAAwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"left_delete",
					null,
					"AQAAAA0AAAAAAAAADQAAAAAAAAABAAAAKw",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOAAAAAAAAAA4AAAAAAAAAAAAAAAAA8L8"
				],
				[
					22,
					1,
					"insert",
					{
						"characters": "Ob"
					},
					"AgAAAA0AAAAAAAAADgAAAAAAAAAAAAAADgAAAAAAAAAPAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAANAAAAAAAAAA0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"additionalTextEdits\":[],\"textEdit\":{\"range\":{\"end\":{\"character\":14,\"line\":1},\"start\":{\"character\":11,\"line\":1}},\"newText\":\"_Object\"},\"kind\":8,\"label\":\"_Object\",\"sortText\":\"fffffffd\",\"deprecated\":false,\"documentation\":{\"kind\":\"markdown\",\"value\":\"the supreme _Object trait\\nthat its derived types should\\nimplement like all the __functions__ from python\"},\"filterText\":\"_Object\"},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							16,
							22,
							2
						],
						"trigger": "_Object"
					},
					"AgAAAAwAAAAAAAAADAAAAAAAAAADAAAAX09iDAAAAAAAAAATAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAPAAAAAAAAAA8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": ";"
					},
					"AQAAABMAAAAAAAAAFAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAATAAAAAAAAABMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					30,
					1,
					"insert",
					{
						"characters": " _IOb"
					},
					"BQAAAIIAAAAAAAAAgwAAAAAAAAAAAAAAgwAAAAAAAACEAAAAAAAAAAAAAACEAAAAAAAAAIUAAAAAAAAAAAAAAIUAAAAAAAAAhgAAAAAAAAAAAAAAhgAAAAAAAACHAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACCAAAAAAAAAIIAAAAAAAAAAAAAAADgbkA"
				],
				[
					31,
					3,
					"left_delete",
					null,
					"AwAAAIYAAAAAAAAAhgAAAAAAAAABAAAAYoUAAAAAAAAAhQAAAAAAAAABAAAAT4QAAAAAAAAAhAAAAAAAAAABAAAASQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACHAAAAAAAAAIcAAAAAAAAAAAAAAAAA8L8"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "Ob"
					},
					"AgAAAIQAAAAAAAAAhQAAAAAAAAAAAAAAhQAAAAAAAACGAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACEAAAAAAAAAIQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"additionalTextEdits\":[],\"textEdit\":{\"range\":{\"end\":{\"character\":23,\"line\":5},\"start\":{\"character\":20,\"line\":5}},\"newText\":\"_Object\"},\"kind\":8,\"label\":\"_Object\",\"sortText\":\"fffffffd\",\"deprecated\":false,\"documentation\":{\"kind\":\"markdown\",\"value\":\"the supreme _Object trait\\nthat its derived types should\\nimplement like all the __functions__ from python\"},\"filterText\":\"_Object\"},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							22,
							32,
							2
						],
						"trigger": "_Object"
					},
					"AgAAAIMAAAAAAAAAgwAAAAAAAAADAAAAX09igwAAAAAAAACKAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACGAAAAAAAAAIYAAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAIoAAAAAAAAAiwAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKAAAAAAAAAIoAAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Add Line in Braces.sublime-macro"
					},
					"AwAAAIwAAAAAAAAAjQAAAAAAAAAAAAAAjQAAAAAAAACOAAAAAAAAAAAAAACNAAAAAAAAAJEAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMAAAAAAAAAIwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					66,
					1,
					"insert",
					{
						"characters": "\tfn"
					},
					"AwAAAI0AAAAAAAAAkQAAAAAAAAAAAAAAkQAAAAAAAACSAAAAAAAAAAAAAACSAAAAAAAAAJMAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACNAAAAAAAAAI0AAAAAAAAAAAAAAAAAAAA"
				],
				[
					67,
					1,
					"insert",
					{
						"characters": " __len__"
					},
					"CAAAAJMAAAAAAAAAlAAAAAAAAAAAAAAAlAAAAAAAAACVAAAAAAAAAAAAAACVAAAAAAAAAJYAAAAAAAAAAAAAAJYAAAAAAAAAlwAAAAAAAAAAAAAAlwAAAAAAAACYAAAAAAAAAAAAAACYAAAAAAAAAJkAAAAAAAAAAAAAAJkAAAAAAAAAmgAAAAAAAAAAAAAAmgAAAAAAAACbAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACTAAAAAAAAAJMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					68,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAJsAAAAAAAAAnQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACbAAAAAAAAAJsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					69,
					1,
					"insert",
					{
						"characters": "&self"
					},
					"BQAAAJwAAAAAAAAAnQAAAAAAAAAAAAAAnQAAAAAAAACeAAAAAAAAAAAAAACeAAAAAAAAAJ8AAAAAAAAAAAAAAJ8AAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAAChAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACcAAAAAAAAAJwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					70,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKEAAAAAAAAAowAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChAAAAAAAAAKEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					71,
					1,
					"run_macro_file",
					{
						"file": "res://Packages/Default/Delete Left Right.sublime-macro"
					},
					"AgAAAKEAAAAAAAAAoQAAAAAAAAABAAAAKKEAAAAAAAAAoQAAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiAAAAAAAAAKIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					72,
					1,
					"left_delete",
					null,
					"AQAAAKAAAAAAAAAAoAAAAAAAAAABAAAAZg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChAAAAAAAAAKEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					74,
					1,
					"left_delete",
					null,
					"AQAAAKAAAAAAAAAAoAAAAAAAAAABAAAAKQ",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAChAAAAAAAAAKEAAAAAAAAAAAAAAAAA8L8"
				],
				[
					75,
					1,
					"insert",
					{
						"characters": "f)"
					},
					"AgAAAKAAAAAAAAAAoQAAAAAAAAAAAAAAoQAAAAAAAACiAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACgAAAAAAAAAKAAAAAAAAAAAAAAAAAA8L8"
				],
				[
					76,
					1,
					"insert",
					{
						"characters": " ->"
					},
					"AwAAAKIAAAAAAAAAowAAAAAAAAAAAAAAowAAAAAAAACkAAAAAAAAAAAAAACkAAAAAAAAAKUAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACiAAAAAAAAAKIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": " usize;"
					},
					"BwAAAKUAAAAAAAAApgAAAAAAAAAAAAAApgAAAAAAAACnAAAAAAAAAAAAAACnAAAAAAAAAKgAAAAAAAAAAAAAAKgAAAAAAAAAqQAAAAAAAAAAAAAAqQAAAAAAAACqAAAAAAAAAAAAAACqAAAAAAAAAKsAAAAAAAAAAAAAAKsAAAAAAAAArAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClAAAAAAAAAKUAAAAAAAAAAAAAAAAA8L8"
				],
				[
					79,
					1,
					"trim_trailing_white_space",
					null,
					"AQAAAKwAAAAAAAAArAAAAAAAAAAEAAAAICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACsAAAAAAAAAKwAAAAAAAAAAAAAAAAA8L8"
				],
				[
					99,
					1,
					"insert",
					{
						"characters": "\n///"
					},
					"BQAAAIwAAAAAAAAAjQAAAAAAAAAAAAAAjQAAAAAAAACRAAAAAAAAAAAAAACRAAAAAAAAAJIAAAAAAAAAAAAAAJIAAAAAAAAAkwAAAAAAAAAAAAAAkwAAAAAAAACUAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACMAAAAAAAAAIwAAAAAAAAA////////738"
				],
				[
					100,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAJQAAAAAAAAAlQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACUAAAAAAAAAJQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					106,
					1,
					"insert",
					{
						"characters": "return"
					},
					"BgAAAJUAAAAAAAAAlgAAAAAAAAAAAAAAlgAAAAAAAACXAAAAAAAAAAAAAACXAAAAAAAAAJgAAAAAAAAAAAAAAJgAAAAAAAAAmQAAAAAAAAAAAAAAmQAAAAAAAACaAAAAAAAAAAAAAACaAAAAAAAAAJsAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACVAAAAAAAAAJUAAAAAAAAAAAAAAAAA8L8"
				],
				[
					107,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAJsAAAAAAAAAnAAAAAAAAAAAAAAAnAAAAAAAAACdAAAAAAAAAAAAAACdAAAAAAAAAJ4AAAAAAAAAAAAAAJ4AAAAAAAAAnwAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACbAAAAAAAAAJsAAAAAAAAAAAAAAAAA8L8"
				],
				[
					108,
					1,
					"insert",
					{
						"characters": " lenth"
					},
					"BgAAAJ8AAAAAAAAAoAAAAAAAAAAAAAAAoAAAAAAAAAChAAAAAAAAAAAAAAChAAAAAAAAAKIAAAAAAAAAAAAAAKIAAAAAAAAAowAAAAAAAAAAAAAAowAAAAAAAACkAAAAAAAAAAAAAACkAAAAAAAAAKUAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACfAAAAAAAAAJ8AAAAAAAAAAAAAAAAA8L8"
				],
				[
					109,
					2,
					"left_delete",
					null,
					"AgAAAKQAAAAAAAAApAAAAAAAAAABAAAAaKMAAAAAAAAAowAAAAAAAAABAAAAdA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClAAAAAAAAAKUAAAAAAAAAAAAAAAAA8L8"
				],
				[
					110,
					1,
					"insert",
					{
						"characters": "gh"
					},
					"AgAAAKMAAAAAAAAApAAAAAAAAAAAAAAApAAAAAAAAAClAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACjAAAAAAAAAKMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					111,
					1,
					"left_delete",
					null,
					"AQAAAKQAAAAAAAAApAAAAAAAAAABAAAAaA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClAAAAAAAAAKUAAAAAAAAAAAAAAAAA8L8"
				],
				[
					112,
					1,
					"insert",
					{
						"characters": "th"
					},
					"AgAAAKQAAAAAAAAApQAAAAAAAAAAAAAApQAAAAAAAACmAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACkAAAAAAAAAKQAAAAAAAAAAAAAAAAA8L8"
				],
				[
					113,
					1,
					"insert",
					{
						"characters": " o"
					},
					"AgAAAKYAAAAAAAAApwAAAAAAAAAAAAAApwAAAAAAAACoAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmAAAAAAAAAKYAAAAAAAAAAAAAAAAA8L8"
				],
				[
					114,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAKgAAAAAAAAAqQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoAAAAAAAAAKgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					115,
					1,
					"left_delete",
					null,
					"AQAAAKgAAAAAAAAAqAAAAAAAAAABAAAAIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpAAAAAAAAAKkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					116,
					1,
					"insert",
					{
						"characters": "f"
					},
					"AQAAAKgAAAAAAAAAqQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoAAAAAAAAAKgAAAAAAAAAAAAAAAAA8L8"
				],
				[
					117,
					1,
					"insert",
					{
						"characters": " the"
					},
					"BAAAAKkAAAAAAAAAqgAAAAAAAAAAAAAAqgAAAAAAAACrAAAAAAAAAAAAAACrAAAAAAAAAKwAAAAAAAAAAAAAAKwAAAAAAAAArQAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACpAAAAAAAAAKkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					118,
					1,
					"insert",
					{
						"characters": " collection"
					},
					"CwAAAK0AAAAAAAAArgAAAAAAAAAAAAAArgAAAAAAAACvAAAAAAAAAAAAAACvAAAAAAAAALAAAAAAAAAAAAAAALAAAAAAAAAAsQAAAAAAAAAAAAAAsQAAAAAAAACyAAAAAAAAAAAAAACyAAAAAAAAALMAAAAAAAAAAAAAALMAAAAAAAAAtAAAAAAAAAAAAAAAtAAAAAAAAAC1AAAAAAAAAAAAAAC1AAAAAAAAALYAAAAAAAAAAAAAALYAAAAAAAAAtwAAAAAAAAAAAAAAtwAAAAAAAAC4AAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtAAAAAAAAAK0AAAAAAAAAAAAAAAAA8L8"
				],
				[
					127,
					1,
					"insert",
					{
						"characters": "/container."
					},
					"CwAAALgAAAAAAAAAuQAAAAAAAAAAAAAAuQAAAAAAAAC6AAAAAAAAAAAAAAC6AAAAAAAAALsAAAAAAAAAAAAAALsAAAAAAAAAvAAAAAAAAAAAAAAAvAAAAAAAAAC9AAAAAAAAAAAAAAC9AAAAAAAAAL4AAAAAAAAAAAAAAL4AAAAAAAAAvwAAAAAAAAAAAAAAvwAAAAAAAADAAAAAAAAAAAAAAADAAAAAAAAAAMEAAAAAAAAAAAAAAMEAAAAAAAAAwgAAAAAAAAAAAAAAwgAAAAAAAADDAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC4AAAAAAAAALgAAAAAAAAAAAAAAAB4gUA"
				],
				[
					128,
					1,
					"left_delete",
					null,
					"AQAAAMIAAAAAAAAAwgAAAAAAAAABAAAALg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADDAAAAAAAAAMMAAAAAAAAAAAAAAAAA8L8"
				],
				[
					129,
					1,
					"insert",
					{
						"characters": "/iterable"
					},
					"CQAAAMIAAAAAAAAAwwAAAAAAAAAAAAAAwwAAAAAAAADEAAAAAAAAAAAAAADEAAAAAAAAAMUAAAAAAAAAAAAAAMUAAAAAAAAAxgAAAAAAAAAAAAAAxgAAAAAAAADHAAAAAAAAAAAAAADHAAAAAAAAAMgAAAAAAAAAAAAAAMgAAAAAAAAAyQAAAAAAAAAAAAAAyQAAAAAAAADKAAAAAAAAAAAAAADKAAAAAAAAAMsAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADCAAAAAAAAAMIAAAAAAAAAAAAAAAAA8L8"
				],
				[
					143,
					1,
					"revert",
					null,
					"AwAAAAAAAAAAAAAAAAAAAAAAAADuAAAACnVzZSBjcmF0ZTo6X09iamVjdDsKCi8vLyBpbXBsZW1lbnQgaXRlcmFibGUgZm9yIExpc3QgZm9yIGV4YW1wbGUKLy8vIGkgbmVlZCB0aGlzIHRvIHVzZSB3aXRoIG1heCBtaW4gYnVpbHRpbnMKcHViIHRyYWl0IEl0ZXJhYmxlOiBfT2JqZWN0IHsKICAgIC8vLyByZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgY29sbGVjdGlvbi9jb250YWluZXIvaXRlcmFibGUKICAgIGZuIF9fbGVuX18oJnNlbGYpIC0+IHVzaXplOwp9CgAAAAAAAAAA7gAAAAAAAAAAAAAAAAAAAAAAAADuAAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuAAAAAAAAAO4AAAAAAAAAAAAAAAAA8L8"
				]
			]
		},
		{
			"file": "src/list/list.rs",
			"settings":
			{
				"buffer_size": 9098,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					23,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAALoEAAAAAAAAuwQAAAAAAAAAAAAAuwQAAAAAAAC/BAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC6BAAAAAAAALoEAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"right_delete",
					null,
					"AgAAALMEAAAAAAAAswQAAAAAAAABAAAAJroEAAAAAAAAugQAAAAAAAAEAAAAICAgIA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzBAAAAAAAALMEAAAAAAAAAAAAAAAA8L8"
				],
				[
					34,
					1,
					"reindent",
					null,
					"AQAAALoEAAAAAAAAvgQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC6BAAAAAAAALoEAAAAAAAAAAAAAABAbUA"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "fn"
					},
					"AgAAAL4EAAAAAAAAvwQAAAAAAAAAAAAAvwQAAAAAAADABAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC+BAAAAAAAAL4EAAAAAAAAAAAAAAAA8L8"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAMAEAAAAAAAAwQQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADABAAAAAAAAMAEAAAAAAAAAAAAAAAA8L8"
				],
				[
					37,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"additionalTextEdits\":[],\"textEdit\":{\"range\":{\"end\":{\"character\":7,\"line\":64},\"start\":{\"character\":4,\"line\":64}},\"newText\":\"fn __len__(&self) -> usize {\\n    $0\\n}\"},\"kind\":2,\"label\":\"fn __len__(..)\",\"sortText\":\"fffffffd\",\"deprecated\":false,\"insertTextFormat\":2,\"filterText\":\"__len__\"},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": true,
						"query_change_id":
						[
							11,
							36,
							1
						],
						"trigger": "__len__"
					},
					"AgAAAL4EAAAAAAAAvgQAAAAAAAADAAAAZm4gvgQAAAAAAADpBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADBBAAAAAAAAMEEAAAAAAAAAAAAAAAA8L8"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": "self._"
					},
					"BgAAAOMEAAAAAAAA5AQAAAAAAAAAAAAA5AQAAAAAAADlBAAAAAAAAAAAAADlBAAAAAAAAOYEAAAAAAAAAAAAAOYEAAAAAAAA5wQAAAAAAAAAAAAA5wQAAAAAAADoBAAAAAAAAAAAAADoBAAAAAAAAOkEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADjBAAAAAAAAOMEAAAAAAAAAAAAAAAA8L8"
				],
				[
					40,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"additionalTextEdits\":[],\"textEdit\":{\"range\":{\"end\":{\"character\":14,\"line\":65},\"start\":{\"character\":13,\"line\":65}},\"newText\":\"_list\"},\"kind\":5,\"filterText\":\"_list\",\"label\":\"_list\",\"documentation\":{\"kind\":\"markdown\",\"value\":\"_list which holds all the python objects together\"},\"deprecated\":false,\"sortText\":\"fffffffd\",\"detail\":\"VecDeque<Object, Global>\"},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							13,
							38,
							6
						],
						"trigger": "_list"
					},
					"AgAAAOgEAAAAAAAA6AQAAAAAAAABAAAAX+gEAAAAAAAA7QQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpBAAAAAAAAOkEAAAAAAAAAAAAAAAA8L8"
				],
				[
					41,
					1,
					"insert",
					{
						"characters": ".le"
					},
					"AwAAAO0EAAAAAAAA7gQAAAAAAAAAAAAA7gQAAAAAAADvBAAAAAAAAAAAAADvBAAAAAAAAPAEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtBAAAAAAAAO0EAAAAAAAAAAAAAAAA8L8"
				],
				[
					42,
					1,
					"insert_completion",
					{
						"completion": "lsp_select_completion_item {\"item\":{\"additionalTextEdits\":[],\"textEdit\":{\"range\":{\"end\":{\"character\":21,\"line\":65},\"start\":{\"character\":19,\"line\":65}},\"newText\":\"len()$0\"},\"kind\":2,\"preselect\":true,\"label\":\"len()\",\"documentation\":{\"kind\":\"markdown\",\"value\":\"Returns the number of elements in the `VecDeque`.\\n\\n# Examples\\n\\n```rust\\nuse std::collections::VecDeque;\\n\\nlet mut v = VecDeque::new();\\nassert_eq!(v.len(), 0);\\nv.push_back(1);\\nassert_eq!(v.len(), 1);\\n```\"},\"deprecated\":false,\"insertTextFormat\":2,\"filterText\":\"len\",\"sortText\":\"fffffffa\",\"detail\":\"fn(&self) -> usize\"},\"session_name\":\"rust-analyzer\"}",
						"format": "command",
						"keep_prefix": true,
						"must_insert": false,
						"query_change_id":
						[
							15,
							41,
							3
						],
						"trigger": "len"
					},
					"AgAAAO4EAAAAAAAA7gQAAAAAAAACAAAAbGXuBAAAAAAAAPMEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwBAAAAAAAAPAEAAAAAAAAAAAAAAAA8L8"
				],
				[
					53,
					1,
					"revert",
					null,
					"",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5BAAAAAAAALkEAAAAAAAAAAAAAACAc0A"
				],
				[
					24,
					1,
					"cut",
					null,
					"AQAAAM4JAAAAAAAAzgkAAAAAAABAAAAAICAgIGZuIF9fbGVuX18oJnNlbGYpIC0+IHVzaXplIHsKICAgICAgICBzZWxmLl9saXN0LmxlbigpCiAgICB9Cg",
					"AQAAAAAAAAABAAAADgoAAAAAAADOCQAAAAAAAAAAAAAAAPC/"
				],
				[
					25,
					1,
					"left_delete",
					null,
					"AQAAAM0JAAAAAAAAzQkAAAAAAAABAAAACg",
					"AQAAAAAAAAABAAAAzgkAAAAAAADOCQAAAAAAAAAAAAAAAPC/"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": "\nimpl"
					},
					"BQAAALQJAAAAAAAAtQkAAAAAAAAAAAAAtQkAAAAAAAC2CQAAAAAAAAAAAAC2CQAAAAAAALcJAAAAAAAAAAAAALcJAAAAAAAAuAkAAAAAAAAAAAAAuAkAAAAAAAC5CQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAtAkAAAAAAAC0CQAAAAAAAAAAAAAAAAAA"
				],
				[
					34,
					1,
					"delete_word",
					{
						"forward": false
					},
					"AQAAALUJAAAAAAAAtQkAAAAAAAAEAAAAaW1wbA",
					"AQAAAAAAAAABAAAAuQkAAAAAAAC5CQAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				],
				[
					"Packages/User/run_python.sublime-build",
					""
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					""
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Automatic"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Run"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Run (with args)..."
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Check"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Test"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Test (with args)..."
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Bench"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Clean"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Document"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Clippy"
				],
				[
					"Packages/Rust Enhanced/RustEnhanced.sublime-build",
					"Script"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				]
			],
			[
				"Packages/Rust Enhanced/RustEnhanced.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/Rust/Cargo.sublime-build",
					""
				],
				[
					"Packages/Rust/Cargo.sublime-build",
					"Run"
				],
				[
					"Packages/Rust/Cargo.sublime-build",
					"Test"
				],
				[
					"Packages/Rust/Cargo.sublime-build",
					"Bench"
				],
				[
					"Packages/Rust/Cargo.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/R/R.sublime-build",
					""
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				]
			],
			[
				"Packages/R/R.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/ShellScript/ShellScript.sublime-build",
					""
				],
				[
					"Packages/MarkdownPreview/Markdown.sublime-build",
					""
				]
			],
			[
				"Packages/MarkdownPreview/Markdown.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"clos",
				"File: Close All"
			],
			[
				"rust",
				"Set Syntax: Rust Enhanced"
			],
			[
				"rust an",
				"Set Syntax: Rust-Andrew"
			],
			[
				"rust andrew",
				"Set Syntax: Rust-Andrew"
			],
			[
				"lsp py",
				"Preferences: LSP-pyright Settings"
			],
			[
				"rust en",
				"Set Syntax: Rust Enhanced"
			],
			[
				"close",
				"File: Close All"
			],
			[
				"cvlo",
				"Convert Case: Lower Case"
			],
			[
				"tom",
				"Set Syntax: TOML"
			],
			[
				"apply",
				"ApplySyntax: Copy Current Syntax to Clipboard"
			],
			[
				"appl",
				"ApplySyntax: Documentation"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"andr",
				"Set Syntax: Rust-Andrew"
			],
			[
				"rust ",
				"Set Syntax: Rust Enhanced"
			],
			[
				"rust en pre",
				"Preferences: Rust Enhanced Settings"
			],
			[
				"rust test",
				"Set Syntax: Rust-Test"
			],
			[
				"set syn rust",
				"Set Syntax: Rust-Test"
			],
			[
				"toml",
				"Set Syntax: TOML"
			],
			[
				"breakpoint",
				"Debugger: Add Function Breakpoint"
			],
			[
				"set run",
				"Set Syntax: Rust Enhanced"
			],
			[
				"pre rust",
				"Preferences: LSP-rust-analyzer Settings"
			],
			[
				"set syn ru",
				"Set Syntax: Rust Enhanced"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"pres rust",
				"Preferences: LSP-rust-analyzer Settings"
			],
			[
				"rust-ana pre",
				"Preferences: LSP-rust-analyzer Settings"
			],
			[
				"edit",
				"BetterSnippetManager: Edit Snippets"
			],
			[
				"better",
				"BetterSnippetManager: Edit Snippets"
			],
			[
				"snippet maa",
				"BetterSnippetManager: Edit Snippets"
			],
			[
				"mak",
				"Set Syntax: Makefile"
			],
			[
				"set make",
				"Set Syntax: Makefile Plus"
			],
			[
				"ui sel",
				"UI: Select Color Scheme"
			],
			[
				"us",
				"UI: Select Color Scheme"
			],
			[
				"color",
				"UI: Select Color Scheme"
			],
			[
				"cy",
				"Set Syntax: Cython"
			],
			[
				"python",
				"Set Syntax: Python"
			],
			[
				"pyt",
				"SublimeREPL: Python"
			],
			[
				"set cytho",
				"Set Syntax: Cython"
			],
			[
				"set mark",
				"Set Syntax: Markdown"
			],
			[
				"conver",
				"Indentation: Convert to Spaces"
			],
			[
				"clo",
				"File: Close All"
			],
			[
				"set mar",
				"Set Syntax: Markdown"
			],
			[
				"color scheme",
				"UI: Select Color Scheme"
			],
			[
				"project",
				"LSP: Enable Language Server in Project"
			],
			[
				"lsp R",
				"Preferences: LSP-R Settings"
			],
			[
				"outline",
				"Outline: Toggle Sort"
			],
			[
				"lsp",
				"LSP: Restart Server"
			],
			[
				"lspre",
				"LSP: Restart Server"
			],
			[
				"lsp restar",
				"LSP: Restart Server"
			],
			[
				"autosplit",
				"Autosplit: Join argument list"
			],
			[
				"origami",
				"Preferences: Origami Key Bindings"
			],
			[
				" ori des",
				"Origami: Destroy Current Pane"
			],
			[
				"origami ",
				"Preferences: Origami Settings"
			],
			[
				"orign de",
				"Origami: Destroy Current Pane"
			],
			[
				"origami focus",
				"Origami: Focus on Pane on the Right"
			],
			[
				"origamicreate",
				"Origami: Create Pane on the Right"
			],
			[
				"package insta",
				"Package Control: Install Package"
			],
			[
				"lsp rest",
				"LSP: Restart Server"
			],
			[
				"lsp resta",
				"LSP: Restart Server"
			],
			[
				"lsp re",
				"LSP: Find References"
			],
			[
				"pres auto",
				"Preferences: AutoPep8 Settings â€“ User"
			],
			[
				"djan",
				"Set Syntax: Django HTML"
			],
			[
				"jin",
				"Set Syntax: HTML (Jinja2)"
			],
			[
				"djang",
				"Set Syntax: Django HTML"
			],
			[
				"git dif",
				"Git: Diff Current File"
			],
			[
				"html djan",
				"Set Syntax: Django HTML"
			],
			[
				"lsp ",
				"LSP: Troubleshoot Server"
			],
			[
				"ls",
				"LSP: Restart Server"
			],
			[
				"remove pack",
				"Package Control: Remove Package"
			],
			[
				"prefer setting",
				"Preferences: Settings"
			],
			[
				"git bla",
				"Git: Blame"
			],
			[
				"git",
				"Git: Gui"
			],
			[
				"commit",
				"Git: Commit history"
			],
			[
				"git com",
				"Git: Commit"
			],
			[
				"gits",
				"Git: Diff Current File (Ignore Whitespace)"
			],
			[
				"gitig",
				"Gitignore: New gitignore"
			],
			[
				"insert",
				"Gitmoji: Insert emoji"
			],
			[
				"gio",
				"Gitmoji: Insert emoji"
			],
			[
				"docker",
				"Set Syntax: Dockerfile"
			],
			[
				"set docker",
				"Set Syntax: Dockerfile"
			],
			[
				"convert",
				"Indentation: Convert to Spaces"
			],
			[
				"conver ",
				"Indentation: Convert to Spaces"
			],
			[
				"set html",
				"Set Syntax: HTML"
			],
			[
				"django",
				"Set Syntax: Django HTML"
			],
			[
				"set syn d",
				"Set Syntax: Django HTML"
			],
			[
				"set djano",
				"Set Syntax: Django HTML"
			],
			[
				"set syn djan",
				"Set Syntax: Django HTML"
			],
			[
				"set synt dj",
				"Set Syntax: Django HTML"
			],
			[
				"lspre ",
				"LSP: Rename"
			],
			[
				"book",
				"Bookmarks: Select Next"
			],
			[
				"bok",
				"Bookmarks: Toggle"
			],
			[
				"bo",
				"Bookmarks: Toggle"
			],
			[
				"Snippet: ",
				"BetterSnippetManager: Edit Snippets"
			],
			[
				"isntal",
				"Package Control: Install Package"
			],
			[
				"helk",
				"Helium: List Kernels"
			],
			[
				"repl py",
				"SublimeREPL: Python"
			],
			[
				"termin",
				"Terminus: List Shells"
			],
			[
				"ter",
				"Terminal: Open"
			],
			[
				"termianl",
				"Terminal View: Open Bash Terminal"
			],
			[
				"terminalview",
				"Preferences: Terminal View: Color Scheme"
			],
			[
				"terminalv",
				"Terminal View: Open Bash Terminal"
			],
			[
				"terminal",
				"Terminality: Browse Commands..."
			],
			[
				"termina",
				"Terminality: Browse Commands..."
			],
			[
				"termius",
				"Terminus: Toggle Panel"
			],
			[
				"termi",
				"Terminus Utilities: Select Theme"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"edi",
				"BetterSnippetManager: Edit Snippets"
			],
			[
				"todo",
				"TodoReview: Open Files"
			],
			[
				"highg",
				"HighlightWords: Highlight Words"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"set syn py",
				"Set Syntax: Python"
			],
			[
				"yto",
				"Set Syntax: Todo"
			],
			[
				"lsp restart",
				"LSP: Restart Server"
			],
			[
				"synax jin",
				"Set Syntax: HTML (Jinja2)"
			],
			[
				"isnta",
				"Package Control: Install Package"
			],
			[
				"ui ch",
				"UI: Select Color Scheme"
			],
			[
				"res",
				"LSP: Restart Server"
			],
			[
				"stop",
				"Live Server: Stop"
			],
			[
				"live",
				"Live Server: Open In Browser"
			],
			[
				"start",
				"Live Server: Start"
			],
			[
				"sto",
				"Live Server: Stop"
			],
			[
				"prefer live",
				"Preferences: Live Server Settings"
			],
			[
				"live server",
				"Live Server: Open In Browser"
			],
			[
				"li",
				"Live Server: Stop"
			],
			[
				"restart",
				"LSP: Restart Server"
			],
			[
				"ui ",
				"UI: Select Theme"
			],
			[
				"lsp refere",
				"LSP: Find References"
			],
			[
				"isntall",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 184.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/alexzander/Alexzander__/programming/rust/python",
		"/home/alexzander/Alexzander__/programming/rust/python/.github",
		"/home/alexzander/Alexzander__/programming/rust/python/benches",
		"/home/alexzander/Alexzander__/programming/rust/python/examples",
		"/home/alexzander/Alexzander__/programming/rust/python/src",
		"/home/alexzander/Alexzander__/programming/rust/python/src/list",
		"/home/alexzander/Alexzander__/programming/rust/python/tests",
		"/home/alexzander/Alexzander__/programming/rust/python/workflows"
	],
	"file_history":
	[
		"/home/alexzander/Alexzander__/programming/rust/python/examples/python_list/extend.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/examples/python_list/main.rs",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/collections/vec_deque/mod.rs",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/cmp.rs",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/macros/mod.rs",
		"/home/alexzander/.cargo/registry/src/github.com-1ecc6299db9ec823/pretty_assertions-1.1.0/src/lib.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/src/string.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/src/character.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/src/builtins.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/src/boolean.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/src/list/list.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/src/object.rs",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/str/iter.rs",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/default.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/src/float.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/src/list/append_front.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/rustfmt.toml",
		"/home/alexzander/Alexzander__/programming/rust/python/src/lib.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/Cargo.toml",
		"/home/alexzander/Alexzander__/programming/rust/python/src/list/append.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/src/integer.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/examples/integer_example.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/changelog/0.0.6.md",
		"/home/alexzander/Alexzander__/programming/rust/python/Makefile",
		"/home/alexzander/Alexzander__/programming/rust/python/examples/object_trait.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/examples/python_list.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/examples/builtins.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/TODO.md",
		"/home/alexzander/Alexzander__/programming/rust/python/src/iterable.rs",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/string.rs",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/num/shells/usize.rs",
		"/home/alexzander/.config/sublime-text/Packages/User/Rust-Test.sublime-syntax",
		"/home/alexzander/Alexzander__/programming/rust/python/target/debug/examples/python_list-947daf0aa3c7c5c1.s",
		"/home/alexzander/Alexzander__/programming/rust/python/target/release/examples/python_list-cd1a9d11c68116eb.s",
		"/home/alexzander/Alexzander__/programming/rust/python/target/release/examples/python_list-b52973a3a6f41acc.s",
		"/home/alexzander/Alexzander__/programming/rust/python/target/release/build/backtrace-63c6f977497125e3/build_script_build-63c6f977497125e3.s",
		"/home/alexzander/.config/rustfmt/rustfmt.toml",
		"/home/alexzander/Alexzander__/programming/rust/python/README.md",
		"/home/alexzander/Alexzander__/programming/rust/python/book/book.toml",
		"/home/alexzander/Alexzander__/programming/rust/python/workflows/CI.yaml",
		"/home/alexzander/Alexzander__/programming/rust/python/changelog/0.0.5.md",
		"/home/alexzander/Alexzander__/programming/rust/python/changelog/CHANGELOG.md",
		"/home/alexzander/Alexzander__/programming/rust/python/book/.gitignore",
		"/home/alexzander/Alexzander__/programming/rust/python/book/README.md",
		"/home/alexzander/Alexzander__/programming/rust/python/book/src/python_list.md",
		"/home/alexzander/Alexzander__/programming/rust/python/book/src/SUMMARY.md",
		"/home/alexzander/Alexzander__/programming/rust/python/book/src/introduction.md",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/src/dict.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/examples/ideas.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/docs/python_list/append_pbool.md",
		"/home/alexzander/Alexzander__/programming/rust/python/docs/python_list/showcase.md",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/marker.rs",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/clone.rs",
		"/home/alexzander/Alexzander__/programming/code_to_analyze/rust-enhanced/.github/workflows/docs.yml",
		"/home/alexzander/Alexzander__/programming/rust/python/ci/docs.yaml",
		"/home/alexzander/Alexzander__/programming/rust/python/ci/CI.yaml",
		"/home/alexzander/Alexzander__/programming/rust/python/workflows/audit.yaml",
		"/home/alexzander/Alexzander__/programming/rust/python/examples/float_example.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/tests/test_list.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/examples/type_example.rs",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/any.rs",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/examples/unicode.rs",
		"/home/alexzander/Alexzander__/programming/code_to_analyze/criterion.rs/bencher_compat/LICENSE-MIT",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/macros.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/sublime.tm",
		"/home/alexzander/.config/sublime-text/Packages/Theme - One Dark/One Dark.tmTheme",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/collections/hash/map.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/my-first-book/book/index.html",
		"/home/alexzander/Alexzander__/programming/code_to_analyze/rust-enhanced/RustEnhanced.sublime-syntax",
		"/home/alexzander/.cargo/registry/src/github.com-1ecc6299db9ec823/unindent-0.1.8/src/lib.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/src/list/mod.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/src/list.rs",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/iterator.rs",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/str/traits.rs",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/alloc/src/vec/mod.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/rust-python-objects.sublime-project",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/mem/mod.rs",
		"/home/alexzander/Alexzander__/programming/rust/core-dev/examples/example.rs",
		"/home/alexzander/Alexzander__/programming/rust/core-dev/Makefile",
		"/home/alexzander/Alexzander__/programming/rust/core-dev/rust-core-dev.sublime-project",
		"/home/alexzander/Alexzander__/programming/rust/core-dev/examples/list.rs",
		"/home/alexzander/Alexzander__/programming/rust/core-dev/src/rust-core-dev.sublime-workspace",
		"/home/alexzander/Alexzander__/programming/rust/core-dev/src/lib.rs",
		"/home/alexzander/Alexzander__/programming/rust/core-dev/src/aesthetics.rs",
		"/home/alexzander/Alexzander__/programming/rust/core-dev/tests/test_aesthetics.rs",
		"/home/alexzander/Alexzander__/programming/rust/core-dev/Cargo.lock",
		"/home/alexzander/Alexzander__/programming/rust/core-dev/Cargo.toml",
		"/home/alexzander/Alexzander__/programming/rust/core-dev/README.md",
		"/home/alexzander/Alexzander__/programming/rust/core-dev/TODO.md",
		"/home/alexzander/Alexzander__/programming/rust/core-dev/LICENSE",
		"/home/alexzander/Alexzander__/programming/rust/core-dev/CONTRIBUTING.md",
		"/home/alexzander/Alexzander__/programming/rust/core-dev/.gitignore",
		"/home/alexzander/Alexzander__/programming/code_to_analyze/lapce/defaults/settings.toml",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/fs.rs",
		"/home/alexzander/Alexzander__/programming/rust/web-server/src/templates/404.html",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/io/mod.rs",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/path.rs",
		"/home/alexzander/Alexzander__/programming/rust/web-server/src/templates",
		"/home/alexzander/.cargo/registry/src/github.com-1ecc6299db9ec823/turtle-1.0.0-rc.3/src/turtle.rs",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/slice/mod.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/target/doc/python/index.html",
		"/home/alexzander/Alexzander__/programming/rust/python/src/int.rs",
		"/home/alexzander/Alexzander__/programming/rust/python/.gitignore",
		"/home/alexzander/Alexzander__/programming/rust/python/src/_char.rs",
		"/home/alexzander/rust/rust.md",
		"/home/alexzander/Alexzander__/programming/projects/alexzanderr.github.io/cv/cv.html",
		"/home/alexzander/Alexzander__/programming/projects/alexzanderr.github.io/connect_with_me.json",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/error.rs",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/std/src/io/error.rs",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/str/mod.rs",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/str/pattern.rs",
		"/home/alexzander/Alexzander__/programming/rust/core/examples/lifetime.rs",
		"/home/alexzander/Alexzander__/programming/rust/core/Cargo.toml",
		"/home/alexzander/Alexzander__/programming/rust/core/examples/collections.rs",
		"/home/alexzander/Alexzander__/programming/rust/core/examples/hashmap.rs",
		"/home/alexzander/Alexzander__/programming/rust/core/examples/err.rs",
		"/home/alexzander/Alexzander__/programming/rust/core/docs/docs.md",
		"/home/alexzander/Alexzander__/programming/rust/core/TODO.md",
		"/home/alexzander/Alexzander__/programming/rust/core/examples/generics.rs",
		"/home/alexzander/Alexzander__/programming/rust/core/src/lib.rs",
		"/home/alexzander/Alexzander__/programming/rust/core/src/algorithms.rs",
		"/home/alexzander/.cargo/registry/src/github.com-1ecc6299db9ec823/color-backtrace-0.5.1/src/lib.rs",
		"/home/alexzander/Alexzander__/programming/rust/core/examples/spinners.rs",
		"/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs",
		"/home/alexzander/Alexzander__/programming/rust/core/rust-core.sublime-project",
		"/home/alexzander/Alexzander__/manjaro-21-xfce/aur-packages/teams/PKGBUILD"
	],
	"find":
	{
		"height": 47.0
	},
	"find_in_files":
	{
		"height": 176.0,
		"where_history":
		[
			"<current file>"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"float",
			"meta",
			"List",
			"hello",
			";\n",
			"function-call",
			"call",
			"impl",
			"method",
			"new",
			"statements",
			"Vec",
			"String",
			"for",
			"FromIter",
			"fromiter",
			"push"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"pub"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/float.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2947,
						"regions":
						{
							"rb_l0_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										3,
										4
									],
									[
										25,
										26
									],
									[
										57,
										58
									],
									[
										87,
										88
									],
									[
										133,
										134
									],
									[
										146,
										147
									],
									[
										149,
										150
									],
									[
										163,
										164
									],
									[
										234,
										235
									],
									[
										281,
										282
									],
									[
										317,
										318
									],
									[
										483,
										484
									],
									[
										530,
										531
									],
									[
										617,
										618
									],
									[
										650,
										651
									],
									[
										738,
										739
									],
									[
										769,
										770
									],
									[
										857,
										858
									],
									[
										920,
										921
									],
									[
										1078,
										1079
									],
									[
										1265,
										1266
									],
									[
										1562,
										1563
									],
									[
										1755,
										1756
									],
									[
										2372,
										2373
									]
								],
								"scope": "<default>.l0.rb"
							},
							"rb_l1_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										9,
										10
									],
									[
										24,
										25
									],
									[
										140,
										141
									],
									[
										145,
										146
									],
									[
										156,
										157
									],
									[
										162,
										163
									],
									[
										410,
										411
									],
									[
										420,
										421
									],
									[
										430,
										431
									],
									[
										481,
										482
									],
									[
										543,
										544
									],
									[
										553,
										554
									],
									[
										563,
										564
									],
									[
										615,
										616
									],
									[
										666,
										667
									],
									[
										667,
										668
									],
									[
										677,
										678
									],
									[
										736,
										737
									],
									[
										785,
										786
									],
									[
										786,
										787
									],
									[
										796,
										797
									],
									[
										855,
										856
									],
									[
										937,
										938
									],
									[
										943,
										944
									],
									[
										955,
										956
									],
									[
										996,
										997
									],
									[
										1017,
										1018
									],
									[
										1023,
										1024
									],
									[
										1035,
										1036
									],
									[
										1076,
										1077
									],
									[
										1277,
										1278
									],
									[
										1319,
										1320
									],
									[
										1336,
										1337
									],
									[
										1560,
										1561
									],
									[
										1767,
										1768
									],
									[
										1801,
										1802
									],
									[
										1818,
										1819
									],
									[
										2370,
										2371
									]
								],
								"scope": "<default>.l1.rb"
							},
							"rb_l2_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										446,
										447
									],
									[
										475,
										476
									],
									[
										579,
										580
									],
									[
										609,
										610
									],
									[
										693,
										694
									],
									[
										730,
										731
									],
									[
										812,
										813
									],
									[
										849,
										850
									],
									[
										972,
										973
									],
									[
										990,
										991
									],
									[
										1052,
										1053
									],
									[
										1070,
										1071
									],
									[
										1365,
										1366
									],
									[
										1378,
										1379
									],
									[
										1411,
										1412
									],
									[
										1412,
										1413
									],
									[
										1414,
										1415
									],
									[
										1488,
										1489
									],
									[
										1495,
										1496
									],
									[
										1554,
										1555
									],
									[
										1931,
										1932
									],
									[
										1944,
										1945
									],
									[
										1970,
										1971
									],
									[
										1971,
										1972
									],
									[
										1973,
										1974
									],
									[
										2213,
										2214
									],
									[
										2220,
										2221
									],
									[
										2364,
										2365
									]
								],
								"scope": "<default>.l2.rb"
							},
							"rb_l3_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										1434,
										1435
									],
									[
										1478,
										1479
									],
									[
										1515,
										1516
									],
									[
										1544,
										1545
									],
									[
										2005,
										2006
									],
									[
										2128,
										2129
									],
									[
										2167,
										2168
									],
									[
										2168,
										2169
									],
									[
										2189,
										2190
									],
									[
										2203,
										2204
									],
									[
										2240,
										2241
									],
									[
										2354,
										2355
									]
								],
								"scope": "<default>.l3.rb"
							}
						},
						"selection":
						[
							[
								1002,
								1002
							]
						],
						"settings":
						{
							"AutoSetSyntax/is_transient": false,
							"apply_syntax_touched": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_hover_provider_count": 2,
							"lsp_uri": "file:///home/alexzander/Alexzander__/programming/rust/python/src/float.rs",
							"rainbow_checked": true,
							"show_definitions": false,
							"syntax": "Packages/User/Rust-Test.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2199.0,
						"zoom_level": 1.0
					},
					"stack_index": 21,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/string.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1765,
						"regions":
						{
							"rb_l0_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										82,
										83
									],
									[
										96,
										97
									],
									[
										161,
										162
									],
									[
										207,
										208
									],
									[
										223,
										224
									],
									[
										659,
										660
									],
									[
										695,
										696
									],
									[
										916,
										917
									],
									[
										947,
										948
									],
									[
										1058,
										1059
									],
									[
										1090,
										1091
									],
									[
										1186,
										1187
									],
									[
										1214,
										1215
									],
									[
										1269,
										1270
									],
									[
										1297,
										1298
									],
									[
										1448,
										1449
									],
									[
										1481,
										1482
									],
									[
										1590,
										1591
									]
								],
								"scope": "<default>.l0.rb"
							},
							"rb_l1_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										89,
										90
									],
									[
										95,
										96
									],
									[
										289,
										290
									],
									[
										290,
										291
									],
									[
										303,
										304
									],
									[
										373,
										374
									],
									[
										381,
										382
									],
									[
										388,
										389
									],
									[
										445,
										446
									],
									[
										466,
										467
									],
									[
										484,
										485
									],
									[
										531,
										532
									],
									[
										585,
										586
									],
									[
										606,
										607
									],
									[
										624,
										625
									],
									[
										657,
										658
									],
									[
										708,
										709
									],
									[
										722,
										723
									],
									[
										732,
										733
									],
									[
										914,
										915
									],
									[
										960,
										961
									],
									[
										971,
										972
									],
									[
										981,
										982
									],
									[
										1056,
										1057
									],
									[
										1103,
										1104
									],
									[
										1119,
										1120
									],
									[
										1129,
										1130
									],
									[
										1184,
										1185
									],
									[
										1230,
										1231
									],
									[
										1231,
										1232
									],
									[
										1241,
										1242
									],
									[
										1267,
										1268
									],
									[
										1314,
										1315
									],
									[
										1320,
										1321
									],
									[
										1332,
										1333
									],
									[
										1376,
										1377
									],
									[
										1393,
										1394
									],
									[
										1399,
										1400
									],
									[
										1411,
										1412
									],
									[
										1446,
										1447
									],
									[
										1493,
										1494
									],
									[
										1527,
										1528
									],
									[
										1544,
										1545
									],
									[
										1588,
										1589
									]
								],
								"scope": "<default>.l1.rb"
							},
							"rb_l2_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										321,
										322
									],
									[
										367,
										368
									],
									[
										512,
										513
									],
									[
										513,
										514
									],
									[
										518,
										519
									],
									[
										525,
										526
									],
									[
										644,
										645
									],
									[
										651,
										652
									],
									[
										773,
										774
									],
									[
										774,
										775
									],
									[
										805,
										806
									],
									[
										849,
										850
									],
									[
										867,
										868
									],
									[
										908,
										909
									],
									[
										999,
										1000
									],
									[
										1050,
										1051
									],
									[
										1147,
										1148
									],
									[
										1178,
										1179
									],
									[
										1260,
										1261
									],
									[
										1261,
										1262
									],
									[
										1349,
										1350
									],
									[
										1370,
										1371
									],
									[
										1439,
										1440
									],
									[
										1440,
										1441
									],
									[
										1560,
										1561
									],
									[
										1582,
										1583
									]
								],
								"scope": "<default>.l2.rb"
							},
							"rb_l3_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										355,
										356
									],
									[
										356,
										357
									],
									[
										833,
										834
									],
									[
										839,
										840
									],
									[
										1034,
										1035
									],
									[
										1039,
										1040
									]
								],
								"scope": "<default>.l3.rb"
							}
						},
						"selection":
						[
							[
								1272,
								1272
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_uri": "file:///home/alexzander/Alexzander__/programming/rust/python/src/string.rs",
							"rainbow_checked": true,
							"show_definitions": true,
							"syntax": "Packages/User/Rust-Test.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2085.0,
						"zoom_level": 1.0
					},
					"stack_index": 20,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/character.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1491,
						"regions":
						{
							"rb_l0_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										40,
										41
									],
									[
										60,
										61
									],
									[
										117,
										118
									],
									[
										136,
										137
									],
									[
										149,
										150
									],
									[
										416,
										417
									],
									[
										444,
										445
									],
									[
										531,
										532
									],
									[
										557,
										558
									],
									[
										655,
										656
									],
									[
										680,
										681
									],
									[
										763,
										764
									],
									[
										788,
										789
									],
									[
										941,
										942
									],
									[
										971,
										972
									],
									[
										1210,
										1211
									],
									[
										1238,
										1239
									],
									[
										1489,
										1490
									]
								],
								"scope": "<default>.l0.rb"
							},
							"rb_l1_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										47,
										48
									],
									[
										59,
										60
									],
									[
										342,
										343
									],
									[
										354,
										355
									],
									[
										364,
										365
									],
									[
										414,
										415
									],
									[
										457,
										458
									],
									[
										469,
										470
									],
									[
										479,
										480
									],
									[
										529,
										530
									],
									[
										570,
										571
									],
									[
										579,
										580
									],
									[
										589,
										590
									],
									[
										653,
										654
									],
									[
										696,
										697
									],
									[
										697,
										698
									],
									[
										707,
										708
									],
									[
										761,
										762
									],
									[
										804,
										805
									],
									[
										810,
										811
									],
									[
										822,
										823
									],
									[
										861,
										862
									],
									[
										879,
										880
									],
									[
										885,
										886
									],
									[
										897,
										898
									],
									[
										939,
										940
									],
									[
										983,
										984
									],
									[
										1025,
										1026
									],
									[
										1042,
										1043
									],
									[
										1208,
										1209
									],
									[
										1250,
										1251
									],
									[
										1292,
										1293
									],
									[
										1309,
										1310
									],
									[
										1487,
										1488
									]
								],
								"scope": "<default>.l1.rb"
							},
							"rb_l2_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										379,
										380
									],
									[
										408,
										409
									],
									[
										494,
										495
									],
									[
										523,
										524
									],
									[
										604,
										605
									],
									[
										647,
										648
									],
									[
										722,
										723
									],
									[
										755,
										756
									],
									[
										844,
										845
									],
									[
										855,
										856
									],
									[
										914,
										915
									],
									[
										933,
										934
									],
									[
										1074,
										1075
									],
									[
										1075,
										1076
									],
									[
										1077,
										1078
									],
									[
										1137,
										1138
									],
									[
										1144,
										1145
									],
									[
										1202,
										1203
									],
									[
										1341,
										1342
									],
									[
										1342,
										1343
									],
									[
										1344,
										1345
									],
									[
										1410,
										1411
									],
									[
										1417,
										1418
									],
									[
										1481,
										1482
									]
								],
								"scope": "<default>.l2.rb"
							},
							"rb_l3_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										1097,
										1098
									],
									[
										1127,
										1128
									],
									[
										1164,
										1165
									],
									[
										1192,
										1193
									],
									[
										1364,
										1365
									],
									[
										1400,
										1401
									],
									[
										1437,
										1438
									],
									[
										1471,
										1472
									]
								],
								"scope": "<default>.l3.rb"
							}
						},
						"selection":
						[
							[
								1458,
								1458
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_hover_provider_count": 2,
							"lsp_uri": "file:///home/alexzander/Alexzander__/programming/rust/python/src/character.rs",
							"rainbow_checked": true,
							"show_definitions": false,
							"syntax": "Packages/User/Rust-Test.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2237.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "examples/hashable.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 653,
						"regions":
						{
							"rb_l0_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										37,
										38
									],
									[
										50,
										51
									],
									[
										53,
										54
									],
									[
										64,
										65
									],
									[
										67,
										68
									],
									[
										85,
										86
									],
									[
										98,
										99
									],
									[
										114,
										115
									],
									[
										146,
										147
									],
									[
										264,
										265
									],
									[
										280,
										281
									],
									[
										298,
										299
									],
									[
										332,
										333
									],
									[
										452,
										453
									],
									[
										462,
										463
									],
									[
										463,
										464
									],
									[
										465,
										466
									],
									[
										652,
										653
									]
								],
								"scope": "<default>.l0.rb"
							},
							"rb_l1_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										44,
										45
									],
									[
										49,
										50
									],
									[
										60,
										61
									],
									[
										63,
										64
									],
									[
										74,
										75
									],
									[
										84,
										85
									],
									[
										158,
										159
									],
									[
										197,
										198
									],
									[
										219,
										220
									],
									[
										262,
										263
									],
									[
										344,
										345
									],
									[
										383,
										384
									],
									[
										405,
										406
									],
									[
										450,
										451
									],
									[
										485,
										486
									],
									[
										497,
										498
									],
									[
										520,
										521
									],
									[
										535,
										536
									],
									[
										591,
										592
									],
									[
										592,
										593
									],
									[
										611,
										612
									],
									[
										620,
										621
									],
									[
										635,
										636
									],
									[
										649,
										650
									]
								],
								"scope": "<default>.l1.rb"
							},
							"rb_l2_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										235,
										236
									],
									[
										256,
										257
									],
									[
										421,
										422
									],
									[
										444,
										445
									]
								],
								"scope": "<default>.l2.rb"
							}
						},
						"selection":
						[
							[
								300,
								300
							]
						],
						"settings":
						{
							"AutoSetSyntax/is_transient": false,
							"_anf_new": "",
							"apply_syntax_touched": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_uri": "file:///home/alexzander/Alexzander__/programming/rust/python/examples/hashable.rs",
							"rainbow_checked": true,
							"show_definitions": true,
							"syntax": "Packages/User/Rust-Test.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 570.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/boolean.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1461,
						"regions":
						{
							"rb_l0_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										77,
										78
									],
									[
										90,
										91
									],
									[
										93,
										94
									],
									[
										107,
										108
									],
									[
										110,
										111
									],
									[
										126,
										127
									],
									[
										129,
										130
									],
									[
										147,
										148
									],
									[
										165,
										166
									],
									[
										184,
										185
									],
									[
										197,
										198
									],
									[
										406,
										407
									],
									[
										435,
										436
									],
									[
										522,
										523
									],
									[
										550,
										551
									],
									[
										741,
										742
									],
									[
										767,
										768
									],
									[
										982,
										983
									],
									[
										1013,
										1014
									],
									[
										1124,
										1125
									],
									[
										1153,
										1154
									],
									[
										1270,
										1271
									],
									[
										1305,
										1306
									],
									[
										1460,
										1461
									]
								],
								"scope": "<default>.l0.rb"
							},
							"rb_l1_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										84,
										85
									],
									[
										89,
										90
									],
									[
										100,
										101
									],
									[
										106,
										107
									],
									[
										117,
										118
									],
									[
										125,
										126
									],
									[
										136,
										137
									],
									[
										146,
										147
									],
									[
										332,
										333
									],
									[
										344,
										345
									],
									[
										354,
										355
									],
									[
										404,
										405
									],
									[
										448,
										449
									],
									[
										460,
										461
									],
									[
										470,
										471
									],
									[
										520,
										521
									],
									[
										563,
										564
									],
									[
										573,
										574
									],
									[
										583,
										584
									],
									[
										739,
										740
									],
									[
										783,
										784
									],
									[
										789,
										790
									],
									[
										801,
										802
									],
									[
										915,
										916
									],
									[
										933,
										934
									],
									[
										939,
										940
									],
									[
										951,
										952
									],
									[
										980,
										981
									],
									[
										1025,
										1026
									],
									[
										1059,
										1060
									],
									[
										1076,
										1077
									],
									[
										1122,
										1123
									],
									[
										1165,
										1166
									],
									[
										1199,
										1200
									],
									[
										1216,
										1217
									],
									[
										1268,
										1269
									],
									[
										1316,
										1317
									],
									[
										1336,
										1337
									],
									[
										1346,
										1347
									],
									[
										1381,
										1382
									],
									[
										1393,
										1394
									],
									[
										1413,
										1414
									],
									[
										1423,
										1424
									],
									[
										1458,
										1459
									]
								],
								"scope": "<default>.l1.rb"
							},
							"rb_l2_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										369,
										370
									],
									[
										398,
										399
									],
									[
										485,
										486
									],
									[
										514,
										515
									],
									[
										605,
										606
									],
									[
										683,
										684
									],
									[
										698,
										699
									],
									[
										733,
										734
									],
									[
										825,
										826
									],
									[
										863,
										864
									],
									[
										870,
										871
									],
									[
										909,
										910
									],
									[
										973,
										974
									],
									[
										974,
										975
									],
									[
										1092,
										1093
									],
									[
										1116,
										1117
									],
									[
										1232,
										1233
									],
									[
										1262,
										1263
									]
								],
								"scope": "<default>.l2.rb"
							},
							"rb_l3_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										631,
										632
									],
									[
										673,
										674
									],
									[
										846,
										847
									],
									[
										853,
										854
									],
									[
										891,
										892
									],
									[
										899,
										900
									],
									[
										1114,
										1115
									],
									[
										1115,
										1116
									],
									[
										1260,
										1261
									],
									[
										1261,
										1262
									]
								],
								"scope": "<default>.l3.rb"
							}
						},
						"selection":
						[
							[
								36,
								36
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_uri": "file:///home/alexzander/Alexzander__/programming/rust/python/src/boolean.rs",
							"rainbow_checked": true,
							"show_definitions": true,
							"syntax": "Packages/User/Rust-Test.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "examples/boolean_example.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 529,
						"regions":
						{
							"rb_l0_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										93,
										94
									],
									[
										94,
										95
									],
									[
										96,
										97
									],
									[
										528,
										529
									]
								],
								"scope": "<default>.l0.rb"
							},
							"rb_l1_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										120,
										121
									],
									[
										125,
										126
									],
									[
										150,
										151
									],
									[
										156,
										157
									],
									[
										176,
										177
									],
									[
										206,
										207
									],
									[
										213,
										214
									],
									[
										242,
										243
									],
									[
										263,
										264
									],
									[
										293,
										294
									],
									[
										300,
										301
									],
									[
										329,
										330
									],
									[
										465,
										466
									],
									[
										472,
										473
									],
									[
										489,
										490
									],
									[
										498,
										499
									],
									[
										515,
										516
									],
									[
										525,
										526
									]
								],
								"scope": "<default>.l1.rb"
							},
							"rb_l2_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										194,
										195
									],
									[
										200,
										201
									],
									[
										231,
										232
									],
									[
										236,
										237
									],
									[
										281,
										282
									],
									[
										287,
										288
									],
									[
										318,
										319
									],
									[
										323,
										324
									]
								],
								"scope": "<default>.l2.rb"
							}
						},
						"selection":
						[
							[
								330,
								330
							]
						],
						"settings":
						{
							"AutoSetSyntax/is_transient": false,
							"_anf_new": "",
							"apply_syntax_touched": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_uri": "file:///home/alexzander/Alexzander__/programming/rust/python/examples/boolean_example.rs",
							"rainbow_checked": true,
							"show_definitions": true,
							"syntax": "Packages/User/Rust-Test.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 76826,
						"regions":
						{
							"col_00000009":
							{
								"flags": 16,
								"regions":
								[
									[
										29760,
										29770
									]
								],
								"scope": "col_00000009"
							},
							"col_003322BB":
							{
								"flags": 16,
								"regions":
								[
									[
										28208,
										28213
									]
								],
								"scope": "col_003322BB"
							},
							"col_7FFFFFFF":
							{
								"flags": 16,
								"regions":
								[
									[
										31263,
										31273
									]
								],
								"scope": "col_7FFFFFFF"
							},
							"rb_l0_<default>":
							{
								"flags": 272,
								"regions": "",
								"scope": "<default>.l0.rb"
							},
							"rb_l1_<default>":
							{
								"flags": 272,
								"regions": "",
								"scope": "<default>.l1.rb"
							},
							"rb_l2_<default>":
							{
								"flags": 272,
								"regions": "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",
								"scope": "<default>.l2.rb"
							},
							"rb_l3_<default>":
							{
								"flags": 272,
								"regions": "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",
								"scope": "<default>.l3.rb"
							},
							"rb_l4_<default>":
							{
								"flags": 272,
								"regions": "qAAAAAEUAAAAAAAAAhQAAAAAAAAAAAAAAADwvwYUAAAAAAAABxQAAAAAAAAAAAAAAADwv6QtAAAAAAAApS0AAAAAAAAAAAAAAADwv6YtAAAAAAAApy0AAAAAAAAAAAAAAADwv74tAAAAAAAAvy0AAAAAAAAAAAAAAADwv8AtAAAAAAAAwS0AAAAAAAAAAAAAAADwv+0wAAAAAAAA7jAAAAAAAAAAAAAAAADwvxkxAAAAAAAAGjEAAAAAAAAAAAAAAADwvzNGAAAAAAAANEYAAAAAAAAAAAAAAADwvzRGAAAAAAAANUYAAAAAAAAAAAAAAADwvzdGAAAAAAAAOEYAAAAAAAAAAAAAAADwvzhGAAAAAAAAOUYAAAAAAAAAAAAAAADwv1VGAAAAAAAAVkYAAAAAAAAAAAAAAADwv1dGAAAAAAAAWEYAAAAAAAAAAAAAAADwv1pGAAAAAAAAW0YAAAAAAAAAAAAAAADwv1tGAAAAAAAAXEYAAAAAAAAAAAAAAADwvyaQAAAAAAAAJ5AAAAAAAAAAAAAAAADwv0WQAAAAAAAARpAAAAAAAAAAAAAAAADwv2qQAAAAAAAAa5AAAAAAAAAAAAAAAADwv2uQAAAAAAAAbJAAAAAAAAAAAAAAAADwv22QAAAAAAAAbpAAAAAAAAAAAAAAAADwv7WQAAAAAAAAtpAAAAAAAAAAAAAAAADwv8eQAAAAAAAAyJAAAAAAAAAAAAAAAADwv9WQAAAAAAAA1pAAAAAAAAAAAAAAAADwv9aQAAAAAAAA15AAAAAAAAAAAAAAAADwv/CQAAAAAAAA8ZAAAAAAAAAAAAAAAADwv5aSAAAAAAAAl5IAAAAAAAAAAAAAAADwv7WSAAAAAAAAtpIAAAAAAAAAAAAAAADwv9qSAAAAAAAA25IAAAAAAAAAAAAAAADwv9uSAAAAAAAA3JIAAAAAAAAAAAAAAADwv92SAAAAAAAA3pIAAAAAAAAAAAAAAADwvyWTAAAAAAAAJpMAAAAAAAAAAAAAAADwv9OTAAAAAAAA1JMAAAAAAAAAAAAAAADwv/mTAAAAAAAA+pMAAAAAAAAAAAAAAADwv/+YAAAAAAAAAJkAAAAAAAAAAAAAAADwvwCZAAAAAAAAAZkAAAAAAAAAAAAAAADwv7GZAAAAAAAAspkAAAAAAAAAAAAAAADwv7OZAAAAAAAAtJkAAAAAAAAAAAAAAADwv72ZAAAAAAAAvpkAAAAAAAAAAAAAAADwv76ZAAAAAAAAv5kAAAAAAAAAAAAAAADwv7ynAAAAAAAAvacAAAAAAAAAAAAAAADwv76nAAAAAAAAv6cAAAAAAAAAAAAAAADwvwqoAAAAAAAAC6gAAAAAAAAAAAAAAADwvxGoAAAAAAAAEqgAAAAAAAAAAAAAAADwvx6oAAAAAAAAH6gAAAAAAAAAAAAAAADwvyGoAAAAAAAAIqgAAAAAAAAAAAAAAADwvzapAAAAAAAAN6kAAAAAAAAAAAAAAADwv0mpAAAAAAAASqkAAAAAAAAAAAAAAADwv2+pAAAAAAAAcKkAAAAAAAAAAAAAAADwv3OpAAAAAAAAdKkAAAAAAAAAAAAAAADwvzyqAAAAAAAAPaoAAAAAAAAAAAAAAADwv0+qAAAAAAAAUKoAAAAAAAAAAAAAAADwv3WqAAAAAAAAdqoAAAAAAAAAAAAAAADwv3mqAAAAAAAAeqoAAAAAAAAAAAAAAADwv1yrAAAAAAAAXasAAAAAAAAAAAAAAADwv3CrAAAAAAAAcasAAAAAAAAAAAAAAADwv6arAAAAAAAAp6sAAAAAAAAAAAAAAADwv9CrAAAAAAAA0asAAAAAAAAAAAAAAADwv++rAAAAAAAA8KsAAAAAAAAAAAAAAADwvwKsAAAAAAAAA6wAAAAAAAAAAAAAAADwvzWsAAAAAAAANqwAAAAAAAAAAAAAAADwv1usAAAAAAAAXKwAAAAAAAAAAAAAAADwv4GsAAAAAAAAgqwAAAAAAAAAAAAAAADwv4WsAAAAAAAAhqwAAAAAAAAAAAAAAADwv6usAAAAAAAArKwAAAAAAAAAAAAAAADwv7CsAAAAAAAAsawAAAAAAAAAAAAAAADwvxStAAAAAAAAFa0AAAAAAAAAAAAAAADwvxetAAAAAAAAGK0AAAAAAAAAAAAAAADwv7atAAAAAAAAt60AAAAAAAAAAAAAAADwv9ytAAAAAAAA3a0AAAAAAAAAAAAAAADwv/ytAAAAAAAA/a0AAAAAAAAAAAAAAADwvw+uAAAAAAAAEK4AAAAAAAAAAAAAAADwvzWuAAAAAAAANq4AAAAAAAAAAAAAAADwvzmuAAAAAAAAOq4AAAAAAAAAAAAAAADwv1+uAAAAAAAAYK4AAAAAAAAAAAAAAADwv2SuAAAAAAAAZa4AAAAAAAAAAAAAAADwv9m0AAAAAAAA2rQAAAAAAAAAAAAAAADwv960AAAAAAAA37QAAAAAAAAAAAAAAADwvxm2AAAAAAAAGrYAAAAAAAAAAAAAAADwvx22AAAAAAAAHrYAAAAAAAAAAAAAAADwvyi2AAAAAAAAKbYAAAAAAAAAAAAAAADwvyq2AAAAAAAAK7YAAAAAAAAAAAAAAADwv/a3AAAAAAAA97cAAAAAAAAAAAAAAADwv/e3AAAAAAAA+LcAAAAAAAAAAAAAAADwv/63AAAAAAAA/7cAAAAAAAAAAAAAAADwv/+3AAAAAAAAALgAAAAAAAAAAAAAAADwv8m4AAAAAAAAyrgAAAAAAAAAAAAAAADwvwW5AAAAAAAABrkAAAAAAAAAAAAAAADwv8S5AAAAAAAAxbkAAAAAAAAAAAAAAADwv7q6AAAAAAAAu7oAAAAAAAAAAAAAAADwv529AAAAAAAAnr0AAAAAAAAAAAAAAADwv6m9AAAAAAAAqr0AAAAAAAAAAAAAAADwv2zBAAAAAAAAbcEAAAAAAAAAAAAAAADwv3HBAAAAAAAAcsEAAAAAAAAAAAAAAADwvwPCAAAAAAAABMIAAAAAAAAAAAAAAADwvw7CAAAAAAAAD8IAAAAAAAAAAAAAAADwv4nDAAAAAAAAisMAAAAAAAAAAAAAAADwv5TDAAAAAAAAlcMAAAAAAAAAAAAAAADwv9rDAAAAAAAA28MAAAAAAAAAAAAAAADwv+3DAAAAAAAA7sMAAAAAAAAAAAAAAADwvxvEAAAAAAAAHMQAAAAAAAAAAAAAAADwvybEAAAAAAAAJ8QAAAAAAAAAAAAAAADwv0zEAAAAAAAATcQAAAAAAAAAAAAAAADwv1HEAAAAAAAAUsQAAAAAAAAAAAAAAADwv1rIAAAAAAAAW8gAAAAAAAAAAAAAAADwv3jIAAAAAAAAecgAAAAAAAAAAAAAAADwv0vJAAAAAAAATMkAAAAAAAAAAAAAAADwv1fJAAAAAAAAWMkAAAAAAAAAAAAAAADwv1zJAAAAAAAAXckAAAAAAAAAAAAAAADwvyvLAAAAAAAALMsAAAAAAAAAAAAAAADwv07LAAAAAAAAT8sAAAAAAAAAAAAAAADwv1TLAAAAAAAAVcsAAAAAAAAAAAAAAADwv1nLAAAAAAAAWssAAAAAAAAAAAAAAADwv5jMAAAAAAAAmcwAAAAAAAAAAAAAAADwv7zMAAAAAAAAvcwAAAAAAAAAAAAAAADwv8DMAAAAAAAAwcwAAAAAAAAAAAAAAADwv8XMAAAAAAAAxswAAAAAAAAAAAAAAADwvwjNAAAAAAAACc0AAAAAAAAAAAAAAADwv5QLAQAAAAAAlQsBAAAAAAAAAAAAAADwv7cLAQAAAAAAuAsBAAAAAAAAAAAAAADwv/cLAQAAAAAA+AsBAAAAAAAAAAAAAADwvxQMAQAAAAAAFQwBAAAAAAAAAAAAAADwvyAMAQAAAAAAIQwBAAAAAAAAAAAAAADwvzcMAQAAAAAAOAwBAAAAAAAAAAAAAADwv1MMAQAAAAAAVAwBAAAAAAAAAAAAAADwv3YMAQAAAAAAdwwBAAAAAAAAAAAAAADwv7oMAQAAAAAAuwwBAAAAAAAAAAAAAADwv9cMAQAAAAAA2AwBAAAAAAAAAAAAAADwv+MMAQAAAAAA5AwBAAAAAAAAAAAAAADwv/oMAQAAAAAA+wwBAAAAAAAAAAAAAADwvx8RAQAAAAAAIBEBAAAAAAAAAAAAAADwv7QRAQAAAAAAtREBAAAAAAAAAAAAAADwv0QSAQAAAAAARRIBAAAAAAAAAAAAAADwv1MSAQAAAAAAVBIBAAAAAAAAAAAAAADwv3QSAQAAAAAAdRIBAAAAAAAAAAAAAADwv6wSAQAAAAAArRIBAAAAAAAAAAAAAADwv9MSAQAAAAAA1BIBAAAAAAAAAAAAAADwv9QSAQAAAAAA1RIBAAAAAAAAAAAAAADwv3kWAQAAAAAAehYBAAAAAAAAAAAAAADwv4UWAQAAAAAAhhYBAAAAAAAAAAAAAADwv8QZAQAAAAAAxRkBAAAAAAAAAAAAAADwv+QZAQAAAAAA5RkBAAAAAAAAAAAAAADwvwoaAQAAAAAACxoBAAAAAAAAAAAAAADwvwsaAQAAAAAADBoBAAAAAAAAAAAAAADwvw0aAQAAAAAADhoBAAAAAAAAAAAAAADwv2MaAQAAAAAAZBoBAAAAAAAAAAAAAADwv9EaAQAAAAAA0hoBAAAAAAAAAAAAAADwv94aAQAAAAAA3xoBAAAAAAAAAAAAAADwv4IgAQAAAAAAgyABAAAAAAAAAAAAAADwv6UgAQAAAAAApiABAAAAAAAAAAAAAADwvxQhAQAAAAAAFSEBAAAAAAAAAAAAAADwvxchAQAAAAAAGCEBAAAAAAAAAAAAAADwvy4hAQAAAAAALyEBAAAAAAAAAAAAAADwvz0hAQAAAAAAPiEBAAAAAAAAAAAAAADwv1khAQAAAAAAWiEBAAAAAAAAAAAAAADwv5YhAQAAAAAAlyEBAAAAAAAAAAAAAADwv7ghAQAAAAAAuSEBAAAAAAAAAAAAAADwv7khAQAAAAAAuiEBAAAAAAAAAAAAAADwv7snAQAAAAAAvCcBAAAAAAAAAAAAAADwv1ooAQAAAAAAWygBAAAAAAAAAAAAAADwv3soAQAAAAAAfCgBAAAAAAAAAAAAAADwv4UoAQAAAAAAhigBAAAAAAAAAAAAAADwv4woAQAAAAAAjSgBAAAAAAAAAAAAAADwv6ooAQAAAAAAqygBAAAAAAAAAAAAAADwv7IoAQAAAAAAsygBAAAAAAAAAAAAAADwv7MoAQAAAAAAtCgBAAAAAAAAAAAAAADwv0UqAQAAAAAARioBAAAAAAAAAAAAAADwv0YqAQAAAAAARyoBAAAAAAAAAAAAAADwvw",
								"scope": "<default>.l4.rb"
							},
							"rb_l5_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										12528,
										12529
									],
									[
										12567,
										12568
									],
									[
										36929,
										36930
									],
									[
										36931,
										36932
									],
									[
										37018,
										37019
									],
									[
										37025,
										37026
									],
									[
										37553,
										37554
									],
									[
										37555,
										37556
									],
									[
										37642,
										37643
									],
									[
										37649,
										37650
									],
									[
										37848,
										37849
									],
									[
										37879,
										37880
									],
									[
										43039,
										43040
									],
									[
										43040,
										43041
									],
									[
										44309,
										44310
									],
									[
										44310,
										44311
									],
									[
										47345,
										47346
									],
									[
										47347,
										47348
									],
									[
										47666,
										47667
									],
									[
										47693,
										47694
									],
									[
										47735,
										47736
									],
									[
										47737,
										47738
									],
									[
										47779,
										47780
									],
									[
										47784,
										47785
									],
									[
										49676,
										49677
									],
									[
										49677,
										49678
									],
									[
										51316,
										51317
									],
									[
										51318,
										51319
									],
									[
										51742,
										51743
									],
									[
										51743,
										51744
									],
									[
										51745,
										51746
									],
									[
										51869,
										51870
									],
									[
										51906,
										51907
									],
									[
										51993,
										51994
									],
									[
										52091,
										52092
									],
									[
										52096,
										52097
									],
									[
										52137,
										52138
									],
									[
										52138,
										52139
									],
									[
										52171,
										52172
									],
									[
										52177,
										52178
									],
									[
										52187,
										52188
									],
									[
										52188,
										52189
									],
									[
										52193,
										52194
									],
									[
										52194,
										52195
									],
									[
										52196,
										52197
									],
									[
										52303,
										52304
									],
									[
										52336,
										52337
									],
									[
										52356,
										52357
									],
									[
										52454,
										52455
									],
									[
										52468,
										52469
									],
									[
										68650,
										68651
									],
									[
										68661,
										68662
									],
									[
										68845,
										68846
									],
									[
										68856,
										68857
									],
									[
										70218,
										70219
									],
									[
										70226,
										70227
									],
									[
										70294,
										70295
									],
									[
										70296,
										70297
									],
									[
										71295,
										71296
									],
									[
										71300,
										71301
									],
									[
										72241,
										72242
									],
									[
										72272,
										72273
									],
									[
										74032,
										74033
									],
									[
										74043,
										74044
									],
									[
										74108,
										74109
									],
									[
										74115,
										74116
									],
									[
										75735,
										75736
									],
									[
										75764,
										75765
									],
									[
										75776,
										75777
									],
									[
										75848,
										75849
									]
								],
								"scope": "<default>.l5.rb"
							}
						},
						"selection":
						[
							[
								25487,
								25487
							]
						],
						"settings":
						{
							"AutoSetSyntax/is_transient": false,
							"apply_syntax_touched": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_uri": "file:///home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/fmt/mod.rs",
							"rainbow_checked": true,
							"show_definitions": true,
							"syntax": "Packages/User/Rust-Test.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 28609.0,
						"zoom_level": 1.0
					},
					"stack_index": 19,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "examples/object_trait.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2520,
						"regions":
						{
							"rb_l0_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										124,
										125
									],
									[
										130,
										131
									],
									[
										140,
										141
									],
									[
										163,
										164
									],
									[
										297,
										298
									],
									[
										391,
										392
									],
									[
										417,
										418
									],
									[
										469,
										470
									],
									[
										473,
										474
									],
									[
										486,
										487
									],
									[
										489,
										490
									],
									[
										503,
										504
									],
									[
										574,
										575
									],
									[
										621,
										622
									],
									[
										657,
										658
									],
									[
										823,
										824
									],
									[
										870,
										871
									],
									[
										957,
										958
									],
									[
										1021,
										1022
									],
									[
										1162,
										1163
									],
									[
										1232,
										1233
									],
									[
										1535,
										1536
									],
									[
										1570,
										1571
									],
									[
										1658,
										1659
									],
									[
										1694,
										1695
									],
									[
										1809,
										1810
									],
									[
										1873,
										1874
									],
									[
										2029,
										2030
									],
									[
										2079,
										2080
									],
									[
										2196,
										2197
									],
									[
										2249,
										2250
									],
									[
										2256,
										2257
									],
									[
										2258,
										2259
									],
									[
										2285,
										2286
									],
									[
										2295,
										2296
									],
									[
										2296,
										2297
									],
									[
										2298,
										2299
									],
									[
										2518,
										2519
									]
								],
								"scope": "<default>.l0.rb"
							},
							"rb_l1_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										160,
										161
									],
									[
										161,
										162
									],
									[
										340,
										341
									],
									[
										346,
										347
									],
									[
										372,
										373
									],
									[
										378,
										379
									],
									[
										437,
										438
									],
									[
										453,
										454
									],
									[
										480,
										481
									],
									[
										485,
										486
									],
									[
										496,
										497
									],
									[
										502,
										503
									],
									[
										750,
										751
									],
									[
										760,
										761
									],
									[
										770,
										771
									],
									[
										821,
										822
									],
									[
										883,
										884
									],
									[
										893,
										894
									],
									[
										903,
										904
									],
									[
										955,
										956
									],
									[
										1028,
										1029
									],
									[
										1035,
										1036
									],
									[
										1051,
										1052
									],
									[
										1057,
										1058
									],
									[
										1068,
										1069
									],
									[
										1084,
										1085
									],
									[
										1101,
										1102
									],
									[
										1107,
										1108
									],
									[
										1119,
										1120
									],
									[
										1160,
										1161
									],
									[
										1244,
										1245
									],
									[
										1286,
										1287
									],
									[
										1303,
										1304
									],
									[
										1533,
										1534
									],
									[
										1710,
										1711
									],
									[
										1711,
										1712
									],
									[
										1721,
										1722
									],
									[
										1807,
										1808
									],
									[
										1880,
										1881
									],
									[
										1887,
										1888
									],
									[
										1903,
										1904
									],
									[
										1909,
										1910
									],
									[
										1920,
										1921
									],
									[
										1951,
										1952
									],
									[
										1968,
										1969
									],
									[
										1974,
										1975
									],
									[
										1986,
										1987
									],
									[
										2027,
										2028
									],
									[
										2099,
										2100
									],
									[
										2121,
										2122
									],
									[
										2136,
										2137
									],
									[
										2194,
										2195
									],
									[
										2272,
										2273
									],
									[
										2282,
										2283
									],
									[
										2329,
										2330
									],
									[
										2336,
										2337
									],
									[
										2368,
										2369
									],
									[
										2375,
										2376
									],
									[
										2387,
										2388
									],
									[
										2395,
										2396
									],
									[
										2428,
										2429
									],
									[
										2429,
										2430
									],
									[
										2453,
										2454
									],
									[
										2472,
										2473
									],
									[
										2496,
										2497
									],
									[
										2515,
										2516
									]
								],
								"scope": "<default>.l1.rb"
							},
							"rb_l2_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										786,
										787
									],
									[
										815,
										816
									],
									[
										919,
										920
									],
									[
										949,
										950
									],
									[
										1136,
										1137
									],
									[
										1154,
										1155
									],
									[
										1332,
										1333
									],
									[
										1345,
										1346
									],
									[
										1378,
										1379
									],
									[
										1379,
										1380
									],
									[
										1381,
										1382
									],
									[
										1458,
										1459
									],
									[
										1465,
										1466
									],
									[
										1527,
										1528
									],
									[
										1756,
										1757
									],
									[
										1757,
										1758
									],
									[
										1773,
										1774
									],
									[
										1801,
										1802
									],
									[
										1944,
										1945
									],
									[
										1945,
										1946
									],
									[
										2003,
										2004
									],
									[
										2021,
										2022
									],
									[
										2166,
										2167
									],
									[
										2174,
										2175
									],
									[
										2464,
										2465
									],
									[
										2471,
										2472
									],
									[
										2507,
										2508
									],
									[
										2514,
										2515
									]
								],
								"scope": "<default>.l2.rb"
							},
							"rb_l3_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										1401,
										1402
									],
									[
										1448,
										1449
									],
									[
										1485,
										1486
									],
									[
										1517,
										1518
									]
								],
								"scope": "<default>.l3.rb"
							},
							"rb_l4_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										1439,
										1440
									],
									[
										1440,
										1441
									],
									[
										1515,
										1516
									],
									[
										1516,
										1517
									]
								],
								"scope": "<default>.l4.rb"
							}
						},
						"selection":
						[
							[
								2321,
								2321
							]
						],
						"settings":
						{
							"AutoSetSyntax/is_transient": false,
							"apply_syntax_touched": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_hover_provider_count": 2,
							"lsp_uri": "file:///home/alexzander/Alexzander__/programming/rust/python/examples/object_trait.rs",
							"rainbow_checked": true,
							"show_definitions": false,
							"syntax": "Packages/User/Rust-Test.sublime-syntax",
							"tab_size": 4
						},
						"translation.x": 0.0,
						"translation.y": 3762.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/list/append.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2809,
						"regions":
						{
							"rb_l0_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										243,
										244
									],
									[
										319,
										320
									],
									[
										701,
										702
									],
									[
										847,
										848
									],
									[
										883,
										884
									],
									[
										1024,
										1025
									],
									[
										1060,
										1061
									],
									[
										1201,
										1202
									],
									[
										1232,
										1233
									],
									[
										1390,
										1391
									],
									[
										1421,
										1422
									],
									[
										1563,
										1564
									],
									[
										1592,
										1593
									],
									[
										1739,
										1740
									],
									[
										1772,
										1773
									],
									[
										1923,
										1924
									],
									[
										1956,
										1957
									],
									[
										2095,
										2096
									],
									[
										2125,
										2126
									],
									[
										2266,
										2267
									],
									[
										2297,
										2298
									],
									[
										2495,
										2496
									],
									[
										2525,
										2526
									],
									[
										2655,
										2656
									],
									[
										2687,
										2688
									],
									[
										2807,
										2808
									]
								],
								"scope": "<default>.l0.rb"
							},
							"rb_l1_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										287,
										288
									],
									[
										303,
										304
									],
									[
										721,
										722
									],
									[
										746,
										747
									],
									[
										761,
										762
									],
									[
										845,
										846
									],
									[
										903,
										904
									],
									[
										933,
										934
									],
									[
										948,
										949
									],
									[
										1022,
										1023
									],
									[
										1080,
										1081
									],
									[
										1110,
										1111
									],
									[
										1125,
										1126
									],
									[
										1199,
										1200
									],
									[
										1252,
										1253
									],
									[
										1274,
										1275
									],
									[
										1289,
										1290
									],
									[
										1388,
										1389
									],
									[
										1441,
										1442
									],
									[
										1464,
										1465
									],
									[
										1479,
										1480
									],
									[
										1561,
										1562
									],
									[
										1612,
										1613
									],
									[
										1635,
										1636
									],
									[
										1650,
										1651
									],
									[
										1737,
										1738
									],
									[
										1792,
										1793
									],
									[
										1818,
										1819
									],
									[
										1833,
										1834
									],
									[
										1921,
										1922
									],
									[
										1976,
										1977
									],
									[
										2004,
										2005
									],
									[
										2019,
										2020
									],
									[
										2093,
										2094
									],
									[
										2145,
										2146
									],
									[
										2168,
										2169
									],
									[
										2183,
										2184
									],
									[
										2264,
										2265
									],
									[
										2304,
										2305
									],
									[
										2365,
										2366
									],
									[
										2385,
										2386
									],
									[
										2408,
										2409
									],
									[
										2423,
										2424
									],
									[
										2493,
										2494
									],
									[
										2545,
										2546
									],
									[
										2568,
										2569
									],
									[
										2583,
										2584
									],
									[
										2653,
										2654
									],
									[
										2707,
										2708
									],
									[
										2733,
										2734
									],
									[
										2748,
										2749
									],
									[
										2805,
										2806
									]
								],
								"scope": "<default>.l1.rb"
							},
							"rb_l2_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										791,
										792
									],
									[
										825,
										826
									],
									[
										978,
										979
									],
									[
										1002,
										1003
									],
									[
										1155,
										1156
									],
									[
										1179,
										1180
									],
									[
										1332,
										1333
									],
									[
										1368,
										1369
									],
									[
										1509,
										1510
									],
									[
										1541,
										1542
									],
									[
										1680,
										1681
									],
									[
										1717,
										1718
									],
									[
										1863,
										1864
									],
									[
										1901,
										1902
									],
									[
										2049,
										2050
									],
									[
										2073,
										2074
									],
									[
										2213,
										2214
									],
									[
										2244,
										2245
									],
									[
										2323,
										2324
									],
									[
										2364,
										2365
									],
									[
										2453,
										2454
									],
									[
										2473,
										2474
									],
									[
										2613,
										2614
									],
									[
										2633,
										2634
									],
									[
										2778,
										2779
									],
									[
										2785,
										2786
									]
								],
								"scope": "<default>.l2.rb"
							},
							"rb_l3_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										805,
										806
									],
									[
										824,
										825
									],
									[
										994,
										995
									],
									[
										1001,
										1002
									],
									[
										1171,
										1172
									],
									[
										1178,
										1179
									],
									[
										1347,
										1348
									],
									[
										1367,
										1368
									],
									[
										1522,
										1523
									],
									[
										1540,
										1541
									],
									[
										1696,
										1697
									],
									[
										1716,
										1717
									],
									[
										1878,
										1879
									],
									[
										1900,
										1901
									],
									[
										2064,
										2065
									],
									[
										2072,
										2073
									],
									[
										2226,
										2227
									],
									[
										2243,
										2244
									],
									[
										2466,
										2467
									],
									[
										2472,
										2473
									],
									[
										2626,
										2627
									],
									[
										2632,
										2633
									]
								],
								"scope": "<default>.l3.rb"
							},
							"rb_l4_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										814,
										815
									],
									[
										823,
										824
									],
									[
										1361,
										1362
									],
									[
										1366,
										1367
									],
									[
										1533,
										1534
									],
									[
										1539,
										1540
									],
									[
										1708,
										1709
									],
									[
										1715,
										1716
									],
									[
										1892,
										1893
									],
									[
										1899,
										1900
									],
									[
										2236,
										2237
									],
									[
										2242,
										2243
									]
								],
								"scope": "<default>.l4.rb"
							}
						},
						"selection":
						[
							[
								2526,
								2526
							]
						],
						"settings":
						{
							"AutoSetSyntax/is_transient": false,
							"apply_syntax_touched": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_uri": "file:///home/alexzander/Alexzander__/programming/rust/python/src/list/append.rs",
							"rainbow_checked": true,
							"show_definitions": true,
							"syntax": "Packages/User/Rust-Test.sublime-syntax",
							"tab_size": 4
						},
						"translation.x": 0.0,
						"translation.y": 3529.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/list/extend.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 788,
						"regions":
						{
							"rb_l0_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										13,
										14
									],
									[
										29,
										30
									],
									[
										112,
										113
									],
									[
										183,
										184
									],
									[
										233,
										234
									],
									[
										403,
										404
									],
									[
										433,
										434
									],
									[
										589,
										590
									],
									[
										621,
										622
									],
									[
										785,
										786
									]
								],
								"scope": "<default>.l0.rb"
							},
							"rb_l1_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										151,
										152
									],
									[
										167,
										168
									],
									[
										248,
										249
									],
									[
										276,
										277
									],
									[
										291,
										292
									],
									[
										401,
										402
									],
									[
										448,
										449
									],
									[
										470,
										471
									],
									[
										485,
										486
									],
									[
										587,
										588
									],
									[
										636,
										637
									],
									[
										663,
										664
									],
									[
										678,
										679
									],
									[
										783,
										784
									]
								],
								"scope": "<default>.l1.rb"
							},
							"rb_l2_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										333,
										334
									],
									[
										382,
										383
									],
									[
										518,
										519
									],
									[
										519,
										520
									],
									[
										521,
										522
									],
									[
										568,
										569
									],
									[
										714,
										715
									],
									[
										715,
										716
									],
									[
										717,
										718
									],
									[
										764,
										765
									]
								],
								"scope": "<default>.l2.rb"
							},
							"rb_l3_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										363,
										364
									],
									[
										371,
										372
									],
									[
										551,
										552
									],
									[
										557,
										558
									],
									[
										747,
										748
									],
									[
										753,
										754
									]
								],
								"scope": "<default>.l3.rb"
							}
						},
						"selection":
						[
							[
								622,
								622
							]
						],
						"settings":
						{
							"AutoSetSyntax/is_transient": false,
							"_anf_new": "",
							"apply_syntax_touched": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_uri": "file:///home/alexzander/Alexzander__/programming/rust/python/src/list/extend.rs",
							"rainbow_checked": true,
							"show_definitions": true,
							"syntax": "Packages/User/Rust-Test.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 798.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "src/list/mod.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 156,
						"regions":
						{
						},
						"selection":
						[
							[
								120,
								120
							]
						],
						"settings":
						{
							"AutoSetSyntax/is_transient": false,
							"apply_syntax_touched": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_uri": "file:///home/alexzander/Alexzander__/programming/rust/python/src/list/mod.rs",
							"rainbow_checked": true,
							"show_definitions": true,
							"syntax": "Packages/User/Rust-Test.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/object.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1676,
						"regions":
						{
							"rb_l0_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										345,
										346
									],
									[
										469,
										470
									],
									[
										642,
										643
									],
									[
										975,
										976
									],
									[
										1003,
										1004
									],
									[
										1674,
										1675
									]
								],
								"scope": "<default>.l0.rb"
							},
							"rb_l1_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										390,
										391
									],
									[
										396,
										397
									],
									[
										450,
										451
									],
									[
										456,
										457
									],
									[
										672,
										673
									],
									[
										677,
										678
									],
									[
										710,
										711
									],
									[
										719,
										720
									],
									[
										752,
										753
									],
									[
										761,
										762
									],
									[
										798,
										799
									],
									[
										809,
										810
									],
									[
										846,
										847
									],
									[
										857,
										858
									],
									[
										892,
										893
									],
									[
										900,
										901
									],
									[
										931,
										932
									],
									[
										936,
										937
									],
									[
										967,
										968
									],
									[
										972,
										973
									],
									[
										1015,
										1016
									],
									[
										1044,
										1045
									],
									[
										1056,
										1057
									],
									[
										1672,
										1673
									]
								],
								"scope": "<default>.l1.rb"
							},
							"rb_l2_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										1143,
										1144
									],
									[
										1666,
										1667
									]
								],
								"scope": "<default>.l2.rb"
							},
							"rb_l3_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										1169,
										1170
									],
									[
										1175,
										1176
									],
									[
										1186,
										1187
									],
									[
										1201,
										1202
									],
									[
										1229,
										1230
									],
									[
										1234,
										1235
									],
									[
										1245,
										1246
									],
									[
										1259,
										1260
									],
									[
										1287,
										1288
									],
									[
										1292,
										1293
									],
									[
										1303,
										1304
									],
									[
										1317,
										1318
									],
									[
										1347,
										1348
									],
									[
										1354,
										1355
									],
									[
										1365,
										1366
									],
									[
										1381,
										1382
									],
									[
										1411,
										1412
									],
									[
										1418,
										1419
									],
									[
										1429,
										1430
									],
									[
										1445,
										1446
									],
									[
										1474,
										1475
									],
									[
										1482,
										1483
									],
									[
										1493,
										1494
									],
									[
										1510,
										1511
									],
									[
										1537,
										1538
									],
									[
										1543,
										1544
									],
									[
										1554,
										1555
									],
									[
										1569,
										1570
									],
									[
										1596,
										1597
									],
									[
										1602,
										1603
									],
									[
										1613,
										1614
									],
									[
										1628,
										1629
									]
								],
								"scope": "<default>.l3.rb"
							}
						},
						"selection":
						[
							[
								375,
								375
							]
						],
						"settings":
						{
							"AutoSetSyntax/is_transient": false,
							"apply_syntax_touched": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_uri": "file:///home/alexzander/Alexzander__/programming/rust/python/src/object.rs",
							"rainbow_checked": true,
							"show_definitions": true,
							"syntax": "Packages/User/Rust-Test.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1862.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/integer.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2576,
						"regions":
						{
							"rb_l0_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										59,
										60
									],
									[
										72,
										73
									],
									[
										75,
										76
									],
									[
										89,
										90
									],
									[
										92,
										93
									],
									[
										108,
										109
									],
									[
										111,
										112
									],
									[
										124,
										125
									],
									[
										127,
										128
									],
									[
										138,
										139
									],
									[
										205,
										206
									],
									[
										224,
										225
									],
									[
										283,
										284
									],
									[
										451,
										452
									],
									[
										504,
										505
									],
									[
										887,
										888
									],
									[
										940,
										941
									],
									[
										1323,
										1324
									],
									[
										1369,
										1370
									],
									[
										1574,
										1575
									],
									[
										1651,
										1652
									],
									[
										1809,
										1810
									],
									[
										1893,
										1894
									],
									[
										2003,
										2004
									],
									[
										2096,
										2097
									],
									[
										2282,
										2283
									],
									[
										2396,
										2397
									],
									[
										2573,
										2574
									]
								],
								"scope": "<default>.l0.rb"
							},
							"rb_l1_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										66,
										67
									],
									[
										71,
										72
									],
									[
										82,
										83
									],
									[
										88,
										89
									],
									[
										99,
										100
									],
									[
										107,
										108
									],
									[
										118,
										119
									],
									[
										123,
										124
									],
									[
										134,
										135
									],
									[
										137,
										138
									],
									[
										375,
										376
									],
									[
										387,
										388
									],
									[
										397,
										398
									],
									[
										449,
										450
									],
									[
										620,
										621
									],
									[
										641,
										642
									],
									[
										651,
										652
									],
									[
										885,
										886
									],
									[
										1056,
										1057
									],
									[
										1077,
										1078
									],
									[
										1087,
										1088
									],
									[
										1321,
										1322
									],
									[
										1499,
										1500
									],
									[
										1511,
										1512
									],
									[
										1521,
										1522
									],
									[
										1572,
										1573
									],
									[
										1668,
										1669
									],
									[
										1674,
										1675
									],
									[
										1686,
										1687
									],
									[
										1729,
										1730
									],
									[
										1746,
										1747
									],
									[
										1752,
										1753
									],
									[
										1764,
										1765
									],
									[
										1807,
										1808
									],
									[
										1905,
										1906
									],
									[
										1939,
										1940
									],
									[
										1956,
										1957
									],
									[
										2001,
										2002
									],
									[
										2108,
										2109
									],
									[
										2142,
										2143
									],
									[
										2159,
										2160
									],
									[
										2280,
										2281
									],
									[
										2407,
										2408
									],
									[
										2427,
										2428
									],
									[
										2437,
										2438
									],
									[
										2483,
										2484
									],
									[
										2495,
										2496
									],
									[
										2515,
										2516
									],
									[
										2525,
										2526
									],
									[
										2571,
										2572
									]
								],
								"scope": "<default>.l1.rb"
							},
							"rb_l2_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										411,
										412
									],
									[
										443,
										444
									],
									[
										729,
										730
									],
									[
										730,
										731
									],
									[
										732,
										733
									],
									[
										833,
										834
									],
									[
										847,
										848
									],
									[
										879,
										880
									],
									[
										1165,
										1166
									],
									[
										1166,
										1167
									],
									[
										1168,
										1169
									],
									[
										1269,
										1270
									],
									[
										1283,
										1284
									],
									[
										1315,
										1316
									],
									[
										1535,
										1536
									],
									[
										1566,
										1567
									],
									[
										1703,
										1704
									],
									[
										1723,
										1724
									],
									[
										1781,
										1782
									],
									[
										1801,
										1802
									],
									[
										1972,
										1973
									],
									[
										1995,
										1996
									],
									[
										2188,
										2189
									],
									[
										2203,
										2204
									],
									[
										2220,
										2221
									],
									[
										2274,
										2275
									]
								],
								"scope": "<default>.l2.rb"
							},
							"rb_l3_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										803,
										804
									],
									[
										806,
										807
									],
									[
										814,
										815
									],
									[
										815,
										816
									],
									[
										1239,
										1240
									],
									[
										1242,
										1243
									],
									[
										1250,
										1251
									],
									[
										1251,
										1252
									]
								],
								"scope": "<default>.l3.rb"
							}
						},
						"selection":
						[
							[
								278,
								278
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"color_scheme": "Packages/Theme - One Dark/One Dark.tmTheme",
							"lsp_hover_provider_count": 2,
							"lsp_uri": "file:///home/alexzander/Alexzander__/programming/rust/python/src/integer.rs",
							"rainbow_checked": true,
							"show_definitions": false,
							"syntax": "Packages/User/Rust-Test.sublime-syntax",
							"tab_size": 4
						},
						"translation.x": 0.0,
						"translation.y": 3648.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "TODO.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 864,
						"regions":
						{
							"rb_l0_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										385,
										386
									],
									[
										386,
										387
									],
									[
										395,
										396
									],
									[
										396,
										397
									],
									[
										474,
										475
									],
									[
										475,
										476
									],
									[
										568,
										569
									],
									[
										591,
										592
									],
									[
										861,
										862
									],
									[
										863,
										864
									]
								],
								"scope": "<default>.l0.rb"
							}
						},
						"selection":
						[
							[
								60,
								60
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"lsp_uri": "file:///home/alexzander/Alexzander__/programming/rust/python/TODO.md",
							"rainbow_checked": true,
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 114.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "examples/python_int.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 760,
						"regions":
						{
							"rb_l0_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										3,
										4
									],
									[
										169,
										170
									],
									[
										267,
										268
									],
									[
										268,
										269
									],
									[
										270,
										271
									],
									[
										759,
										760
									]
								],
								"scope": "<default>.l0.rb"
							},
							"rb_l1_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										9,
										10
									],
									[
										168,
										169
									],
									[
										348,
										349
									],
									[
										354,
										355
									],
									[
										381,
										382
									],
									[
										387,
										388
									],
									[
										457,
										458
									],
									[
										461,
										462
									],
									[
										531,
										532
									],
									[
										535,
										536
									],
									[
										563,
										564
									],
									[
										568,
										569
									],
									[
										580,
										581
									],
									[
										585,
										586
									],
									[
										597,
										598
									],
									[
										603,
										604
									],
									[
										617,
										618
									],
									[
										622,
										623
									],
									[
										635,
										636
									],
									[
										641,
										642
									],
									[
										653,
										654
									],
									[
										659,
										660
									],
									[
										694,
										695
									],
									[
										695,
										696
									],
									[
										713,
										714
									],
									[
										726,
										727
									],
									[
										741,
										742
									],
									[
										754,
										755
									]
								],
								"scope": "<default>.l1.rb"
							}
						},
						"selection":
						[
							[
								208,
								208
							]
						],
						"settings":
						{
							"AutoSetSyntax/is_transient": false,
							"apply_syntax_touched": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_hover_provider_count": 2,
							"lsp_uri": "file:///home/alexzander/Alexzander__/programming/rust/python/examples/integer_example.rs",
							"rainbow_checked": true,
							"show_definitions": false,
							"syntax": "Packages/User/Rust-Test.sublime-syntax",
							"tab_size": 4
						},
						"translation.x": 0.0,
						"translation.y": 1026.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "examples/python_list2.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4912,
						"regions":
						{
							"rb_l0_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										2,
										3
									],
									[
										167,
										168
									],
									[
										832,
										833
									],
									[
										833,
										834
									],
									[
										835,
										836
									],
									[
										4910,
										4911
									]
								],
								"scope": "<default>.l0.rb"
							},
							"rb_l1_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										8,
										9
									],
									[
										166,
										167
									],
									[
										905,
										906
									],
									[
										928,
										929
									],
									[
										1072,
										1073
									],
									[
										1076,
										1077
									],
									[
										1142,
										1143
									],
									[
										1150,
										1151
									],
									[
										1180,
										1181
									],
									[
										1184,
										1185
									],
									[
										1235,
										1236
									],
									[
										1271,
										1272
									],
									[
										1393,
										1394
									],
									[
										1401,
										1402
									],
									[
										1431,
										1432
									],
									[
										1439,
										1440
									],
									[
										1469,
										1470
									],
									[
										1477,
										1478
									],
									[
										1535,
										1536
									],
									[
										1558,
										1559
									],
									[
										1589,
										1590
									],
									[
										1625,
										1626
									],
									[
										1810,
										1811
									],
									[
										1855,
										1856
									],
									[
										1982,
										1983
									],
									[
										1998,
										1999
									],
									[
										2028,
										2029
									],
									[
										2045,
										2046
									],
									[
										2101,
										2102
									],
									[
										2107,
										2108
									],
									[
										2153,
										2154
									],
									[
										2166,
										2167
									],
									[
										2214,
										2215
									],
									[
										2232,
										2233
									],
									[
										2486,
										2487
									],
									[
										2487,
										2488
									],
									[
										2489,
										2490
									],
									[
										2512,
										2513
									],
									[
										2524,
										2525
									],
									[
										2529,
										2530
									],
									[
										2541,
										2542
									],
									[
										2548,
										2549
									],
									[
										2560,
										2561
									],
									[
										2582,
										2583
									],
									[
										2594,
										2595
									],
									[
										2601,
										2602
									],
									[
										2613,
										2614
									],
									[
										2618,
										2619
									],
									[
										2720,
										2721
									],
									[
										2721,
										2722
									],
									[
										2729,
										2730
									],
									[
										2730,
										2731
									],
									[
										2742,
										2743
									],
									[
										2757,
										2758
									],
									[
										2777,
										2778
									],
									[
										2782,
										2783
									],
									[
										2793,
										2794
									],
									[
										2794,
										2795
									],
									[
										2948,
										2949
									],
									[
										2949,
										2950
									],
									[
										2961,
										2962
									],
									[
										2981,
										2982
									],
									[
										2995,
										2996
									],
									[
										3014,
										3015
									],
									[
										3026,
										3027
									],
									[
										3052,
										3053
									],
									[
										3078,
										3079
									],
									[
										3101,
										3102
									],
									[
										3113,
										3114
									],
									[
										3126,
										3127
									]
								],
								"scope": "<default>.l1.rb"
							},
							"rb_l2_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										918,
										919
									],
									[
										927,
										928
									],
									[
										1246,
										1247
									],
									[
										1270,
										1271
									],
									[
										1548,
										1549
									],
									[
										1557,
										1558
									],
									[
										1600,
										1601
									],
									[
										1624,
										1625
									],
									[
										1824,
										1825
									],
									[
										1854,
										1855
									],
									[
										1992,
										1993
									],
									[
										1997,
										1998
									],
									[
										2038,
										2039
									],
									[
										2044,
										2045
									],
									[
										2218,
										2219
									],
									[
										2231,
										2232
									],
									[
										2504,
										2505
									],
									[
										2506,
										2507
									],
									[
										2580,
										2581
									],
									[
										2581,
										2582
									],
									[
										3000,
										3001
									],
									[
										3013,
										3014
									],
									[
										3031,
										3032
									],
									[
										3051,
										3052
									],
									[
										3089,
										3090
									],
									[
										3100,
										3101
									]
								],
								"scope": "<default>.l2.rb"
							},
							"rb_l3_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										1259,
										1260
									],
									[
										1269,
										1270
									],
									[
										1622,
										1623
									],
									[
										1623,
										1624
									],
									[
										1837,
										1838
									],
									[
										1853,
										1854
									]
								],
								"scope": "<default>.l3.rb"
							}
						},
						"selection":
						[
							[
								2952,
								2952
							]
						],
						"settings":
						{
							"AutoSetSyntax/is_transient": false,
							"apply_syntax_touched": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_uri": "file:///home/alexzander/Alexzander__/programming/rust/python/examples/python_list.rs",
							"rainbow_checked": true,
							"show_definitions": true,
							"syntax": "Packages/User/Rust-Test.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3221.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "examples/python_list_extend.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 205,
						"regions":
						{
							"rb_l0_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										24,
										25
									],
									[
										25,
										26
									],
									[
										27,
										28
									],
									[
										204,
										205
									]
								],
								"scope": "<default>.l0.rb"
							},
							"rb_l1_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										57,
										58
									],
									[
										58,
										59
									],
									[
										77,
										78
									],
									[
										88,
										89
									],
									[
										106,
										107
									],
									[
										134,
										135
									],
									[
										152,
										153
									],
									[
										183,
										184
									],
									[
										196,
										197
									],
									[
										201,
										202
									]
								],
								"scope": "<default>.l1.rb"
							},
							"rb_l2_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										119,
										120
									],
									[
										133,
										134
									],
									[
										163,
										164
									],
									[
										182,
										183
									]
								],
								"scope": "<default>.l2.rb"
							}
						},
						"selection":
						[
							[
								185,
								185
							]
						],
						"settings":
						{
							"AutoSetSyntax/is_transient": false,
							"_anf_new": "",
							"apply_syntax_touched": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_uri": "file:///home/alexzander/Alexzander__/programming/rust/python/examples/python_list_extend.rs",
							"rainbow_checked": true,
							"show_definitions": true,
							"syntax": "Packages/User/Rust-Test.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 76.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "src/lib.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 929,
						"regions":
						{
						},
						"selection":
						[
							[
								927,
								927
							]
						],
						"settings":
						{
							"AutoSetSyntax/is_transient": false,
							"apply_syntax_touched": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								},
								{
									"characters": ".[",
									"selector": "meta.tag, source - comment - string.quoted.double.block - string.quoted.single.block - string.unquoted.heredoc",
									"server": "LSP-pyright"
								}
							],
							"lsp_active": true,
							"lsp_hover_provider_count": 1,
							"lsp_uri": "file:///home/alexzander/Alexzander__/programming/rust/python/src/lib.rs",
							"rainbow_checked": true,
							"show_definitions": false,
							"syntax": "Packages/Python/Python.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 1140.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12587,
						"regions":
						{
							"rb_l0_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										2040,
										2041
									],
									[
										2083,
										2084
									],
									[
										2086,
										2087
									],
									[
										3182,
										3183
									],
									[
										3185,
										3186
									],
									[
										3224,
										3225
									],
									[
										3259,
										3260
									],
									[
										3783,
										3784
									],
									[
										5995,
										5996
									],
									[
										6034,
										6035
									],
									[
										6037,
										6038
									],
									[
										6077,
										6078
									],
									[
										6080,
										6081
									],
									[
										6123,
										6124
									],
									[
										6148,
										6149
									],
									[
										7033,
										7034
									],
									[
										7037,
										7038
									],
									[
										7080,
										7081
									],
									[
										7119,
										7120
									],
									[
										7233,
										7234
									],
									[
										9389,
										9390
									],
									[
										9432,
										9433
									],
									[
										9454,
										9455
									],
									[
										10563,
										10564
									],
									[
										10567,
										10568
									],
									[
										10621,
										10622
									],
									[
										10635,
										10636
									],
									[
										10636,
										10637
									],
									[
										10643,
										10644
									],
									[
										10644,
										10645
									],
									[
										10646,
										10647
									],
									[
										10801,
										10802
									],
									[
										10805,
										10806
									],
									[
										10860,
										10861
									],
									[
										10898,
										10899
									],
									[
										10903,
										10904
									],
									[
										10910,
										10911
									],
									[
										10927,
										10928
									],
									[
										10983,
										10984
									],
									[
										12585,
										12586
									]
								],
								"scope": "<default>.l0.rb"
							},
							"rb_l1_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										2047,
										2048
									],
									[
										2082,
										2083
									],
									[
										2109,
										2110
									],
									[
										3181,
										3182
									],
									[
										3676,
										3677
									],
									[
										3719,
										3720
									],
									[
										3764,
										3765
									],
									[
										3772,
										3773
									],
									[
										6087,
										6088
									],
									[
										6122,
										6123
									],
									[
										6209,
										6210
									],
									[
										6252,
										6253
									],
									[
										6332,
										6333
									],
									[
										6375,
										6376
									],
									[
										6920,
										6921
									],
									[
										6939,
										6940
									],
									[
										6946,
										6947
									],
									[
										6989,
										6990
									],
									[
										7007,
										7008
									],
									[
										7012,
										7013
									],
									[
										7044,
										7045
									],
									[
										7079,
										7080
									],
									[
										7175,
										7176
									],
									[
										7182,
										7183
									],
									[
										7200,
										7201
									],
									[
										7205,
										7206
									],
									[
										7212,
										7213
									],
									[
										7231,
										7232
									],
									[
										9396,
										9397
									],
									[
										9431,
										9432
									],
									[
										9974,
										9975
									],
									[
										10017,
										10018
									],
									[
										10059,
										10060
									],
									[
										10078,
										10079
									],
									[
										10142,
										10143
									],
									[
										10192,
										10193
									],
									[
										10211,
										10212
									],
									[
										10230,
										10231
									],
									[
										10232,
										10233
									],
									[
										10271,
										10272
									],
									[
										10423,
										10424
									],
									[
										10473,
										10474
									],
									[
										10496,
										10497
									],
									[
										10525,
										10526
									],
									[
										10527,
										10528
									],
									[
										10561,
										10562
									],
									[
										10574,
										10575
									],
									[
										10620,
										10621
									],
									[
										10685,
										10686
									],
									[
										10686,
										10687
									],
									[
										10689,
										10690
									],
									[
										10708,
										10709
									],
									[
										10710,
										10711
									],
									[
										10756,
										10757
									],
									[
										10775,
										10776
									],
									[
										10796,
										10797
									],
									[
										10798,
										10799
									],
									[
										10799,
										10800
									],
									[
										10812,
										10813
									],
									[
										10859,
										10860
									],
									[
										11719,
										11720
									],
									[
										11724,
										11725
									],
									[
										11727,
										11728
									],
									[
										11751,
										11752
									],
									[
										11753,
										11754
									],
									[
										12314,
										12315
									],
									[
										12334,
										12335
									],
									[
										12358,
										12359
									],
									[
										12360,
										12361
									],
									[
										12436,
										12437
									],
									[
										12460,
										12461
									],
									[
										12489,
										12490
									],
									[
										12491,
										12492
									],
									[
										12583,
										12584
									]
								],
								"scope": "<default>.l1.rb"
							},
							"rb_l2_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										2117,
										2118
									],
									[
										2309,
										2310
									],
									[
										2318,
										2319
									],
									[
										2968,
										2969
									],
									[
										3683,
										3684
									],
									[
										3718,
										3719
									],
									[
										6216,
										6217
									],
									[
										6251,
										6252
									],
									[
										6339,
										6340
									],
									[
										6374,
										6375
									],
									[
										6953,
										6954
									],
									[
										6988,
										6989
									],
									[
										9981,
										9982
									],
									[
										10016,
										10017
									],
									[
										10151,
										10152
									],
									[
										10191,
										10192
									],
									[
										10253,
										10254
									],
									[
										10264,
										10265
									],
									[
										10432,
										10433
									],
									[
										10472,
										10473
									],
									[
										10734,
										10735
									],
									[
										10735,
										10736
									],
									[
										10745,
										10746
									],
									[
										10750,
										10751
									],
									[
										10794,
										10795
									],
									[
										10795,
										10796
									],
									[
										11767,
										11768
									],
									[
										11772,
										11773
									],
									[
										11820,
										11821
									],
									[
										11821,
										11822
									],
									[
										11852,
										11853
									],
									[
										11940,
										11941
									],
									[
										11955,
										11956
									],
									[
										11966,
										11967
									],
									[
										11973,
										11974
									],
									[
										12095,
										12096
									],
									[
										12110,
										12111
									],
									[
										12125,
										12126
									],
									[
										12143,
										12144
									],
									[
										12144,
										12145
									],
									[
										12174,
										12175
									],
									[
										12270,
										12271
									],
									[
										12290,
										12291
									],
									[
										12307,
										12308
									],
									[
										12352,
										12353
									],
									[
										12357,
										12358
									],
									[
										12387,
										12388
									],
									[
										12394,
										12395
									],
									[
										12422,
										12423
									],
									[
										12429,
										12430
									],
									[
										12522,
										12523
									],
									[
										12533,
										12534
									],
									[
										12565,
										12566
									],
									[
										12576,
										12577
									]
								],
								"scope": "<default>.l2.rb"
							},
							"rb_l3_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										2331,
										2332
									],
									[
										2800,
										2801
									],
									[
										10258,
										10259
									],
									[
										10263,
										10264
									],
									[
										11956,
										11957
									],
									[
										11957,
										11958
									],
									[
										11960,
										11961
									],
									[
										11965,
										11966
									],
									[
										11993,
										11994
									],
									[
										11994,
										11995
									],
									[
										11997,
										11998
									],
									[
										12002,
										12003
									],
									[
										12005,
										12006
									],
									[
										12085,
										12086
									],
									[
										12204,
										12205
									],
									[
										12216,
										12217
									],
									[
										12247,
										12248
									],
									[
										12259,
										12260
									],
									[
										12291,
										12292
									],
									[
										12292,
										12293
									],
									[
										12301,
										12302
									],
									[
										12306,
										12307
									]
								],
								"scope": "<default>.l3.rb"
							},
							"rb_l4_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										2377,
										2378
									],
									[
										2790,
										2791
									],
									[
										12035,
										12036
									],
									[
										12037,
										12038
									],
									[
										12068,
										12069
									],
									[
										12070,
										12071
									]
								],
								"scope": "<default>.l4.rb"
							}
						},
						"selection":
						[
							[
								10026,
								10026
							]
						],
						"settings":
						{
							"AutoSetSyntax/is_transient": false,
							"apply_syntax_touched": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_uri": "file:///home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/iter/traits/collect.rs",
							"rainbow_checked": true,
							"show_definitions": true,
							"syntax": "Packages/User/Rust-Test.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13143.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 19,
					"file": "examples/enum_dict.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 112,
						"regions":
						{
							"rb_l0_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										45,
										46
									],
									[
										61,
										62
									],
									[
										71,
										72
									],
									[
										72,
										73
									],
									[
										74,
										75
									],
									[
										111,
										112
									]
								],
								"scope": "<default>.l0.rb"
							}
						},
						"selection":
						[
							[
								106,
								106
							]
						],
						"settings":
						{
							"AutoSetSyntax/is_transient": false,
							"_anf_new": "",
							"apply_syntax_touched": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_uri": "file:///home/alexzander/Alexzander__/programming/rust/python/examples/enum_dict.rs",
							"rainbow_checked": true,
							"show_definitions": true,
							"syntax": "Packages/User/Rust-Test.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 38.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 20,
					"file": "/home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25305,
						"regions":
						{
							"rb_l0_<default>":
							{
								"flags": 272,
								"regions": "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",
								"scope": "<default>.l0.rb"
							},
							"rb_l1_<default>":
							{
								"flags": 272,
								"regions": "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",
								"scope": "<default>.l1.rb"
							},
							"rb_l2_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										5621,
										5622
									],
									[
										5626,
										5627
									],
									[
										5737,
										5738
									],
									[
										5772,
										5773
									],
									[
										7183,
										7184
									],
									[
										7188,
										7189
									],
									[
										7299,
										7300
									],
									[
										7334,
										7335
									],
									[
										10000,
										10001
									],
									[
										10035,
										10036
									],
									[
										13314,
										13315
									],
									[
										13438,
										13439
									],
									[
										13551,
										13552
									],
									[
										13586,
										13587
									],
									[
										14411,
										14412
									],
									[
										14450,
										14451
									],
									[
										14515,
										14516
									],
									[
										14554,
										14555
									],
									[
										17219,
										17220
									],
									[
										17258,
										17259
									],
									[
										17323,
										17324
									],
									[
										17362,
										17363
									],
									[
										17878,
										17879
									],
									[
										17884,
										17885
									],
									[
										18176,
										18177
									],
									[
										18182,
										18183
									],
									[
										18732,
										18733
									],
									[
										18738,
										18739
									],
									[
										18746,
										18747
									],
									[
										18747,
										18748
									],
									[
										19280,
										19281
									],
									[
										19285,
										19286
									],
									[
										20511,
										20512
									],
									[
										20516,
										20517
									],
									[
										20920,
										20921
									],
									[
										20935,
										20936
									],
									[
										23907,
										23908
									],
									[
										23908,
										23909
									],
									[
										24095,
										24096
									],
									[
										24096,
										24097
									],
									[
										24285,
										24286
									],
									[
										24286,
										24287
									],
									[
										24452,
										24453
									],
									[
										24453,
										24454
									],
									[
										24739,
										24740
									],
									[
										24740,
										24741
									],
									[
										24916,
										24917
									],
									[
										24917,
										24918
									],
									[
										25294,
										25295
									],
									[
										25295,
										25296
									]
								],
								"scope": "<default>.l2.rb"
							},
							"rb_l3_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										13323,
										13324
									],
									[
										13365,
										13366
									],
									[
										20928,
										20929
									],
									[
										20934,
										20935
									]
								],
								"scope": "<default>.l3.rb"
							}
						},
						"selection":
						[
							[
								13596,
								13596
							]
						],
						"settings":
						{
							"AutoSetSyntax/is_transient": false,
							"apply_syntax_touched": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_uri": "file:///home/alexzander/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/convert/mod.rs",
							"rainbow_checked": true,
							"show_definitions": true,
							"syntax": "Packages/User/Rust-Test.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 13675.0,
						"zoom_level": 1.0
					},
					"stack_index": 23,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 21,
					"file": "src/builtins.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1076,
						"regions":
						{
							"rb_l0_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										190,
										191
									],
									[
										197,
										198
									],
									[
										199,
										200
									],
									[
										226,
										227
									],
									[
										276,
										277
									],
									[
										283,
										284
									],
									[
										285,
										286
									],
									[
										314,
										315
									],
									[
										365,
										366
									],
									[
										372,
										373
									],
									[
										374,
										375
									],
									[
										397,
										398
									],
									[
										440,
										441
									],
									[
										452,
										453
									],
									[
										463,
										464
									],
									[
										487,
										488
									],
									[
										531,
										532
									],
									[
										543,
										544
									],
									[
										555,
										556
									],
									[
										580,
										581
									],
									[
										782,
										783
									],
									[
										794,
										795
									],
									[
										806,
										807
									],
									[
										830,
										831
									],
									[
										880,
										881
									],
									[
										886,
										887
									],
									[
										896,
										897
									],
									[
										919,
										920
									],
									[
										989,
										990
									],
									[
										1020,
										1021
									],
									[
										1032,
										1033
									],
									[
										1074,
										1075
									]
								],
								"scope": "<default>.l0.rb"
							},
							"rb_l1_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										213,
										214
									],
									[
										223,
										224
									],
									[
										299,
										300
									],
									[
										311,
										312
									],
									[
										384,
										385
									],
									[
										394,
										395
									],
									[
										484,
										485
									],
									[
										485,
										486
									],
									[
										577,
										578
									],
									[
										578,
										579
									],
									[
										827,
										828
									],
									[
										828,
										829
									],
									[
										916,
										917
									],
									[
										917,
										918
									],
									[
										1051,
										1052
									],
									[
										1072,
										1073
									]
								],
								"scope": "<default>.l1.rb"
							},
							"rb_l2_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										1067,
										1068
									],
									[
										1071,
										1072
									]
								],
								"scope": "<default>.l2.rb"
							}
						},
						"selection":
						[
							[
								196,
								196
							]
						],
						"settings":
						{
							"AutoSetSyntax/is_transient": false,
							"apply_syntax_touched": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_hover_provider_count": 2,
							"lsp_uri": "file:///home/alexzander/Alexzander__/programming/rust/python/src/builtins.rs",
							"rainbow_checked": true,
							"show_definitions": false,
							"syntax": "Packages/User/Rust-Test.sublime-syntax",
							"tab_size": 4
						},
						"translation.x": 0.0,
						"translation.y": 342.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 22,
					"file": "src/iterable.rs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 238,
						"regions":
						{
							"rb_l0_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										139,
										140
									],
									[
										236,
										237
									]
								],
								"scope": "<default>.l0.rb"
							},
							"rb_l1_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										218,
										219
									],
									[
										224,
										225
									]
								],
								"scope": "<default>.l1.rb"
							}
						},
						"selection":
						[
							[
								238,
								238
							]
						],
						"settings":
						{
							"AutoSetSyntax/is_transient": false,
							"apply_syntax_touched": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_hover_provider_count": 2,
							"lsp_uri": "file:///home/alexzander/Alexzander__/programming/rust/python/src/iterable.rs",
							"rainbow_checked": true,
							"show_definitions": false,
							"syntax": "Packages/User/Rust-Test.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 22,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 23,
					"file": "src/list/list.rs",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9098,
						"regions":
						{
							"rb_l0_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										143,
										144
									],
									[
										308,
										309
									],
									[
										981,
										982
									],
									[
										1074,
										1075
									],
									[
										1208,
										1209
									],
									[
										1274,
										1275
									],
									[
										1799,
										1800
									],
									[
										2401,
										2402
									],
									[
										2427,
										2428
									],
									[
										2482,
										2483
									],
									[
										2509,
										2510
									],
									[
										4219,
										4220
									],
									[
										4220,
										4221
									],
									[
										4405,
										4406
									],
									[
										4406,
										4407
									],
									[
										4873,
										4874
									],
									[
										4900,
										4901
									],
									[
										4908,
										4909
									],
									[
										4909,
										4910
									],
									[
										5080,
										5081
									],
									[
										5107,
										5108
									],
									[
										5115,
										5116
									],
									[
										5116,
										5117
									],
									[
										5267,
										5268
									],
									[
										5283,
										5284
									],
									[
										5291,
										5292
									],
									[
										5292,
										5293
									],
									[
										5417,
										5418
									],
									[
										5448,
										5449
									],
									[
										6204,
										6205
									],
									[
										6205,
										6206
									],
									[
										6316,
										6317
									],
									[
										6317,
										6318
									],
									[
										6502,
										6503
									],
									[
										6529,
										6530
									],
									[
										6716,
										6717
									],
									[
										6745,
										6746
									],
									[
										6963,
										6964
									],
									[
										7149,
										7150
									],
									[
										7356,
										7357
									],
									[
										7386,
										7387
									],
									[
										7592,
										7593
									],
									[
										7619,
										7620
									],
									[
										7970,
										7971
									],
									[
										8000,
										8001
									],
									[
										8318,
										8319
									],
									[
										8344,
										8345
									],
									[
										8491,
										8492
									],
									[
										8527,
										8528
									],
									[
										8793,
										8794
									],
									[
										8832,
										8833
									],
									[
										9096,
										9097
									]
								],
								"scope": "<default>.l0.rb"
							},
							"rb_l1_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										149,
										150
									],
									[
										307,
										308
									],
									[
										1224,
										1225
									],
									[
										1230,
										1231
									],
									[
										1241,
										1242
									],
									[
										1272,
										1273
									],
									[
										1836,
										1837
									],
									[
										1837,
										1838
									],
									[
										1847,
										1848
									],
									[
										1914,
										1915
									],
									[
										2057,
										2058
									],
									[
										2063,
										2064
									],
									[
										2073,
										2074
									],
									[
										2399,
										2400
									],
									[
										2443,
										2444
									],
									[
										2444,
										2445
									],
									[
										2454,
										2455
									],
									[
										2480,
										2481
									],
									[
										3515,
										3516
									],
									[
										3521,
										3522
									],
									[
										3533,
										3534
									],
									[
										3701,
										3702
									],
									[
										3756,
										3757
									],
									[
										3762,
										3763
									],
									[
										3774,
										3775
									],
									[
										4898,
										4899
									],
									[
										4899,
										4900
									],
									[
										5105,
										5106
									],
									[
										5106,
										5107
									],
									[
										5415,
										5416
									],
									[
										5460,
										5461
									],
									[
										5494,
										5495
									],
									[
										5511,
										5512
									],
									[
										6500,
										6501
									],
									[
										6663,
										6664
									],
									[
										6669,
										6670
									],
									[
										6688,
										6689
									],
									[
										6714,
										6715
									],
									[
										6758,
										6759
									],
									[
										6779,
										6780
									],
									[
										6789,
										6790
									],
									[
										6961,
										6962
									],
									[
										7162,
										7163
									],
									[
										7179,
										7180
									],
									[
										7189,
										7190
									],
									[
										7354,
										7355
									],
									[
										7399,
										7400
									],
									[
										7415,
										7416
									],
									[
										7425,
										7426
									],
									[
										7590,
										7591
									],
									[
										7688,
										7689
									],
									[
										7745,
										7746
									],
									[
										7758,
										7759
									],
									[
										7772,
										7773
									],
									[
										7782,
										7783
									],
									[
										7968,
										7969
									],
									[
										8077,
										8078
									],
									[
										8090,
										8091
									],
									[
										8100,
										8101
									],
									[
										8316,
										8317
									],
									[
										8400,
										8401
									],
									[
										8418,
										8419
									],
									[
										8447,
										8448
									],
									[
										8489,
										8490
									],
									[
										8574,
										8575
									],
									[
										8610,
										8611
									],
									[
										8620,
										8621
									],
									[
										8791,
										8792
									],
									[
										8882,
										8883
									],
									[
										8917,
										8918
									],
									[
										8927,
										8928
									],
									[
										9094,
										9095
									]
								],
								"scope": "<default>.l1.rb"
							},
							"rb_l2_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										1265,
										1266
									],
									[
										1266,
										1267
									],
									[
										1862,
										1863
									],
									[
										1908,
										1909
									],
									[
										2110,
										2111
									],
									[
										2379,
										2380
									],
									[
										2473,
										2474
									],
									[
										2474,
										2475
									],
									[
										3575,
										3576
									],
									[
										3576,
										3577
									],
									[
										3578,
										3579
									],
									[
										3634,
										3635
									],
									[
										3641,
										3642
									],
									[
										3695,
										3696
									],
									[
										3853,
										3854
									],
									[
										3854,
										3855
									],
									[
										3856,
										3857
									],
									[
										3905,
										3906
									],
									[
										3960,
										3961
									],
									[
										3961,
										3962
									],
									[
										3997,
										3998
									],
									[
										3999,
										4000
									],
									[
										4007,
										4008
									],
									[
										4008,
										4009
									],
									[
										4077,
										4078
									],
									[
										4595,
										4596
									],
									[
										4704,
										4705
									],
									[
										4705,
										4706
									],
									[
										4711,
										4712
									],
									[
										4713,
										4714
									],
									[
										4715,
										4716
									],
									[
										5338,
										5339
									],
									[
										5374,
										5375
									],
									[
										5378,
										5379
									],
									[
										5590,
										5591
									],
									[
										5591,
										5592
									],
									[
										5593,
										5594
									],
									[
										5659,
										5660
									],
									[
										5696,
										5697
									],
									[
										5698,
										5699
									],
									[
										5706,
										5707
									],
									[
										5707,
										5708
									],
									[
										5776,
										5777
									],
									[
										5963,
										5964
									],
									[
										6072,
										6073
									],
									[
										6073,
										6074
									],
									[
										6079,
										6080
									],
									[
										6081,
										6082
									],
									[
										6083,
										6084
									],
									[
										6471,
										6472
									],
									[
										6487,
										6488
									],
									[
										6494,
										6495
									],
									[
										6804,
										6805
									],
									[
										6955,
										6956
									],
									[
										7204,
										7205
									],
									[
										7348,
										7349
									],
									[
										7440,
										7441
									],
									[
										7584,
										7585
									],
									[
										7707,
										7708
									],
									[
										7744,
										7745
									],
									[
										7828,
										7829
									],
									[
										7829,
										7830
									],
									[
										7862,
										7863
									],
									[
										7903,
										7904
									],
									[
										7919,
										7920
									],
									[
										7962,
										7963
									],
									[
										8161,
										8162
									],
									[
										8162,
										8163
									],
									[
										8201,
										8202
									],
									[
										8256,
										8257
									],
									[
										8271,
										8272
									],
									[
										8310,
										8311
									],
									[
										8459,
										8460
									],
									[
										8483,
										8484
									],
									[
										8662,
										8663
									],
									[
										8663,
										8664
									],
									[
										8707,
										8708
									],
									[
										8764,
										8765
									],
									[
										8968,
										8969
									],
									[
										8969,
										8970
									],
									[
										9012,
										9013
									],
									[
										9068,
										9069
									]
								],
								"scope": "<default>.l2.rb"
							},
							"rb_l3_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										1896,
										1897
									],
									[
										1897,
										1898
									],
									[
										2138,
										2139
									],
									[
										2369,
										2370
									],
									[
										3599,
										3600
									],
									[
										3624,
										3625
									],
									[
										3662,
										3663
									],
									[
										3685,
										3686
									],
									[
										3889,
										3890
									],
									[
										3894,
										3895
									],
									[
										4105,
										4106
									],
									[
										4113,
										4114
									],
									[
										4118,
										4119
									],
									[
										4264,
										4265
									],
									[
										4291,
										4292
									],
									[
										4299,
										4300
									],
									[
										4304,
										4305
									],
									[
										4450,
										4451
									],
									[
										4470,
										4471
									],
									[
										4584,
										4585
									],
									[
										4743,
										4744
									],
									[
										5327,
										5328
									],
									[
										5613,
										5614
									],
									[
										5621,
										5622
									],
									[
										5645,
										5646
									],
									[
										5648,
										5649
									],
									[
										5804,
										5805
									],
									[
										5808,
										5809
									],
									[
										5819,
										5820
									],
									[
										5844,
										5845
									],
									[
										5871,
										5872
									],
									[
										5875,
										5876
									],
									[
										5886,
										5887
									],
									[
										5911,
										5912
									],
									[
										5937,
										5938
									],
									[
										5952,
										5953
									],
									[
										6111,
										6112
									],
									[
										6400,
										6401
									],
									[
										6862,
										6863
									],
									[
										6863,
										6864
									],
									[
										6885,
										6886
									],
									[
										6917,
										6918
									],
									[
										6943,
										6944
									],
									[
										6944,
										6945
									],
									[
										7255,
										7256
									],
									[
										7256,
										7257
									],
									[
										7278,
										7279
									],
									[
										7310,
										7311
									],
									[
										7336,
										7337
									],
									[
										7337,
										7338
									],
									[
										7491,
										7492
									],
									[
										7492,
										7493
									],
									[
										7514,
										7515
									],
									[
										7546,
										7547
									],
									[
										7572,
										7573
									],
									[
										7573,
										7574
									],
									[
										7876,
										7877
									],
									[
										7902,
										7903
									],
									[
										8470,
										8471
									],
									[
										8482,
										8483
									],
									[
										8745,
										8746
									],
									[
										8753,
										8754
									],
									[
										9049,
										9050
									],
									[
										9057,
										9058
									]
								],
								"scope": "<default>.l3.rb"
							},
							"rb_l4_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										2170,
										2171
									],
									[
										2178,
										2179
									],
									[
										2183,
										2184
									],
									[
										2234,
										2235
									],
									[
										2265,
										2266
									],
									[
										2273,
										2274
									],
									[
										2278,
										2279
									],
									[
										2329,
										2330
									],
									[
										2353,
										2354
									],
									[
										2354,
										2355
									],
									[
										3622,
										3623
									],
									[
										3623,
										3624
									],
									[
										3683,
										3684
									],
									[
										3684,
										3685
									],
									[
										4166,
										4167
									],
									[
										4249,
										4250
									],
									[
										4352,
										4353
									],
									[
										4435,
										4436
									],
									[
										4539,
										4540
									],
									[
										4569,
										4570
									],
									[
										4775,
										4776
									],
									[
										4783,
										4784
									],
									[
										4788,
										4789
									],
									[
										4951,
										4952
									],
									[
										4982,
										4983
									],
									[
										4990,
										4991
									],
									[
										4995,
										4996
									],
									[
										5158,
										5159
									],
									[
										5182,
										5183
									],
									[
										5312,
										5313
									],
									[
										5646,
										5647
									],
									[
										5647,
										5648
									],
									[
										5842,
										5843
									],
									[
										5843,
										5844
									],
									[
										5909,
										5910
									],
									[
										5910,
										5911
									],
									[
										6143,
										6144
									],
									[
										6147,
										6148
									],
									[
										6152,
										6153
									],
									[
										6224,
										6225
									],
									[
										6255,
										6256
									],
									[
										6259,
										6260
									],
									[
										6264,
										6265
									],
									[
										6336,
										6337
									],
									[
										6366,
										6367
									],
									[
										6385,
										6386
									],
									[
										6902,
										6903
									],
									[
										6916,
										6917
									],
									[
										7295,
										7296
									],
									[
										7309,
										7310
									],
									[
										7531,
										7532
									],
									[
										7545,
										7546
									],
									[
										7892,
										7893
									],
									[
										7901,
										7902
									]
								],
								"scope": "<default>.l4.rb"
							},
							"rb_l5_<default>":
							{
								"flags": 272,
								"regions":
								[
									[
										4195,
										4196
									],
									[
										4221,
										4222
									],
									[
										4229,
										4230
									],
									[
										4230,
										4231
									],
									[
										4381,
										4382
									],
									[
										4407,
										4408
									],
									[
										4415,
										4416
									],
									[
										4416,
										4417
									],
									[
										4547,
										4548
									],
									[
										4559,
										4560
									],
									[
										4567,
										4568
									],
									[
										4568,
										4569
									],
									[
										4840,
										4841
									],
									[
										4932,
										4933
									],
									[
										5047,
										5048
									],
									[
										5139,
										5140
									],
									[
										5259,
										5260
									],
									[
										5293,
										5294
									],
									[
										6180,
										6181
									],
									[
										6206,
										6207
									],
									[
										6292,
										6293
									],
									[
										6318,
										6319
									],
									[
										6913,
										6914
									],
									[
										6915,
										6916
									],
									[
										7306,
										7307
									],
									[
										7308,
										7309
									],
									[
										7542,
										7543
									],
									[
										7544,
										7545
									]
								],
								"scope": "<default>.l5.rb"
							}
						},
						"selection":
						[
							[
								1275,
								1275
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"auto_complete_triggers":
							[
								{
									"characters": "<",
									"selector": "text.html, text.xml"
								},
								{
									"rhs_empty": true,
									"selector": "punctuation.accessor"
								}
							],
							"lsp_hover_provider_count": 2,
							"lsp_uri": "file:///home/alexzander/Alexzander__/programming/rust/python/src/list/list.rs",
							"rainbow_checked": true,
							"show_definitions": false,
							"syntax": "Packages/User/Rust-Test.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2237.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 47.0
	},
	"input":
	{
		"height": 70.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.AutoSetSyntax":
	{
		"height": 0.0
	},
	"output.Debugger":
	{
		"height": 210.0
	},
	"output.Debugger: Console":
	{
		"height": 0.0
	},
	"output.Debugger: Protocol":
	{
		"height": 0.0
	},
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.Terminus":
	{
		"height": 913.0
	},
	"output.autopep8":
	{
		"height": 0.0
	},
	"output.diagnostics":
	{
		"height": 291.0
	},
	"output.doc":
	{
		"height": 0.0
	},
	"output.exec":
	{
		"height": 291.0
	},
	"output.find_results":
	{
		"height": 168.0
	},
	"output.git":
	{
		"height": 210.0
	},
	"output.language servers":
	{
		"height": 367.0
	},
	"output.markdown":
	{
		"height": 180.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.mdpopups-dummy":
	{
		"height": 0.0
	},
	"output.references":
	{
		"height": 259.0
	},
	"output.xdebug":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "rust-python-objects.sublime-project",
	"replace":
	{
		"height": 90.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"main",
				"examples/python_list/main.rs"
			],
			[
				"python",
				"examples/python_list.rs"
			],
			[
				"todo",
				"TODO.md"
			],
			[
				"hash",
				"examples/hashable.rs"
			],
			[
				"bool",
				"src/boolean.rs"
			],
			[
				"float",
				"src/float.rs"
			],
			[
				"inteer",
				"examples/integer_example.rs"
			],
			[
				"tod",
				"TODO.md"
			],
			[
				"list",
				"src/list/list.rs"
			],
			[
				"integer",
				"src/integer.rs"
			],
			[
				"chara",
				"src/character.rs"
			],
			[
				"inte",
				"src/integer.rs"
			],
			[
				"char",
				"src/character.rs"
			],
			[
				"",
				"src/builtins.rs"
			],
			[
				"string",
				"src/string.rs"
			],
			[
				"built",
				"src/builtins.rs"
			],
			[
				"ob",
				"src/object.rs"
			],
			[
				"obj",
				"src/object.rs"
			],
			[
				"o",
				"src/object.rs"
			],
			[
				"bui",
				"src/builtins.rs"
			],
			[
				"appe",
				"src/list/append.rs"
			],
			[
				"cargo",
				"Cargo.toml"
			],
			[
				"iter",
				"src/iterable.rs"
			],
			[
				"itera",
				"src/iterable.rs"
			],
			[
				"lib",
				"src/lib.rs"
			],
			[
				"change",
				"changelog/0.0.6.md"
			],
			[
				"make",
				"Makefile"
			],
			[
				"bu",
				"src/builtins.rs"
			],
			[
				"rust",
				"rustfmt.toml"
			],
			[
				"lib.rs",
				"src/lib.rs"
			],
			[
				"ci",
				"workflows/CI.yaml"
			],
			[
				"read",
				"README.md"
			],
			[
				"itnr",
				"book/src/introduction.md"
			],
			[
				"append",
				"src/list/append.rs"
			],
			[
				"boolea",
				"src/boolean.rs"
			],
			[
				"int",
				"src/integer.rs"
			],
			[
				"sub",
				"sublime.tm"
			],
			[
				"ma",
				"Makefile"
			],
			[
				"dcits",
				"src/dict.rs"
			],
			[
				"aes",
				"docs/python_list/showcase.md"
			],
			[
				"exa",
				"examples/example.rs"
			],
			[
				"test",
				"tests/test_aesthetics.rs"
			],
			[
				"int.rs",
				"src/int.rs"
			],
			[
				"rus",
				"rust/rust.md"
			],
			[
				"docs",
				"docs/docs.md"
			],
			[
				"life",
				"examples/lifetime.rs"
			],
			[
				"test_alog",
				"tests/test_algorithms.rs"
			],
			[
				"algo",
				"src/algorithms.rs"
			],
			[
				"gene",
				"examples/generics.rs"
			],
			[
				"caro",
				"Cargo.toml"
			],
			[
				"type",
				"examples/types.rs"
			],
			[
				"types",
				"repos/bat/assets/syntaxes/02_Extra/TypeScript.sublime-syntax"
			],
			[
				"flow",
				"examples/flow_control.rs"
			],
			[
				"Cargo",
				"Cargo.toml"
			],
			[
				"Make",
				"target/doc/syn/macro.custom_keyword!.html"
			],
			[
				"com",
				"compile.py"
			],
			[
				"long",
				"long.py"
			],
			[
				"git.p",
				"pepe/core/git.py"
			],
			[
				"create",
				"pepe/argv/create.py"
			],
			[
				"pipenv",
				"pipenv.md"
			],
			[
				"far",
				"marketing/comenzi.farmaciatei.json"
			],
			[
				"bebe",
				"marketing/comenzi.bebetei.json"
			],
			[
				"spinner",
				"_core/animations/spinners.py"
			],
			[
				"req",
				"_core/_requests.py"
			],
			[
				"progre",
				"_core/animations/progress.py"
			],
			[
				"prore",
				"_core/progress__.py"
			],
			[
				"spiner",
				"_core/animations/spinners.py"
			],
			[
				"somet",
				"something.txt"
			],
			[
				"acc",
				"Accounts&Passwords.json"
			],
			[
				"ac",
				"Achievements2021.txt"
			],
			[
				"diocs",
				"cursuri/drive/drive-download-20220129T143222Z-00ASD1/Lab 322/New folder/Data/population_total.csv"
			],
			[
				"sol",
				"rezolvare/problema-1/procedura-1/solution.r"
			],
			[
				"redo",
				"redo.r"
			],
			[
				"raport",
				"raport.Rmd"
			],
			[
				"R",
				"R.md"
			],
			[
				"pipv",
				"pipenv.md"
			],
			[
				".git",
				".gitignore"
			],
			[
				".env",
				"django_web_app/.env"
			],
			[
				"app.py",
				"~/Alexzander__/programming/python3/learning/quart/app.py"
			],
			[
				"set",
				"django_web_app/application/settings.py"
			],
			[
				"regist",
				"django_web_app/todos/templates/todos/register.html"
			],
			[
				"base",
				"django_web_app/templates/base_index.html"
			],
			[
				"register.js",
				"django_web_app/todos/static/todos/js/register.js"
			],
			[
				"register",
				"django_web_app/todos/templates/todos/register.html"
			],
			[
				"control_pa",
				"django_web_app/control_panel/models.py"
			],
			[
				"todos_",
				"todos/tests/test_todos_api_views.py"
			],
			[
				"test_api",
				"api/tests/test_api_views.py"
			],
			[
				"mongo",
				"mongo_client.py"
			],
			[
				"remote",
				"remote_credentials.py"
			],
			[
				"crede",
				"credentials.py"
			],
			[
				"CRE",
				"credentials.py"
			],
			[
				"views",
				"views_enhanced.py"
			],
			[
				"conf",
				"conftest.py"
			],
			[
				"pytest",
				"pytest.ini"
			],
			[
				"test_todos",
				"todos/tests/test_todos_views.py"
			],
			[
				"ake",
				"Makefile"
			],
			[
				"SET",
				"application/settings.py"
			],
			[
				"css",
				"todos/static/todos/css/style.css"
			],
			[
				"url",
				"application/urls.py"
			],
			[
				"data",
				"routers/database_routers.py"
			],
			[
				"sett",
				"application/settings.py"
			],
			[
				"models",
				"todos/models.py"
			],
			[
				"application/ur",
				"application/urls.py"
			],
			[
				"todod",
				"TODO.md"
			],
			[
				"gitnore",
				".gitignore"
			],
			[
				"cred",
				"credentials.py"
			],
			[
				"todos",
				"todos/views.py"
			],
			[
				"modes",
				"api/models.py"
			],
			[
				"database",
				"routers/database_routers.py"
			],
			[
				"run",
				"run-server.sh"
			],
			[
				"maker",
				"maker"
			],
			[
				"todos/index",
				"todos/templates/todos/index.html"
			],
			[
				"manage",
				"manager.sh"
			],
			[
				"todos views",
				"todos/api/views.py"
			],
			[
				"todos.",
				"todos/views.py"
			],
			[
				"urls.py",
				"application/urls.py"
			],
			[
				"learning",
				"learning/views.py"
			],
			[
				"mana",
				"manage.py"
			],
			[
				"learn",
				"learning/views.py"
			],
			[
				"BASE",
				"templates/base_index.html"
			],
			[
				"base_inde",
				"templates/base_index.html"
			],
			[
				"urls",
				"simulation/core/urls.py"
			],
			[
				"extene",
				"todos/templates/extender.html"
			],
			[
				"sublime",
				"django_web_app.sublime-project"
			],
			[
				"route",
				"django_web_app/application/templates/index_routes.html"
			],
			[
				"base.cs",
				"django_web_app/static/css/base.css"
			],
			[
				"isnta",
				"documentation/new_manjaro_installation.md"
			],
			[
				"ett",
				"django_web_app/application/settings.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Alexzander__/programming/projects/chuck_noris_asp_net/ChuckNorris/ProjectChuckNorris/ChuckNorris.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 366.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
